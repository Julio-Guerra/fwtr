Results generated by fwts: Version V16.01.00 (2016-01-13 08:23:12).

Some of this work - Copyright (c) 1999 - 2016, Intel Corp. All rights reserved.
Some of this work - Copyright (c) 2010 - 2016, Canonical.

This test run on 18/02/16 at 23:46:05 on host Linux ubuntu 4.2.0-18-generic
#22~14.04.1-Ubuntu SMP Fri Nov 6 22:20:11 UTC 2015 x86_64.

Command: "fwts --force-clean --skip-test=s3 --batch --uefitests
--show-progress-dialog --log-type plaintext".
Running tests: version bios_info oops klog mtrr acpiinfo uefirtauthvar
uefibootpath securebootcert uefirtmisc uefirtvariable uefirttime csm maxreadreq
crs aspm dmicheck microcode msr nx cpufreq maxfreq virt pnp pciirq mpcheck
hda_audio ebda bios32 apicedge xenv xsdt wmi wdat wakealarm waet uefi tpm2 tcpa
syntaxcheck stao srat spmi spcr slit slic sbst rsdt rsdp pcc osilinux method
msdm mchi mcfg madt lpit iort hpet hest gtdt fpdt fan fadt facs erst ecdt dmar
dbg2 dbgp cstates csrt cpep checksum autobrightness boot bgrt bert aspt asf
apicinstance acpitables.

version: Gather kernel system information.
--------------------------------------------------------------------------------
Test 1 of 4: Gather kernel signature.
Signature: Ubuntu 4.2.0-18.22~14.04.1-generic 4.2.3

Test 2 of 4: Gather kernel system information.
Kernel Version: Linux version 4.2.0-18-generic (buildd@lgw01-55) (gcc version
4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #22~14.04.1-Ubuntu SMP Fri Nov 6 22:20:11 UTC
2015

Test 3 of 4: Gather kernel boot command line.
Kernel boot command line: BOOT_IMAGE=/casper/vmlinuz boot=casper ip=frommedia
persistent noprompt splash quiet FWTS_AUTO_SHUTDOWN=1 --

Test 4 of 4: Gather ACPI driver version.
ACPI Version: 20150619

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 4 info only.
================================================================================

bios_info: Gather BIOS DMI information.
--------------------------------------------------------------------------------
Test 1 of 1: Gather BIOS DMI information
BIOS Vendor       : American Megatrends Inc.
BIOS Version      : K56CA.208
BIOS Release Date : 11/13/2012
Board Name        : K56CA
Board Serial #    : removed
Board Version     : 1.0
Board Asset Tag   : removed
Chassis Serial #  : removed
Chassis Type      : 10
Chassis Vendor    : ASUSTeK COMPUTER INC.
Chassis Version   : 1.0
Chassic Asset Tag : No Asset Tag
Product Name      : K56CA
Product Serial #  : removed
Product UUID      : removed
Product Version   : 1.0
System Vendor     : ASUSTeK COMPUTER INC.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

oops: Scan kernel log for Oopses.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log oops check.
PASSED: Test 1, Found no oopses in kernel log.
PASSED: Test 1, Found no WARN_ON warnings in kernel log.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

klog: Scan kernel log for errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log error check.
Kernel message: [ 0.026098] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'

ADVICE: This is not exactly a failure but a warning from the kernel. The
MSR_IA32_ENERGY_PERF_BIAS was initialized and defaulted to a high performance
bias setting. The kernel has detected this and changed it down to a 'normal'
bias setting.

Kernel message: [ 0.132446] [Firmware Bug]: ACPI: BIOS _OSI(Linux) query ignored

ADVICE: This is not exactly a failure mode but a warning from the kernel. The
_OSI() method has implemented a match to the 'Linux' query in the DSDT and this
is redundant because the ACPI driver matches onto the Windows _OSI strings by
default.

Kernel message: [ 0.136117] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S1_] (20150619/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S1 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S1 sleep state, however, it should not be a problem if the S1 sleep
state isn't supported intentionally.

Kernel message: [ 0.136123] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S2_] (20150619/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S2 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S2 sleep state, however, it should not be a problem if the S2 sleep
state isn't supported intentionally.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.461984] ACPI
Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with
OpRegion 0x0000000000000400-0x000000000000044F (\GPIS) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.461994] ACPI
Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with
OpRegion 0x0000000000000400-0x000000000000047F (\PMIO) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462007] ACPI
Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462013] ACPI
Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462022] ACPI
Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462028] ACPI
Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462037] ACPI
Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 28.462042] ACPI
Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [LOW] KlogAcpiSystemIOConflictLpcIchWatchDogTimer: Test 1, LOW Kernel
message: [ 28.462051] lpc_ich: Resource conflict(s) found affecting gpio_ich

ADVICE: A resource conflict has occurred between ACPI OperationRegions and the
same I/O region used by the lpc_ich driver for the General Purpose I/O (GPIO)
region. Sometimes this GPIO region is used by the firmware for rfkill or LED
controls or very rarely for the Embedded Controller System Control Interrupt.
This may require deeper inspection to check if the conflict will lead to any
real issues. However, in the vast majority of cases this warning can be ignored
as no harm will occur.

Found 9 unique errors in kernel log.

================================================================================
0 passed, 9 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mtrr: MTRR tests.
--------------------------------------------------------------------------------
MTRR overview
-------------
Reg 0: 0x0000000000000000 - 0x0000000080000000 (  2048 MB)   Write-Back
Reg 1: 0x0000000080000000 - 0x00000000c0000000 (  1024 MB)   Write-Back
Reg 2: 0x00000000c0000000 - 0x00000000e0000000 (   512 MB)   Write-Back
Reg 3: 0x00000000dbc00000 - 0x00000000dc000000 (     4 MB)   Uncached
Reg 4: 0x00000000dc000000 - 0x00000000e0000000 (    64 MB)   Uncached
Reg 5: 0x0000000100000000 - 0x0000000120000000 (   512 MB)   Write-Back
Reg 6: 0x000000011f200000 - 0x000000011f400000 (     2 MB)   Uncached
Reg 7: 0x000000011f400000 - 0x000000011f800000 (     4 MB)   Uncached
Reg 8: 0x000000011f800000 - 0x0000000120000000 (     8 MB)   Uncached

Test 1 of 3: Validate the kernel MTRR IOMEM setup.
FAILED [MEDIUM] MTRRIncorrectAttr: Test 1, Memory range 0xdfe08000 to 0xdfe0ffff
(0000:00:04.0) has incorrect attribute Write-Back.

Test 2 of 3: Validate the MTRR setup across all processors.
PASSED: Test 2, All processors have the a consistent MTRR setup.

Test 3 of 3: Test for AMD MtrrFixDramModEn being cleared by the BIOS.
SKIPPED: Test 3, CPU is not an AMD, cannot test.

================================================================================
1 passed, 1 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

acpiinfo: General ACPI information test.
--------------------------------------------------------------------------------
Test 1 of 3: Determine Kernel ACPI version.
Kernel ACPICA driver version: 20150619, supports ACPI 5.0

Test 2 of 3: Determine machine's ACPI version.
FADT X_FIRMWARE_CTRL 64 bit pointer was zero, falling back to using
FIRMWARE_CTRL 32 bit pointer.
FACP ACPI Version: 5.0 

Test 3 of 3: Determine AML compiler.
Determine the compiler used to generate the ACPI AML in the DSDT and SSDT.
Table DSDT, OEM _ASUS_, created with INTL (Intel) compiler.
Table SSDT0, OEM DptfTa, created with INTL (Intel) compiler.
Table SSDT1, OEM SADptf, created with INTL (Intel) compiler.
Table SSDT2, OEM PchDpt, created with INTL (Intel) compiler.
Table SSDT3, OEM CfgTDP, created with INTL (Intel) compiler.
Table SSDT4, OEM AhciR1, created with INTL (Intel) compiler.
Table SSDT5, OEM AhciR2, created with INTL (Intel) compiler.
Table SSDT6, OEM PmRef, created with INTL (Intel) compiler.
Table SSDT7, OEM PmRef, created with INTL (Intel) compiler.
Table SSDT8, OEM Iffs, created with INTL (Intel) compiler.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 3 info only.
================================================================================

uefirtauthvar: Authenticated variable tests.
--------------------------------------------------------------------------------
Test 1 of 12: Create authenticated variable test.
FAILED [HIGH] UEFICreateAuthVar: Test 1, Failed to create authenticated variable
with UEFI runtime service.
Return status: EFI_SECURITY_VIOLATION. The function was not performed due to a
security violation.

Test 2 of 12: Authenticated variable test with the same authenticated variable.
SKIPPED: Test 2, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 3 of 12: Authenticated variable test with another valid authenticated
variable.
SKIPPED: Test 3, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 4 of 12: Append authenticated variable test.
SKIPPED: Test 4, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 5 of 12: Update authenticated variable test.
SKIPPED: Test 5, The test data, AuthVarAppend, doesn't exist, skip the test.

Test 6 of 12: Authenticated variable test with old authenticated variable.
SKIPPED: Test 6, The test variable, AuthVarUpdate, doesn't exist, skip the test.

Test 7 of 12: Delete authenticated variable test.
SKIPPED: Test 7, The test data, AuthVarCreate, doesn't exist, skip the test.

Test 8 of 12: Authenticated variable test with invalid modified data.
PASSED: Test 8, Set authenticated variable test with invalid modified data
passed.

Test 9 of 12: Authenticated variable test with invalid modified timestamp.
PASSED: Test 9, Set authenticated variable test with invalid modified timestamp
passed.

Test 10 of 12: Authenticated variable test with different guid.
PASSED: Test 10, Set authenticated variable test with different guid passed.

Test 11 of 12: Authenticated variable test with invalid attributes.
PASSED: Test 11, Set authenticated variable test with invalid attributes passed.

Test 12 of 12: Set and delete authenticated variable created by different key
test.
FAILED [HIGH] UEFISetAuthVarDiff: Test 12, Failed to set authenticated variable
with UEFI runtime service.
Return status: EFI_SECURITY_VIOLATION. The function was not performed due to a
security violation.

================================================================================
4 passed, 2 failed, 0 warning, 0 aborted, 6 skipped, 0 info only.
================================================================================

uefibootpath: Sanity check for UEFI Boot Path Boot####.
--------------------------------------------------------------------------------
Test 1 of 1: Test UEFI Boot Path Boot####.
Name: Boot0001
Info: Windows Boot Manager
PASSED: Test 1, Check bootpath Boot0001 test passed.
Name: Boot0002
Info: UEFI: SanDisk Cruzer Glide 1.26
PASSED: Test 1, Check bootpath Boot0002 test passed.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

securebootcert: UEFI secure boot test.
--------------------------------------------------------------------------------
Test 1 of 1: UEFI secure boot test.
The KEK variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x27 (NonVolatile,BootServ,RunTime,TimeBaseAuthenicatedWrite).
SKIPPED: Test 1, Cannot determine system, stop checking the Master CA
certificate.

The SecureBoot variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x16 (BootServ,RunTime,AuthenicatedWrite).
  Value: 0x00 (Secure Boot Mode Off).
PASSED: Test 1, Secure boot relative variable SecureBoot check passed.

The SetupMode variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x16 (BootServ,RunTime,AuthenicatedWrite).
  Value: 0x00 (User Mode).
PASSED: Test 1, Secure boot relative variable SetupMode check passed.

The db variable check.
  GUID: D719B2CB-3D3A-4596-A3BC-DAD00E67656F
  Attr: 0x27 (NonVolatile,BootServ,RunTime,TimeBaseAuthenicatedWrite).
Check Microsoft UEFI CA certificate presence in db
PASSED: Test 1, MS UEFI CA 2011 key check passed.


================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefirtmisc: UEFI miscellaneous runtime service interface tests.
--------------------------------------------------------------------------------
Test 1 of 3: Test for UEFI miscellaneous runtime service interfaces.
Testing UEFI runtime service GetNextHighMonotonicCount interface.
PASSED: Test 1, UEFI runtime service GetNextHighMonotonicCount interface test
passed.
Testing UEFI runtime service QueryCapsuleCapabilities interface.
SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x0: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x10000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x30000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x50000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x70000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.


Test 2 of 3: Stress test for UEFI miscellaneous runtime service interfaces.
Stress testing for UEFI runtime service GetNextHighMonotonicCount interface.
PASSED: Test 2, UEFI runtime service GetNextHighMonotonicCount interface stress
test passed.
Stress testing UEFI runtime service QueryCapsuleCapabilities interface.
SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x0: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x10000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x30000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x50000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x70000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.


Test 3 of 3: Test GetNextHighMonotonicCount with invalid NULL parameter.
PASSED: Test 3, Test with invalid NULL parameter returned EFI_INVALID_PARAMETER
as expected.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 10 skipped, 0 info only.
================================================================================

uefirtvariable: UEFI Runtime service variable interface tests.
--------------------------------------------------------------------------------
Test 1 of 8: Test UEFI RT service get variable interface.
PASSED: Test 1, UEFI runtime service GetVariable interface test passed.

Test 2 of 8: Test UEFI RT service get next variable name interface.
The runtime service GetNextVariableName interface function test.
PASSED: Test 2, The runtime service GetNextVariableName interface function test
passed.
Check the GetNextVariableName returned value of VariableNameSize is equal to the
length of VariableName.
PASSED: Test 2, Check the GetNextVariableName returned value of VariableNameSize
is equal to the length of VariableName passed.
Test GetNextVariableName interface returns unique variables.
PASSED: Test 2, Test GetNextVariableName interface returns unique variables
passed.
The GetNextVariableName interface conformance tests.
PASSED: Test 2, The runtime service GetNextVariableName interface conformance
tests passed.

Test 3 of 8: Test UEFI RT service set variable interface.
Testing SetVariable on two different GUIDs and the same variable name.
PASSED: Test 3, SetVariable on two different GUIDs and the same variable name
passed.
Testing SetVariable on the same and different variable data.
PASSED: Test 3, SetVariable on the same and different variable data passed.
Testing SetVariable on similar variable name.
PASSED: Test 3, SetVariable on similar variable name passed.
Testing SetVariable on DataSize is 0.
PASSED: Test 3, SetVariable on DataSize is 0 passed.
Testing SetVariable on Attributes is 0.
PASSED: Test 3, SetVariable on Attributes is 0 passed.
Testing SetVariable on Invalid Attributes.
PASSED: Test 3, SetVariable on Invalid Attributes passed.
Testing SetVariable with both Authenticated Attributes set.
PASSED: Test 3, Testing SetVariable with both Authenticated Attributes set
passed.

Test 4 of 8: Test UEFI RT service query variable info interface.
PASSED: Test 4, UEFI runtime service query variable info interface test passed.

Test 5 of 8: Test UEFI RT service variable interface stress test.
Testing GetVariable on getting the variable 1024 times.
PASSED: Test 5, GetVariable on getting the variable multiple times passed.
Testing GetNextVariableName on getting the variable multiple times.
PASSED: Test 5, GetNextVariableName on getting the next variable name multiple
times passed.

Test 6 of 8: Test UEFI RT service set variable interface stress test.
Testing SetVariable on setting the variable with the same data 40 times.
PASSED: Test 6, SetVariable on setting the variable with the same data multiple
times passed.
Testing SetVariable on setting the variable with different data 40 times.
PASSED: Test 6, Testing SetVariable on setting the variable with different data
multiple times passed.
Testing SetVariable on setting the variable with different name 40 times.
PASSED: Test 6, Testing SetVariable on setting the variable with different name
multiple times passed.
Testing SetVariable on setting the variable with different name and data 40
times.
PASSED: Test 6, Testing SetVariable on setting the variable with different name
and data multiple times passed.

Test 7 of 8: Test UEFI RT service query variable info interface stress test.
Testing QueryVariableInfo on querying the variable 1024 times.
PASSED: Test 7, UEFI runtime service query variable info interface stress test
passed.

Test 8 of 8: Test UEFI RT service get variable interface, invalid parameters.
Testing GetVariable with NULL variable name.
PASSED: Test 8, GetVariable with NULL variable name returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL vendor GUID.
PASSED: Test 8, GetVariable with NULL vendor GUID returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL datasize.
PASSED: Test 8, GetVariable with NULL datasize returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL data.
PASSED: Test 8, GetVariable with NULL data returned error EFI_INVALID_PARAMETER
as expected.
Testing GetVariable with NULL variable name, vendor GUID, datasize and data.
PASSED: Test 8, GetVariable with NULL variable name, vendor GUID, datasize and
data returned error EFI_INVALID_PARAMETER as expected.

================================================================================
25 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

uefirttime: UEFI Runtime service time interface tests.
--------------------------------------------------------------------------------
Test 1 of 35: Test UEFI RT service get time interface.
PASSED: Test 1, UEFI runtime service GetTime interface test passed.

Test 2 of 35: Test UEFI RT service get time interface, NULL time parameter.
PASSED: Test 2, UEFI runtime service GetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 3 of 35: Test UEFI RT service get time interface, NULL time and NULL
capabilties parameters.
PASSED: Test 3, UEFI runtime service GetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 4 of 35: Test UEFI RT service set time interface.
PASSED: Test 4, UEFI runtime service SetTime interface test passed.

Test 5 of 35: Test UEFI RT service set time interface, invalid year 1899.
PASSED: Test 5, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 6 of 35: Test UEFI RT service set time interface, invalid year 10000.
PASSED: Test 6, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 7 of 35: Test UEFI RT service set time interface, invalid month 0.
PASSED: Test 7, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 8 of 35: Test UEFI RT service set time interface, invalid month 13.
PASSED: Test 8, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 9 of 35: Test UEFI RT service set time interface, invalid day 0.
PASSED: Test 9, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 10 of 35: Test UEFI RT service set time interface, invalid day 32.
PASSED: Test 10, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 11 of 35: Test UEFI RT service set time interface, invalid hour 24.
PASSED: Test 11, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 12 of 35: Test UEFI RT service set time interface, invalid minute 60.
PASSED: Test 12, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 13 of 35: Test UEFI RT service set time interface, invalid second 60.
PASSED: Test 13, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 14 of 35: Test UEFI RT service set time interface, invalid nanosecond
1000000000.
PASSED: Test 14, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 15 of 35: Test UEFI RT service set time interface, invalid timezone -1441.
PASSED: Test 15, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 16 of 35: Test UEFI RT service set time interface, invalid timezone 1441.
PASSED: Test 16, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 17 of 35: Test UEFI RT service get wakeup time interface.
FAILED [HIGH] UEFIRuntimeTimeFieldBadYear: Test 17, Time returned an invalid
year 32424, should be between 1900 and 9999.

Test 18 of 35: Test UEFI RT service get wakeup time interface, NULL enabled
parameter.
PASSED: Test 18, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 19 of 35: Test UEFI RT service get wakeup time interface, NULL pending
parameter.
PASSED: Test 19, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 20 of 35: Test UEFI RT service get wakeup time interface, NULL time
parameter.
PASSED: Test 20, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 21 of 35: Test UEFI RT service get wakeup time interface, NULL enabled,
pending and time parameters.
PASSED: Test 21, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 22 of 35: Test UEFI RT service set wakeup time interface.
FAILED [HIGH] UEFIRuntimeSetWakeupTimeVerify: Test 22, Failed to verify wakeup
time after change.

Test 23 of 35: Test UEFI RT service set wakeup time interface, NULL time
parameter.
PASSED: Test 23, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.

Test 24 of 35: Test UEFI RT service set wakeup time interface, invalid year
1899.
PASSED: Test 24, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 24, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 25 of 35: Test UEFI RT service set wakeup time interface, invalid year
10000.
PASSED: Test 25, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 25, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 26 of 35: Test UEFI RT service set wakeup time interface, invalid month 0.
PASSED: Test 26, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 26, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 27 of 35: Test UEFI RT service set wakeup time interface, invalid month 13.
PASSED: Test 27, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 27, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 28 of 35: Test UEFI RT service set wakeup time interface, invalid day 0.
PASSED: Test 28, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 28, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 29 of 35: Test UEFI RT service set wakeup time interface, invalid day 32.
PASSED: Test 29, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 29, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 30 of 35: Test UEFI RT service set wakeup time interface, invalid hour 24.
PASSED: Test 30, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 30, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 31 of 35: Test UEFI RT service set wakeup time interface, invalid minute
60.
PASSED: Test 31, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 31, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 32 of 35: Test UEFI RT service set wakeup time interface, invalid second
60.
PASSED: Test 32, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 32, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 33 of 35: Test UEFI RT service set wakeup time interface, invalid
nanosecond 1000000000.
PASSED: Test 33, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 33, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 34 of 35: Test UEFI RT service set wakeup time interface, invalid timezone
-1441.
PASSED: Test 34, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 34, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 35 of 35: Test UEFI RT service set wakeup time interface, invalid timezone
1441.
PASSED: Test 35, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 35, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

================================================================================
33 passed, 14 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

csm: UEFI Compatibility Support Module test.
--------------------------------------------------------------------------------
Test 1 of 1: UEFI Compatibility Support Module test.
Checking for UEFI Compatibility Support Module (CSM)
No CSM: UEFI firmware seems to have no CSM support.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

maxreadreq: Test firmware has set PCI Express MaxReadReq to a higher value on
non-motherboard devices.
--------------------------------------------------------------------------------
Test 1 of 1: Test firmware settings MaxReadReq for PCI Express devices.
PASSED: Test 1, All devices have MaxReadReq set > 128.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

crs: Test PCI host bridge configuration using _CRS.
--------------------------------------------------------------------------------
Test 1 of 1: Test PCI host bridge configuration using _CRS.
PASSED: Test 1, The kernel has detected a BIOS newer than the end of 2007 (11/13
/2012) and has assumed that your BIOS can correctly specify the host bridge MMIO
aperture using _CRS. If this does not work correctly you can override this by
booting with "pci=nocrs".

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

aspm: PCIe ASPM test.
--------------------------------------------------------------------------------
Test 1 of 2: PCIe ASPM ACPI test.
PCIe ASPM is not controlled by Linux kernel.

ADVICE: BIOS reports that Linux kernel should not modify ASPM settings that BIOS
configured. It can be intentional because hardware vendors identified some
capability bugs between the motherboard and the add-on cards.


Test 2 of 2: PCIe ASPM registers test.
WARNING: Test 2, RP 00h:1Ch.01h L0s not enabled.
WARNING: Test 2, Device 02h:00h.00h L0s not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increases power consumption, and will impact the battery life of a
mobile system.

PASSED: Test 2, PCIe ASPM setting matched was matched.
WARNING: Test 2, RP 00h:1Ch.03h L0s not enabled.
WARNING: Test 2, Device 03h:00h.00h L0s not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increases power consumption, and will impact the battery life of a
mobile system.

PASSED: Test 2, PCIe ASPM setting matched was matched.

================================================================================
2 passed, 0 failed, 4 warnings, 0 aborted, 0 skipped, 0 info only.
================================================================================

dmicheck: DMI/SMBIOS table tests.
--------------------------------------------------------------------------------
Test 1 of 3: Find and test SMBIOS Table Entry Points.
This test tries to find and sanity check the SMBIOS data structures.
PASSED: Test 1, Found SMBIOS Table Entry Point at 0xda131298
SMBIOS Entry Point Structure:
  Anchor String          : _SM_
  Checksum               : 0xf0
  Entry Point Length     : 0x1f
  Major Version          : 0x02
  Minor Version          : 0x07
  Maximum Struct Size    : 0x8a
  Entry Point Revision   : 0x00
  Formatted Area         : 0x00 0x00 0x00 0x00 0x00
  Intermediate Anchor    : _DMI_
  Intermediate Checksum  : 0x6e
  Structure Table Length : 0x05e6
  Structure Table Address: 0xda10d018
  # of SMBIOS Structures : 0x0016
  SBMIOS BCD Revision    : 27

PASSED: Test 1, SMBIOS Table Entry Point Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Point Length is valid.
PASSED: Test 1, SMBIOS Table Entry Intermediate Anchor String _DMI_ is valid.
PASSED: Test 1, SMBIOS Table Entry Point Intermediate Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Structure Table Address and Length looks
valid.

Test 2 of 3: Test DMI/SMBIOS tables for errors.
PASSED: Test 2, Entry @ 0xda10d018 'BIOS Information (Type 0)'
PASSED: Test 2, Entry @ 0xda10d05f 'System Information (Type 1)'
FAILED [MEDIUM] DMIAssetTag: Test 2, String index 0x05 in table entry 'Base
Board Information (Type 2)' @ 0xda10d0ca, field 'Asset Tag', offset 0x08 has a
default value 'ATN12345678901234567' and probably has not been updated by the
BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless. Note that the kernel uses this field so it probably should be corrected
to ensure the kernel is using sane values.


ADVICE: It may be worth checking against section 7.3 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMISerialNumber: Test 2, String index 0x05 in table entry 'Chassis
Information (Type 3)' @ 0xda10d140, field 'SKU Number', offset 0x15 has a
default value 'To be filled by O.E.M.' and probably has not been updated by the
BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.4 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0xda10d1b5 'On Board Devices (Type 10)'
PASSED: Test 2, Entry @ 0xda10d1d1 'OEM Strings (Type 11)'
PASSED: Test 2, Entry @ 0xda10d222 'System Configuration Options (Type 12)'
PASSED: Test 2, Entry @ 0xda10d2a2 'System Boot Information (Type 32)'
PASSED: Test 2, Entry @ 0xda10d2b8 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0xda10d2dc 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0xda10d300 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0xda10d324 'Physical Memory Array (Type 16)'
FAILED [LOW] DMIAssetTag: Test 2, String index 0x04 in table entry 'Processor
Information (Type 4)' @ 0xda10d33d, field 'Asset Tag', offset 0x21 has a default
value 'Fill By OEM' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Processor
Information (Type 4)' @ 0xda10d33d, field 'Part Number', offset 0x22 has a
default value 'Fill By OEM' and probably has not been updated by the BIOS
vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.5 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0xda10d3c7, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0xda10d435 'Memory Device Mapped Address (Type 20)'
FAILED [LOW] DMISerialNumber: Test 2, String index 0x03 in table entry 'Memory
Device (Type 17)' @ 0xda10d45a, field 'Manufacturer', offset 0x17 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x04 in table entry 'Memory
Device (Type 17)' @ 0xda10d45a, field 'Serial Number', offset 0x18 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0xda10d45a, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x06 in table entry 'Memory
Device (Type 17)' @ 0xda10d45a, field 'Part Number', offset 0x1a has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMISerialNumber: Test 2, String index 0x03 in table entry 'Memory
Device (Type 17)' @ 0xda10d4b6, field 'Manufacturer', offset 0x17 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x04 in table entry 'Memory
Device (Type 17)' @ 0xda10d4b6, field 'Serial Number', offset 0x18 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0xda10d4b6, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x06 in table entry 'Memory
Device (Type 17)' @ 0xda10d4b6, field 'Part Number', offset 0x1a has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMISerialNumber: Test 2, String index 0x03 in table entry 'Memory
Device (Type 17)' @ 0xda10d512, field 'Manufacturer', offset 0x17 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x04 in table entry 'Memory
Device (Type 17)' @ 0xda10d512, field 'Serial Number', offset 0x18 has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0xda10d512, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMISerialNumber: Test 2, String index 0x06 in table entry 'Memory
Device (Type 17)' @ 0xda10d512, field 'Part Number', offset 0x1a has a default
value '[Empty]' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0xda10d56e 'Memory Array Mapped Address (Type 19)'
PASSED: Test 2, Entry @ 0xda10d58f 'Unknown (Type 131)'
PASSED: Test 2, Entry @ 0xda10d5d1 'BIOS Language Information (Type 13)'
PASSED: Test 2, Entry @ 0xda10d5f8 'End of Table (Type 127)'

Test 3 of 3: Test DMI/SMBIOS3 tables for errors.
SKIPPED: Test 3, Cannot find SMBIOS30 table entry, skip the test.

================================================================================
21 passed, 17 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

microcode: Test if system is using latest microcode.
--------------------------------------------------------------------------------
Test 1 of 1: Test for most recent microcode being loaded.
This test verifies if the firmware has put a recent revision of the microcode
into the processor at boot time. Recent microcode is important to have all the
required features and errata updates for the processor.
The kernel did not report that CPU 0 has had a microcode update. The current
firmware is revision 0x15 and probably has not been updated.
The kernel did not report that CPU 1 has had a microcode update. The current
firmware is revision 0x15 and probably has not been updated.
The kernel did not report that CPU 2 has had a microcode update. The current
firmware is revision 0x15 and probably has not been updated.
The kernel did not report that CPU 3 has had a microcode update. The current
firmware is revision 0x15 and probably has not been updated.
SKIPPED: Test 1, Could not determine from kernel log if latest microcode has
been loaded.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

msr: MSR register tests.
--------------------------------------------------------------------------------
Test 1 of 5: Test CPU generic MSRs.
PASSED: Test 1, MSR 0x00000001 P5_MC_TYPE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000006 MONITOR_FILTER_SIZE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000017 PLATFORM_ID is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000002a EBL_CR_POWERON is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000001b APIC_BASE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000003a FEATURE_CONTROL is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000008b BIOS_SIGN_ID is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000000fe MTRRCAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000174 SYSENTER_CS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000175 SYSENTER_ESP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000176 SYSENTER_EIP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000179 MCG_CAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000017a MCG_STATUS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000019a CLOCK_MODULATION is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000019b THERM_INTERRUPT is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001a0 MISC_ENABLE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001b2 PACKAGE_THERM_INTERRUPT is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000200 MTRR_PHYSBASE0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000201 MTRR_PHYSMASK0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000202 MTRR_PHYSBASE1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000203 MTRR_PHYSMASK1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000204 MTRR_PHYSBASE2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000205 MTRR_PHYSMASK2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000206 MTRR_PHYSBASE3 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000207 MTRR_PHYSMASK3 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000208 MTRR_PHYSBASE4 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000209 MTRR_PHYSMASK4 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020a MTRR_PHYSBASE5 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020b MTRR_PHYSMASK5 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020c MTRR_PHYSBASE6 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020d MTRR_PHYSMASK6 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020e MTRR_PHYSBASE7 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000020f MTRR_PHYSMASK7 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000210 MTRR_PHYSBASE8 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000211 MTRR_PHYSMASK8 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000212 MTRR_PHYSBASE9 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000213 MTRR_PHYSMASK9 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000250 MTRR_FIX64K_000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000258 MTRR_FIX16K_800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000259 MTRR_FIX16K_a00 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000268 MTRR_FIX4K_C000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000269 MTRR_FIX4K_C800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026a MTRR_FIX4K_D000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026b MTRR_FIX4K_D800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026c MTRR_FIX4K_E000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026d MTRR_FIX4K_E800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026e MTRR_FIX4K_F000 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000026f MTRR_FIX4K_F800 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000277 PAT is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000280 MC0_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000281 MC1_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000282 MC2_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000283 MC3_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000284 MC4_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000285 MC5_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000286 MC6_CTL2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000002ff MTRR_DEF_TYPE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x000003f1 PEBS_ENABLE is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000480 VMX_BASIC is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000481 VMX_PINPASED_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000482 VMX_PROCBASED_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000483 VMX_EXIT_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000484 VMX_ENTRY_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000485 VMX_MISC is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000486 VMX_CR0_FIXED0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000487 VMX_CR0_FIXED1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000488 VMX_CR4_FIXED0 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000489 VMX_CR4_FIXED1 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048a VMX_VMX_VMCS_ENUM is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048b VMX_PROCBASED_CTLS2 is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048c VMX_EPT_VPID_CAP is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x0000048d VMX_TRUE_PINBASED_CTLS is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x0000048e VMX_TRUE_PROCBASED_CTLS is consistent across 4
CPUs.
PASSED: Test 1, MSR 0x0000048f VMX_TRUE_EXIT_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0x00000490 VMX_TRUE_ENTRY_CTLS is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000080 EFER is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000081 STAR is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000082 LSTAR is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000084 FMASK is consistent across 4 CPUs.
PASSED: Test 1, MSR 0xc0000102 KERNEL_GS_BASE is consistent across 4 CPUs.

Test 2 of 5: Test CPU specific model MSRs.
CPU family: 0x6, model: 0x3a (Ivybridge)
PASSED: Test 2, MSR 0x000000ce MSR_PLATFORM_INFO is consistent across 4 CPUs.
PASSED: Test 2, MSR 0x000000e2 MSR_PKG_CST_CONFIG_CONTROL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000648 MSR_CONFIG_TDP_NOMINAL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x00000649 MSR_CONFIG_TDP_LEVEL1 is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064a MSR_CONFIG_TDP_LEVEL2 is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064b MSR_CONFIG_TDP_CONTROL is consistent across 4
CPUs.
PASSED: Test 2, MSR 0x0000064c MSR_TURBO_ACTIVATION_RATIO is consistent across 4
CPUs.

Test 3 of 5: Test all P State Ratios.
PASSED: Test 3, MSR 0x000000ce Minimum P-State is consistent across 4 CPUs.
PASSED: Test 3, MSR 0x000000ce Maximum P-State is consistent across 4 CPUs.

Test 4 of 5: Test C1 and C3 autodemotion.
PASSED: Test 4, MSR 0x000000e2 C1 and C3 Autodemotion is consistent across 4
CPUs.
C1 and C3 Autodemotion enabled.

Test 5 of 5: Test SMRR MSR registers.
PASSED: Test 5, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f2 SMRR_TYPE is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 4 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_VALID is consistent across 4 CPUs.

================================================================================
96 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

nx: Test if CPU NX is disabled by the BIOS.
--------------------------------------------------------------------------------
Test 1 of 3: Test CPU NX capability.
PASSED: Test 1, CPU has NX flags, BIOS is not disabling it.

Test 2 of 3: Test all CPUs have same BIOS set NX flag.
This test verifies that all CPUs have the same NX flag setting. Although rare,
BIOS may set the NX flag differently per CPU. 
PASSED: Test 2, All 4 CPUs have the same NX flag set.

Test 3 of 3: Test all CPUs have same msr setting in MSR 0x1a0.
This test verifies that all CPUs have the same NX flag setting by examining the
per CPU MSR register 0x1a0.
PASSED: Test 3, All 4 CPUs have the NX flag in MSR 0x1a0 set.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

cpufreq: CPU frequency scaling tests.
--------------------------------------------------------------------------------
WARNING: Test 1, Cannot set CPU 0 governor to userspace.
Failed to intialise cpufreq to set CPU speed
Test 1 of 7: CPU frequency table consistency
PASSED: Test 1, CPU frequency tables are consistent

Test 2 of 7: CPU frequency table duplicates
PASSED: Test 2, No duplicates in CPU frequency table

Test 3 of 7: CPU frequency firmware limits
PASSED: Test 3, No BIOS limits imposed

Test 4 of 7: CPU frequency claimed maximum
WARNING: Test 4, cpu 0 has claimed frequency of 1800000, higher than max freq of
0
WARNING: Test 4, cpu 1 has claimed frequency of 1800000, higher than max freq of
0
WARNING: Test 4, cpu 2 has claimed frequency of 1800000, higher than max freq of
0
WARNING: Test 4, cpu 3 has claimed frequency of 1800000, higher than max freq of
0
FAILED [MEDIUM] CPUFreqClaimedMax: Test 4, CPU max frequency is unreachable

Test 5 of 7: CPU frequency SW_ANY control
SKIPPED: Test 5, Can't set CPU frequencies

Test 6 of 7: CPU frequency SW_ALL control
SKIPPED: Test 6, Can't set CPU frequencies

Test 7 of 7: CPU frequency performance tests.
FAILED [MEDIUM] CPUFreqSetFailed: Test 7, Can't set CPU frequencies

================================================================================
3 passed, 2 failed, 4 warnings, 0 aborted, 2 skipped, 0 info only.
================================================================================

maxfreq: Test max CPU frequencies against max scaling frequency.
--------------------------------------------------------------------------------
Test 1 of 1: Maximum CPU frequency test.
This test checks the maximum CPU frequency as detected by the kernel for each
CPU against maxiumum frequency as specified by the BIOS frequency scaling
settings.
PASSED: Test 1, 4 CPUs passed the maximum frequency check.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

virt: CPU Virtualisation Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: CPU Virtualisation Configuration test.
Check VT/VMX Virtualization extensions are set up correctly.
PASSED: Test 1, Virtualization extensions supported and enabled by BIOS.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pnp: BIOS Support Installation structure test.
--------------------------------------------------------------------------------
Test 1 of 1: PnP BIOS Support Installation structure test.
This test tries to find and sanity check the Plug and Play BIOS Support
Installation Check structure. 

Could not find PnP BIOS Support Installation Check structure. This is not
necessarily a failure.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pciirq: PCI IRQ Routing Table test.
--------------------------------------------------------------------------------
Test 1 of 1: PCI IRQ Routing Table test.
This test tries to find and sanity check the PCI IRQ Routing Table, as defined
by http://www.microsoft.com/taiwan/whdc/archive/pciirq.mspx and described in
pages 233-238 of PCI System Architecture, Fourth Edition, Mindshare, Inc.
(1999). NOTE: The PCI IRQ Routing Table only really knows about ISA IRQs and is
generally not used with APIC. 

Could not find PCI IRQ Routing Table. Since this table is for legacy BIOS
systems which don't have ACPI support this is generally not a problem.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mpcheck: MultiProcessor Tables tests.
--------------------------------------------------------------------------------
The kernel is using the ACPI MADT for SMP configuration information, so the
Multiprocessor Tables are not used by the kernel. Any errors in the tables will
not affect the operation of Linux unless it is booted with ACPI disabled.

NOTE: Since ACPI is being used in preference to the Multiprocessor Tables, any
errors found in the mpcheck tests will be tagged as LOW errors.

Failed to find the Multiprocessor Table data, skipping mpcheck test.
NOTE: Since the ACPI MADT is being used instead for SMP configuration, this is
not a problem.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 9 skipped, 0 info only.
================================================================================

hda_audio: HDA Audio Pin Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: HDA Audio Pin Configuration test.
Checking 'hwC0D0':
Vendor Name    : Realtek
Vendor ID      : 0x10ec0270
Subsystem ID   : 0x10431587
Revision ID    : 0x100100
BIOS pin configurations:
  Pin  Setting
  0x0012 0x411111f0
  0x0014 0x90170110
  0x0017 0x411111f0
  0x0018 0x411111f0
  0x0019 0x90a70930
  0x001a 0x411111f0
  0x001b 0x411111f0
  0x001d 0x40089b2d
  0x001e 0x411111f0
  0x0021 0x04211020
PASSED: Test 1, Default BIOS pin configurations did not have software override.

Checking 'hwC0D3':
Vendor Name    : Intel
Vendor ID      : 0x80862806
Subsystem ID   : 0x80860101
Revision ID    : 0x100000
BIOS pin configurations:
  Pin  Setting
  0x0005 0x58560010
  0x0006 0x18560020
  0x0007 0x58560030
PASSED: Test 1, Default BIOS pin configurations did not have software override.


================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

ebda: Test EBDA region is mapped and reserved in memory map table.
--------------------------------------------------------------------------------
Machine is not using traditional BIOS firmware, skipping test.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bios32: BIOS32 Service Directory test.
--------------------------------------------------------------------------------
Machine is not using traditional BIOS firmware, skipping test.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

apicedge: APIC edge/level test.
--------------------------------------------------------------------------------
Test 1 of 1: Legacy and PCI Interrupt Edge/Level trigger tests.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 0 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 1 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 8 is
incorrectly level triggered.
FAILED [MEDIUM] NonLegacyIRQLevelTrig: Test 1, Non-Legacy interrupt 12 is
incorrectly level triggered.

================================================================================
0 passed, 4 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

xenv: XENV Xen Environment Table tests.
--------------------------------------------------------------------------------
ACPI XENV table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

xsdt: XSDT Extended System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: XSDT Extended System Description Table test.
PASSED: Test 1, No issues found in XSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wmi: Extract and analyse Windows Management Instrumentation (WMI).
--------------------------------------------------------------------------------
Test 1 of 1: Windows Management Instrumentation test.

\_SB_.ATKD._WDG (1 of 2)
  GUID: 97845ED0-4E6D-11DE-8A39-0800200C9A66
  WMI Method:
    Flags          : 0x02 (Method)
    Object ID      : NB
    Instance       : 0x01
    Driver         : asus-wmi (Asus)
PASSED: Test 1, 97845ED0-4E6D-11DE-8A39-0800200C9A66 has associated method
\_SB_.ATKD.WMNB

\_SB_.ATKD._WDG (2 of 2)
  GUID: 0B3CBB35-E3C2-45ED-91C2-4C5A6D195D1C
  WMI Event:
    Flags          : 0x08 (Event)
    Notification ID: 0xff
    Reserved       : 0x00
    Instance       : 0x01
    Driver         : asus-nb-wmi (Asus)
PASSED: Test 1, All events associated with \_SB_.ATKD._WDG are handled by a
kernel driver.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wdat: WDAT Microsoft Hardware Watchdog Action Table test.
--------------------------------------------------------------------------------
ACPI WDAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

wakealarm: ACPI Wakealarm tests.
--------------------------------------------------------------------------------
Test 1 of 4: Test existence of RTC with alarm interface.
PASSED: Test 1, RTC with a RTC alarm ioctl() interface found.

Test 2 of 4: Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 1 seconds in the future.
PASSED: Test 2, RTC wakealarm was triggered successfully.

Test 3 of 4: Test if wakealarm is fired.
PASSED: Test 3, RTC wakealarm triggered and fired successfully.

Test 4 of 4: Multiple wakealarm firing tests.
Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 2 seconds in the future.
Trigger wakealarm for 3 seconds in the future.
Trigger wakealarm for 4 seconds in the future.
PASSED: Test 4, RTC wakealarm triggered and fired successfully.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

waet: WAET Windows ACPI Emulated Devices Table test.
--------------------------------------------------------------------------------
ACPI WAET table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefi: UEFI Data Table test.
--------------------------------------------------------------------------------
ACPI UEFI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

tpm2: TPM2 Trusted Platform Module 2 test.
--------------------------------------------------------------------------------
ACPI TPM2 table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

tcpa: TCPA Trusted Computing Platform Alliance Capabilities Table test.
--------------------------------------------------------------------------------
ACPI TCPA table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

syntaxcheck: Re-assemble DSDT and SSDTs to find syntax errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble and reassemble DSDT and SSDTs.

Checking ACPI table DSDT (#0)

FAILED [MEDIUM] AMLAsmASL_MSG_TAG_LARGER: Test 1, Assembler warning in line 2441
Line | AML source
--------------------------------------------------------------------------------
02438|                 Add (Subtract (M1MX, M1MN), One, M1LN) /* \_SB_.PCI0._CRS.M1LN */
02439|                 If (LOr (LEqual (MM64, Zero), LLessEqual (OSYS, 0x07D3)))
02440|                 {
02441|                     CreateDWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
     |                                                              ^
     | Warning 3128: ResourceTag larger than Field    (Size mismatch, Tag: 64 bits, Field: 32 bits)
02442|                     Store (Zero, MSLN) /* \_SB_.PCI0._CRS.MSLN */
02443|                 }
02444|                 Else
================================================================================

ADVICE: (for Warning #3128, ASL_MSG_TAG_LARGER): The resource tag length is
larger than the field length.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 6021
Line | AML source
--------------------------------------------------------------------------------
06018|                 }
06019| 
06020|                 Name (CONT, Zero)
06021|                 Method (GDOA, 1, NotSerialized)
     |                           ^
     | Remark 2146: Method Argument is never used    (Arg0)
06022|                 {
06023|                     While (LLess (CONT, 0x08))
06024|                     {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
6199
Line | AML source
--------------------------------------------------------------------------------
06196|                     }
06197|                 }
06198| 
06199|                 Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
     |                           ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
06200|                 {
06201|                     Store (Zero, NDID) /* \NDID */
06202|                     If (LNotEqual (DIDL, Zero))
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
6383
Line | AML source
--------------------------------------------------------------------------------
06380|                         }
06381|                     }
06382| 
06383|                     Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
     |                               ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
06384|                     {
06385|                         If (LGreaterEqual (MSOS (), OSW8))
06386|                         {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7693
Line | AML source
--------------------------------------------------------------------------------
07690|                 Return (Zero)
07691|             }
07692| 
07693|             Method (POSC, 3, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
07694|             {
07695|                 CreateDWordField (Arg2, Zero, CDW1)
07696|                 CreateDWordField (Arg2, 0x08, CDW3)
================================================================================
Assembler remark in line 8185
Line | AML source
--------------------------------------------------------------------------------
08182| 
08183|     Method (UXDV, 1, Serialized)
08184|     {
08185|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                 ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
08186|         Store (0xFF, Local0)
08187|         While (One)
08188|         {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8229
Line | AML source
--------------------------------------------------------------------------------
08226|         Return (Local0)
08227|     }
08228| 
08229|     Method (RRIO, 4, Serialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg3)
08230|     {
08231|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
08232|         While (One)
================================================================================
Assembler remark in line 8231
Line | AML source
--------------------------------------------------------------------------------
08228| 
08229|     Method (RRIO, 4, Serialized)
08230|     {
08231|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                 ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
08232|         While (One)
08233|         {
08234|             Store (Add (Arg0, Zero), _T_0) /* \RRIO._T_0 */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8441
Line | AML source
--------------------------------------------------------------------------------
08438|         }
08439|     }
08440| 
08441|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg0)
08442|     {
08443|     }
08444| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8441
Line | AML source
--------------------------------------------------------------------------------
08438|         }
08439|     }
08440| 
08441|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg1)
08442|     {
08443|     }
08444| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8441
Line | AML source
--------------------------------------------------------------------------------
08438|         }
08439|     }
08440| 
08441|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg2)
08442|     {
08443|     }
08444| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8454
Line | AML source
--------------------------------------------------------------------------------
08451|         Name (PA4H, Zero)
08452|         Name (PA5H, Zero)
08453|         Name (PA6H, Zero)
08454|         Method (NPTS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
08455|         {
08456|             Store (PM0H, PA0H) /* \_SB_.PCI0.PA0H */
08457|             Store (PM1H, PA1H) /* \_SB_.PCI0.PA1H */
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 8465
Line | AML source
--------------------------------------------------------------------------------
08462|             Store (PM6H, PA6H) /* \_SB_.PCI0.PA6H */
08463|         }
08464| 
08465|         Method (NWAK, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
08466|         {
08467|             Store (PA0H, PM0H) /* \_SB_.PCI0.PM0H */
08468|             Store (PA1H, PM1H) /* \_SB_.PCI0.PM1H */
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 8683
Line | AML source
--------------------------------------------------------------------------------
08680|         Method (_INI, 0, NotSerialized)  // _INI: Initialize
08681|         {
08682|             Store (0x07D0, OSYS) /* \OSYS */
08683|             If (CondRefOf (\_OSI, Local0))
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local0)
08684|             {
08685|                 If (_OSI ("Windows 2001"))
08686|                 {
================================================================================
Assembler remark in line 8928
Line | AML source
--------------------------------------------------------------------------------
08925| 
08926|             Method (PECI, 7, Serialized)
08927|             {
08928|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
08929|                 While (LEqual (And (PBSY, 0x02), 0x02))
08930|                 {
08931|                     If (LGreater (Arg6, 0x1000))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
9626
Line | AML source
--------------------------------------------------------------------------------
09623|         Name (OSVT, 0x40)
09624|         Name (OSW7, 0x80)
09625|         Name (OSW8, 0x0100)
09626|         Method (MCTH, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
09627|         {
09628|             If (LLess (SizeOf (Arg0), SizeOf (Arg1)))
09629|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 9658
Line | AML source
--------------------------------------------------------------------------------
09655|                 Return (OSFG) /* \OSFG */
09656|             }
09657| 
09658|             If (CondRefOf (\_OSI, Local0))
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local0)
09659|             {
09660|                 If (_OSI ("Windows 2001"))
09661|                 {
================================================================================
FAILED [HIGH] AMLAsmASL_MSG_UPPER_CASE: Test 1, Assembler error in line 9770
Line | AML source
--------------------------------------------------------------------------------
09767|         Name (PWKY, Zero)
09768|         Device (ATKD)
09769|         {
09770|             Name (_HID, "pnp0c14")  // _HID: Hardware ID
     |                                ^
     | Error 6136: Non-hex letters must be upper case    (pnp0c14)
09771|             Name (_UID, "ATK")  // _UID: Unique ID
09772|             Name (ATKQ, Package (0x10)
09773|             {
================================================================================

ADVICE: (for Error #6136, ASL_MSG_UPPER_CASE): Characters in literal string that
are not hexadecimal letters must be upper case.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 9840
Line | AML source
--------------------------------------------------------------------------------
09837|                 /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
09838|                 /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
09839|             })
09840|             Method (WMNB, 3, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
09841|             {
09842|                 CreateDWordField (Arg2, Zero, IIA0)
09843|                 CreateDWordField (Arg2, 0x04, IIA1)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
9840
Line | AML source
--------------------------------------------------------------------------------
09837|                 /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
09838|                 /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
09839|             })
09840|             Method (WMNB, 3, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
09841|             {
09842|                 CreateDWordField (Arg2, Zero, IIA0)
09843|                 CreateDWordField (Arg2, 0x04, IIA1)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 10666
Line | AML source
--------------------------------------------------------------------------------
10663|                 Notify (ATKD, 0xFF) // Hardware-Specific
10664|             }
10665| 
10666|             Method (INIT, 1, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
10667|             {
10668|                 Store (One, ATKP) /* \_SB_.ATKP */
10669|                 Return (MNAM) /* \_SB_.MNAM */
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
11162
Line | AML source
--------------------------------------------------------------------------------
11159|         Device (ASHS)
11160|         {
11161|             Name (_HID, "ATK4001" /* Asus Radio Control Button */)  // _HID: Hardware ID
11162|             Method (HSWC, 1, Serialized)
     |                       ^
     | Warning 3115: Not all control paths return a value    (HSWC)
11163|             {
11164|                 If (LLess (Arg0, 0x02))
11165|                 {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 11357
Line | AML source
--------------------------------------------------------------------------------
11354|                 Divide (Local1, 0x64, Local3, Local6)
11355|                 Store (Local6, Index (PBIF, 0x06))
11356|                 Store (Local6, LOW2) /* \_SB_.PCI0.BAT0.LOW2 */
11357|                 Divide (Local1, 0x64, Local3, Local7)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local3)
11358|                 Store (Local7, Index (PBIF, 0x07))
11359|                 Store (Local7, Index (PBIF, 0x08))
11360|             }
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 11379
Line | AML source
--------------------------------------------------------------------------------
11376|                     Divide (DerefOf (Index (PBIF, 0x05)), 0x03E8, Local2, Index (PBIF, 0x05))
11377|                     Divide (DerefOf (Index (PBIF, 0x06)), 0x03E8, Local2, Index (PBIF, 0x06))
11378|                     Divide (DerefOf (Index (PBIF, 0x07)), 0x03E8, Local2, Index (PBIF, 0x07))
11379|                     Divide (DerefOf (Index (PBIF, 0x08)), 0x03E8, Local2, Index (PBIF, 0x08))
     |                                                                       ^
     | Warning 3144: Method Local is set but never used    (Local2)
11380|                 }
11381|             }
11382| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 11432
Line | AML source
--------------------------------------------------------------------------------
11429|                 Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
11430|             }
11431| 
11432|             Method (FBST, 4, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
11433|             {
11434|                 And (Arg1, 0xFFFF, Local1)
11435|                 Store (Zero, Local0)
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 11525
Line | AML source
--------------------------------------------------------------------------------
11522|                     Multiply (DerefOf (Index (PBST, One)), Local0, Index (PBST, One))
11523|                     Divide (DerefOf (Index (PBST, One)), 0x03E8, Local1, Index (PBST, One))
11524|                     Multiply (DerefOf (Index (PBST, 0x02)), Local0, Index (PBST, 0x02))
11525|                     Divide (DerefOf (Index (PBST, 0x02)), 0x03E8, Local1, Index (PBST, 0x02))
     |                                                                       ^
     | Warning 3144: Method Local is set but never used    (Local1)
11526|                 }
11527|             }
11528| 
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11835
Line | AML source
--------------------------------------------------------------------------------
11832|             Return (Local0)
11833|         }
11834| 
11835|         Method (BIF9, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11836|         {
11837|             Name (BSTR, Buffer (0x20) {})
11838|             Store (SMBR (RDBL, BADR, 0x21), Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_SOME_NO_RETVAL: Test 1, Assembler warning in line
11940
Line | AML source
--------------------------------------------------------------------------------
11937|     {
11938|         Method (CHGS, 1, Serialized)
11939|         {
11940|             Store (\_SB.PCI0.LPCB.EC0.BCHG (Arg0), Local0)
     |                                         ^
     | Warning 3122: Called method may not always return a value  
11941|             Return (Local0)
11942|         }
11943| 
================================================================================

ADVICE: (for Warning #3122, ASL_MSG_SOME_NO_RETVAL): Method sometimes return a
value, sometimes it does not. This is inconsistent behaviour and a bug in the
AML. This needs to be fixed to avoid incorrect behaviour at run time.

FAILED [MEDIUM] AMLAsmASL_MSG_SOME_NO_RETVAL: Test 1, Assembler warning in line
12002
Line | AML source
--------------------------------------------------------------------------------
11999|         {
12000|             If (BATP (Zero))
12001|             {
12002|                 Store (BCLE (Zero), Local0)
     |                          ^
     | Warning 3122: Called method may not always return a value  
12003|                 If (LEqual (Local0, Zero))
12004|                 {
12005|                     Notify (BAT0, 0x80) // Status Change
================================================================================

ADVICE: (for Warning #3122, ASL_MSG_SOME_NO_RETVAL): Method sometimes return a
value, sometimes it does not. This is inconsistent behaviour and a bug in the
AML. This needs to be fixed to avoid incorrect behaviour at run time.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12162
Line | AML source
--------------------------------------------------------------------------------
12159|                 0x80000000, 
12160|                 0x80000000
12161|             })
12162|             Method (TSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12163|             {
12164|                 Name (TMPC, Zero)
12165|                 Store (^^PCI0.LPCB.EC0.ECPU, TMPC) /* \_SB_.PTID.TSDD.TMPC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12177
Line | AML source
--------------------------------------------------------------------------------
12174|                 Return (Ones)
12175|             }
12176| 
12177|             Method (PSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12178|             {
12179|                 Name (PWRC, Zero)
12180|                 Store (PWRG (), PWRC) /* \_SB_.PTID.PSDD.PWRC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12192
Line | AML source
--------------------------------------------------------------------------------
12189|                 Return (Ones)
12190|             }
12191| 
12192|             Method (OSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12193|             {
12194|                 Name (OSDC, Zero)
12195|                 Store (OSDG (), OSDC) /* \_SB_.PTID.OSDD.OSDC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12260
Line | AML source
--------------------------------------------------------------------------------
12257|                 Return (MBOX) /* \_SB_.PTID.MBOX */
12258|             }
12259| 
12260|             Method (WPMD, 1, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12261|             {
12262|                 If (LNotEqual (SizeOf (Arg0), 0x1A))
12263|                 {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12330
Line | AML source
--------------------------------------------------------------------------------
12327|                 Store (Zero, CYCT) /* \_SB_.PTID.CYCT */
12328|             }
12329| 
12330|             Method (RPCS, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12331|             {
12332|                 Name (TPCS, Zero)
12333|                 If (LGreater (CYCT, Zero))
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12346
Line | AML source
--------------------------------------------------------------------------------
12343|                 Return (TPCS) /* \_SB_.PTID.RPCS.TPCS */
12344|             }
12345| 
12346|             Method (RPEC, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12347|             {
12348|                 Name (TPEC, Zero)
12349|                 Store (ERRN, TPEC) /* \_SB_.PTID.RPEC.TPEC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12419
Line | AML source
--------------------------------------------------------------------------------
12416|             Return (Zero)
12417|         }
12418| 
12419|         Method (GVER, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12420|         {
12421|             OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
12422|             Field (FGVR, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12432
Line | AML source
--------------------------------------------------------------------------------
12429|             Return (Zero)
12430|         }
12431| 
12432|         Method (MF30, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12433|         {
12434|             OperationRegion (FM30, SystemMemory, Arg0, 0x08)
12435|             Field (FM30, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12468
Line | AML source
--------------------------------------------------------------------------------
12465|             Return (Zero)
12466|         }
12467| 
12468|         Method (G30V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12469|         {
12470|             If (LLess (Arg1, 0x0C))
12471|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12488
Line | AML source
--------------------------------------------------------------------------------
12485|             Return (Zero)
12486|         }
12487| 
12488|         Method (EC01, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12489|         {
12490|             If (LLess (Arg1, 0x10))
12491|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12516
Line | AML source
--------------------------------------------------------------------------------
12513|             Return (DerefOf (Index (Local0, Zero)))
12514|         }
12515| 
12516|         Method (EC02, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12517|         {
12518|             If (LLess (Arg1, 0x30))
12519|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 12559
Line | AML source
--------------------------------------------------------------------------------
12556|             Return (Local2)
12557|         }
12558| 
12559|         Method (GENW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
12560|         {
12561|             Store (Zero, RTCW) /* \_SB_.RTCW */
12562|         }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12573
Line | AML source
--------------------------------------------------------------------------------
12570| 
12571|     Scope (_SB.ATKD)
12572|     {
12573|         Method (MF1X, 4, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12574|         {
12575|             OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
12576|             Field (FM1X, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12665
Line | AML source
--------------------------------------------------------------------------------
12662|             Return (Local0)
12663|         }
12664| 
12665|         Method (G10V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12666|         {
12667|             If (LLess (Arg1, 0x0C))
12668|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12685
Line | AML source
--------------------------------------------------------------------------------
12682|             Return (Zero)
12683|         }
12684| 
12685|         Method (SRTC, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12686|         {
12687|             If (LLess (Arg1, 0x0C))
12688|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12734
Line | AML source
--------------------------------------------------------------------------------
12731|             Return (Local0)
12732|         }
12733| 
12734|         Method (G11V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12735|         {
12736|             If (LLess (Arg1, 0x0C))
12737|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12754
Line | AML source
--------------------------------------------------------------------------------
12751|             Return (Zero)
12752|         }
12753| 
12754|         Method (GBAT, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12755|         {
12756|             If (LLess (Arg1, 0x0A))
12757|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12774
Line | AML source
--------------------------------------------------------------------------------
12771|             Return (Zero)
12772|         }
12773| 
12774|         Method (ASBR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12775|         {
12776|             If (LLess (Arg1, 0x30))
12777|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12920
Line | AML source
--------------------------------------------------------------------------------
12917|             Return (0x10)
12918|         }
12919| 
12920|         Method (BTCR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12921|         {
12922|             If (LLess (Arg1, 0x09))
12923|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12959
Line | AML source
--------------------------------------------------------------------------------
12956|             Return (Local0)
12957|         }
12958| 
12959|         Method (G12V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12960|         {
12961|             If (LLess (Arg1, 0x0C))
12962|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12979
Line | AML source
--------------------------------------------------------------------------------
12976|             Return (Zero)
12977|         }
12978| 
12979|         Method (GLDI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12980|         {
12981|             If (LLess (Arg1, 0x10))
12982|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13001
Line | AML source
--------------------------------------------------------------------------------
12998|             Return (Zero)
12999|         }
13000| 
13001|         Method (LDCR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13002|         {
13003|             If (LLess (Arg1, 0x0A))
13004|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13071
Line | AML source
--------------------------------------------------------------------------------
13068|             Return (Local0)
13069|         }
13070| 
13071|         Method (G13V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13072|         {
13073|             If (LLess (Arg1, 0x0C))
13074|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13091
Line | AML source
--------------------------------------------------------------------------------
13088|             Return (Zero)
13089|         }
13090| 
13091|         Method (GTSI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13092|         {
13093|             If (LLess (Arg1, 0x0C))
13094|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13131
Line | AML source
--------------------------------------------------------------------------------
13128|             Return (Zero)
13129|         }
13130| 
13131|         Method (GTSV, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13132|         {
13133|             If (LLess (Arg1, 0x0A))
13134|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13181
Line | AML source
--------------------------------------------------------------------------------
13178|             Return (0x10)
13179|         }
13180| 
13181|         Method (GVSN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13182|         {
13183|             If (LLess (Arg1, 0x09))
13184|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13199
Line | AML source
--------------------------------------------------------------------------------
13196|             Return (Zero)
13197|         }
13198| 
13199|         Method (GVSV, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13200|         {
13201|             If (LLess (Arg1, 0x0B))
13202|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13222
Line | AML source
--------------------------------------------------------------------------------
13219|             Return (Zero)
13220|         }
13221| 
13222|         Method (GFNN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13223|         {
13224|             If (LLess (Arg1, 0x09))
13225|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13240
Line | AML source
--------------------------------------------------------------------------------
13237|             Return (Zero)
13238|         }
13239| 
13240|         Method (GFNS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13241|         {
13242|             If (LLess (Arg1, 0x0D))
13243|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13265
Line | AML source
--------------------------------------------------------------------------------
13262|             Return (Zero)
13263|         }
13264| 
13265|         Method (SFNS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13266|         {
13267|             If (LLess (Arg1, 0x0A))
13268|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13310
Line | AML source
--------------------------------------------------------------------------------
13307|             Return (Local0)
13308|         }
13309| 
13310|         Method (G14V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13311|         {
13312|             If (LLess (Arg1, 0x0C))
13313|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13330
Line | AML source
--------------------------------------------------------------------------------
13327|             Return (Zero)
13328|         }
13329| 
13330|         Method (GNBT, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13331|         {
13332|             If (LLess (Arg1, 0x09))
13333|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13348
Line | AML source
--------------------------------------------------------------------------------
13345|             Return (Zero)
13346|         }
13347| 
13348|         Method (GBTS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13349|         {
13350|             If (LLess (Arg1, 0x0A))
13351|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13462
Line | AML source
--------------------------------------------------------------------------------
13459|             Return (Local0)
13460|         }
13461| 
13462|         Method (G15V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13463|         {
13464|             If (LLess (Arg1, 0x0C))
13465|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13482
Line | AML source
--------------------------------------------------------------------------------
13479|             Return (Zero)
13480|         }
13481| 
13482|         Method (GLDB, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13483|         {
13484|             If (LLess (Arg1, 0x0A))
13485|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13502
Line | AML source
--------------------------------------------------------------------------------
13499|             Return (Zero)
13500|         }
13501| 
13502|         Method (SLDB, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13503|         {
13504|             If (LLess (Arg1, 0x0A))
13505|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13537
Line | AML source
--------------------------------------------------------------------------------
13534|             Return (0x11)
13535|         }
13536| 
13537|         Method (GDPI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13538|         {
13539|             If (LLess (Arg1, 0x10))
13540|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13560
Line | AML source
--------------------------------------------------------------------------------
13557|             Return (Zero)
13558|         }
13559| 
13560|         Method (SODP, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13561|         {
13562|             If (LLess (Arg1, 0x0C))
13563|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13608
Line | AML source
--------------------------------------------------------------------------------
13605|             Return (Local0)
13606|         }
13607| 
13608|         Method (G16V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13609|         {
13610|             If (LLess (Arg1, 0x0C))
13611|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13628
Line | AML source
--------------------------------------------------------------------------------
13625|             Return (Zero)
13626|         }
13627| 
13628|         Method (SFBD, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13629|         {
13630|             If (LLess (Arg1, 0x0A))
13631|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13695
Line | AML source
--------------------------------------------------------------------------------
13692|             Return (Local0)
13693|         }
13694| 
13695|         Method (G17V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13696|         {
13697|             If (LLess (Arg1, 0x0C))
13698|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13715
Line | AML source
--------------------------------------------------------------------------------
13712|             Return (Zero)
13713|         }
13714| 
13715|         Method (GMDL, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13716|         {
13717|             If (LLess (Arg1, 0x19))
13718|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13752
Line | AML source
--------------------------------------------------------------------------------
13749|             Return (Zero)
13750|         }
13751| 
13752|         Method (GBSI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13753|         {
13754|             If (LLess (Arg1, 0x19))
13755|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13789
Line | AML source
--------------------------------------------------------------------------------
13786|             Return (Zero)
13787|         }
13788| 
13789|         Method (GECI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13790|         {
13791|             If (LLess (Arg1, 0x19))
13792|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13815
Line | AML source
--------------------------------------------------------------------------------
13812|             Return (Zero)
13813|         }
13814| 
13815|         Method (GFII, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13816|         {
13817|             If (LLess (Arg1, 0x10))
13818|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13859
Line | AML source
--------------------------------------------------------------------------------
13856|             Return (Local0)
13857|         }
13858| 
13859|         Method (G18V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13860|         {
13861|             If (LLess (Arg1, 0x0C))
13862|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13879
Line | AML source
--------------------------------------------------------------------------------
13876|             Return (Zero)
13877|         }
13878| 
13879|         Method (GDVI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13880|         {
13881|             If (LLess (Arg1, 0x18))
13882|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13898
Line | AML source
--------------------------------------------------------------------------------
13895|             Return (Zero)
13896|         }
13897| 
13898|         Method (GDVS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13899|         {
13900|             If (LLess (Arg1, 0x0A))
13901|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13922
Line | AML source
--------------------------------------------------------------------------------
13919|             Return (Zero)
13920|         }
13921| 
13922|         Method (SDPW, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13923|         {
13924|             If (LLess (Arg1, 0x0A))
13925|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13972
Line | AML source
--------------------------------------------------------------------------------
13969|             Return (Local0)
13970|         }
13971| 
13972|         Method (G19V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13973|         {
13974|             If (LLess (Arg1, 0x0C))
13975|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13992
Line | AML source
--------------------------------------------------------------------------------
13989|             Return (Zero)
13990|         }
13991| 
13992|         Method (ACMS, 2, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
13993|         {
13994|             BSMI (Arg0)
13995|             Return (Zero)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13998
Line | AML source
--------------------------------------------------------------------------------
13995|             Return (Zero)
13996|         }
13997| 
13998|         Method (CSIN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13999|         {
14000|             If (LLess (Arg1, 0x0A))
14001|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14016
Line | AML source
--------------------------------------------------------------------------------
14013|             Return (Zero)
14014|         }
14015| 
14016|         Method (NVIN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14017|         {
14018|             OperationRegion (FM1F, SystemMemory, Arg0, Arg1)
14019|             Field (FM1F, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 14042
Line | AML source
--------------------------------------------------------------------------------
14039| 
14040|     Scope (_SB.ATKD)
14041|     {
14042|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
14043|         {
14044|         }
14045|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 14042
Line | AML source
--------------------------------------------------------------------------------
14039| 
14040|     Scope (_SB.ATKD)
14041|     {
14042|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
14043|         {
14044|         }
14045|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 14042
Line | AML source
--------------------------------------------------------------------------------
14039| 
14040|     Scope (_SB.ATKD)
14041|     {
14042|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
14043|         {
14044|         }
14045|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 14042
Line | AML source
--------------------------------------------------------------------------------
14039| 
14040|     Scope (_SB.ATKD)
14041|     {
14042|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg3)
14043|         {
14044|         }
14045|     }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14049
Line | AML source
--------------------------------------------------------------------------------
14046| 
14047|     Scope (_SB.ATKD)
14048|     {
14049|         Method (OFBD, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14050|         {
14051|             Name (FBDT, Package (0x52)
14052|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 14155
Line | AML source
--------------------------------------------------------------------------------
14152| 
14153|         Method (OGDP, 1, NotSerialized)
14154|         {
14155|             Store (Arg0, Local0)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local0)
14156|             Store (0x02, Local1)
14157|             Return (Local1)
14158|         }
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 14167
Line | AML source
--------------------------------------------------------------------------------
14164| 
14165|         Method (OSDP, 2, NotSerialized)
14166|         {
14167|             Store (Arg0, Local0)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local0)
14168|             Store (Arg1, Local1)
14169|         }
14170| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 14168
Line | AML source
--------------------------------------------------------------------------------
14165|         Method (OSDP, 2, NotSerialized)
14166|         {
14167|             Store (Arg0, Local0)
14168|             Store (Arg1, Local1)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local1)
14169|         }
14170| 
14171|         Method (MF42, 3, NotSerialized)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14171
Line | AML source
--------------------------------------------------------------------------------
14168|             Store (Arg1, Local1)
14169|         }
14170| 
14171|         Method (MF42, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14172|         {
14173|             OperationRegion (FM42, SystemMemory, Arg0, 0x08)
14174|             Field (FM42, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14207
Line | AML source
--------------------------------------------------------------------------------
14204|             Return (Zero)
14205|         }
14206| 
14207|         Method (SFBO, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14208|         {
14209|             OperationRegion (\F421, SystemMemory, Arg0, Arg1)
14210|             Field (F421, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14219
Line | AML source
--------------------------------------------------------------------------------
14216|             Return (Zero)
14217|         }
14218| 
14219|         Method (SAOC, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14220|         {
14221|             OperationRegion (\F422, SystemMemory, Arg0, Arg1)
14222|             Field (F422, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
14231
Line | AML source
--------------------------------------------------------------------------------
14228|             Return (Zero)
14229|         }
14230| 
14231|         Method (GBST, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
14232|         {
14233|             OperationRegion (\F423, SystemMemory, Arg0, Arg1)
14234|             Field (F423, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 14312
Line | AML source
--------------------------------------------------------------------------------
14309| 
14310|                 Decrement (Local0)
14311|                 Sleep (0x05)
14312|                 Store (EC4D, Local1)
     |                                  ^
     | Warning 3144: Method Local is set but never used    (Local1)
14313|             }
14314| 
14315|             Return (Zero)
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_UNREACHABLE_CODE: Test 1, Assembler warning in
line 15510
Line | AML source
--------------------------------------------------------------------------------
15507| 
15508|             Release (MUEC)
15509|             Return (Local1)
15510|             Return (Ones)
     |                       ^
     | Warning 3134: Statement is unreachable  
15511|         }
15512| 
15513|         Method (WBAT, 3, Serialized)
================================================================================

ADVICE: (for Warning #3134, ASL_MSG_UNREACHABLE_CODE): This occurs when there is
some code following a Return() - this code is unreachable code, it cannot be
executed, so it is most probably a bug.

FAILED [MEDIUM] AMLAsmASL_MSG_UNREACHABLE_CODE: Test 1, Assembler warning in
line 15541
Line | AML source
--------------------------------------------------------------------------------
15538| 
15539|             Release (MUEC)
15540|             Return (Local1)
15541|             Return (Ones)
     |                       ^
     | Warning 3134: Statement is unreachable  
15542|         }
15543| 
15544|         Method (FNCT, 2, Serialized)
================================================================================

ADVICE: (for Warning #3134, ASL_MSG_UNREACHABLE_CODE): This occurs when there is
some code following a Return() - this code is unreachable code, it cannot be
executed, so it is most probably a bug.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 16115
Line | AML source
--------------------------------------------------------------------------------
16112|         Method (CELC, 1, NotSerialized)
16113|         {
16114|             Subtract (Arg0, 0x0AAC, Local0)
16115|             Divide (Local0, 0x0A, Local1, Local0)
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local1)
16116|             Return (Local0)
16117|         }
16118| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 16245
Line | AML source
--------------------------------------------------------------------------------
16242|                 }
16243| 
16244|                 Store (\_SB.PCI0.LPCB.EC0.TACH (Arg0), Local0)
16245|                 Divide (Local0, 0x64, Local1, Local0)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local1)
16246|                 Add (Local0, One, Local0)
16247|                 If (LLessEqual (Local0, 0x3C))
16248|                 {
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 16305
Line | AML source
--------------------------------------------------------------------------------
16302|         {
16303|         }
16304| 
16305|         Method (TMSS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
16306|         {
16307|         }
16308| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 16309
Line | AML source
--------------------------------------------------------------------------------
16306|         {
16307|         }
16308| 
16309|         Method (TMSW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
16310|         {
16311|         }
16312|     }
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16364
Line | AML source
--------------------------------------------------------------------------------
16361|             Return (Local0)
16362|         }
16363| 
16364|         Method (BCHG, 1, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (BCHG)
16365|         {
16366|             If (Arg0)
16367|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16407
Line | AML source
--------------------------------------------------------------------------------
16404|             }
16405|         }
16406| 
16407|         Method (BCLE, 1, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (BCLE)
16408|         {
16409|             If (Arg0)
16410|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

Assembler remark in line 16496
Line | AML source
--------------------------------------------------------------------------------
16493| 
16494|         Method (TACH, 1, Serialized)
16495|         {
16496|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
16497|             If (ECAV ())
16498|             {
16499|                 While (One)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 16523
Line | AML source
--------------------------------------------------------------------------------
16520|                 Multiply (Local0, 0x02, Local0)
16521|                 If (LNotEqual (Local0, Zero))
16522|                 {
16523|                     Divide (0x0041CDB4, Local0, Local1, Local0)
     |                                                     ^
     | Warning 3144: Method Local is set but never used    (Local1)
16524|                     Return (Local0)
16525|                 }
16526|                 Else
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16876
Line | AML source
--------------------------------------------------------------------------------
16873|                 {
16874|                     If (LNotEqual (^^^GFX0.LCDD._DCS (), 0x1F))
16875|                     {
16876|                         Return (One)
     |                                  ^
     | Warning 3104: Reserved method should not return a value    (_Q0E)
16877|                     }
16878| 
16879|                     ^^^GFX0.DWBL ()
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16898
Line | AML source
--------------------------------------------------------------------------------
16895|                 Decrement (LBTN)
16896|             }
16897| 
16898|             Return (One)
     |                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0E)
16899|         }
16900| 
16901|         Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16915
Line | AML source
--------------------------------------------------------------------------------
16912|                 {
16913|                     If (LNotEqual (^^^GFX0.LCDD._DCS (), 0x1F))
16914|                     {
16915|                         Return (One)
     |                                  ^
     | Warning 3104: Reserved method should not return a value    (_Q0F)
16916|                     }
16917| 
16918|                     ^^^GFX0.UPBL ()
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16945
Line | AML source
--------------------------------------------------------------------------------
16942|                 Store (0x0A, LBTN) /* \_SB_.LBTN */
16943|             }
16944| 
16945|             Return (One)
     |                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0F)
16946|         }
16947| 
16948|         Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16971
Line | AML source
--------------------------------------------------------------------------------
16968|             }
16969|         }
16970| 
16971|         Method (_Q11, 0, Serialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q11)
16972|         {
16973|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
16974|             If (LGreaterEqual (MSOS (), OSW8))
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

Assembler remark in line 16973
Line | AML source
--------------------------------------------------------------------------------
16970| 
16971|         Method (_Q11, 0, Serialized)  // _Qxx: EC Query
16972|         {
16973|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
16974|             If (LGreaterEqual (MSOS (), OSW8))
16975|             {
16976|                 If (LEqual (F8FG, Zero))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16985
Line | AML source
--------------------------------------------------------------------------------
16982| 
16983|                 STB2 (0x19)
16984|                 STB2 (0x99)
16985|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q11)
16986|             }
16987| 
16988|             FHKW ()
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
17075
Line | AML source
--------------------------------------------------------------------------------
17072|             }
17073|         }
17074| 
17075|         Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q13)
17076|         {
17077|             If (LGreaterEqual (MSOS (), OSW8))
17078|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 17083
Line | AML source
--------------------------------------------------------------------------------
17080|                 STB2 (0x20)
17081|                 STB2 (0xE0)
17082|                 STB2 (0xA0)
17083|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q13)
17084|             }
17085| 
17086|             If (ATKP)
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
17092
Line | AML source
--------------------------------------------------------------------------------
17089|             }
17090|         }
17091| 
17092|         Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q14)
17093|         {
17094|             If (LGreaterEqual (MSOS (), OSW8))
17095|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 17100
Line | AML source
--------------------------------------------------------------------------------
17097|                 STB2 (0x2E)
17098|                 STB2 (0xE0)
17099|                 STB2 (0xAE)
17100|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q14)
17101|             }
17102| 
17103|             If (LLess (AVOL, 0x0F))
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
17114
Line | AML source
--------------------------------------------------------------------------------
17111|             }
17112|         }
17113| 
17114|         Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q15)
17115|         {
17116|             If (LGreaterEqual (MSOS (), OSW8))
17117|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 17122
Line | AML source
--------------------------------------------------------------------------------
17119|                 STB2 (0x30)
17120|                 STB2 (0xE0)
17121|                 STB2 (0xB0)
17122|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q15)
17123|             }
17124| 
17125|             If (LGreater (AVOL, Zero))
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 17525
Line | AML source
--------------------------------------------------------------------------------
17522|         Method (FSMI, 1, NotSerialized)
17523|         {
17524|             Store (Arg0, FSFN) /* \_SB_.FSFN */
17525|             Or (Arg0, 0xA0, Local0)
     |                                 ^
     | Warning 3144: Method Local is set but never used    (Local0)
17526|             ISMI (0x90)
17527|             Return (FSTA) /* \_SB_.FSTA */
17528|         }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17673
Line | AML source
--------------------------------------------------------------------------------
17670|             Return (Local0)
17671|         }
17672| 
17673|         Method (RBPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17674|         {
17675|             Acquire (MUTE, 0xFFFF)
17676|             Add (Arg0, PEBS, Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17687
Line | AML source
--------------------------------------------------------------------------------
17684|             Return (XCFG) /* \_SB_.RBPE.XCFG */
17685|         }
17686| 
17687|         Method (RWPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17688|         {
17689|             Acquire (MUTE, 0xFFFF)
17690|             And (Arg0, 0xFFFFFFFE, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17702
Line | AML source
--------------------------------------------------------------------------------
17699|             Return (XCFG) /* \_SB_.RWPE.XCFG */
17700|         }
17701| 
17702|         Method (RDPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17703|         {
17704|             Acquire (MUTE, 0xFFFF)
17705|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17717
Line | AML source
--------------------------------------------------------------------------------
17714|             Return (XCFG) /* \_SB_.RDPE.XCFG */
17715|         }
17716| 
17717|         Method (WBPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17718|         {
17719|             Acquire (MUTE, 0xFFFF)
17720|             Add (Arg0, PEBS, Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17731
Line | AML source
--------------------------------------------------------------------------------
17728|             Release (MUTE)
17729|         }
17730| 
17731|         Method (WWPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17732|         {
17733|             Acquire (MUTE, 0xFFFF)
17734|             And (Arg0, 0xFFFFFFFE, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17746
Line | AML source
--------------------------------------------------------------------------------
17743|             Release (MUTE)
17744|         }
17745| 
17746|         Method (WDPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17747|         {
17748|             Acquire (MUTE, 0xFFFF)
17749|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17761
Line | AML source
--------------------------------------------------------------------------------
17758|             Release (MUTE)
17759|         }
17760| 
17761|         Method (RWDP, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17762|         {
17763|             Acquire (MUTE, 0xFFFF)
17764|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
17777
Line | AML source
--------------------------------------------------------------------------------
17774|             Release (MUTE)
17775|         }
17776| 
17777|         Method (RPME, 1, NotSerialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (RPME)
17778|         {
17779|             Add (Arg0, 0x84, Local0)
17780|             Store (RDPE (Local0), Local1)
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 18053
Line | AML source
--------------------------------------------------------------------------------
18050|             Else
18051|             {
18052|                 Store (GL40, Local0)
18053|                 Subtract (Arg0, 0x40, Local2)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local2)
18054|             }
18055| 
18056|             Return (Local0)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18156
Line | AML source
--------------------------------------------------------------------------------
18153|         }
18154| 
18155|         Name (PMEW, Zero)
18156|         Method (SBRS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18157|         {
18158|             CPXS ()
18159|         }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18161
Line | AML source
--------------------------------------------------------------------------------
18158|             CPXS ()
18159|         }
18160| 
18161|         Method (SBRW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18162|         {
18163|             Store (SBPS, PMEW) /* \PMEW */
18164|         }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
18278
Line | AML source
--------------------------------------------------------------------------------
18275|             }
18276|         }
18277| 
18278|         Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
18279|         {
18280|             OperationRegion (PCHT, SystemMemory, \_SB.PTAB, 0x1000)
18281|             Field (PCHT, ByteAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18733
Line | AML source
--------------------------------------------------------------------------------
18730|             Return (Ones)
18731|         }
18732| 
18733|         Method (RBLK, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
18734|         {
18735|             Acquire (P4SM, 0xFFFF)
18736|             Store (0x05, Local0)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19202
Line | AML source
--------------------------------------------------------------------------------
19199|         }
19200| 
19201|         Name (LCDB, Zero)
19202|         Method (PPRJ, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19203|         {
19204|         }
19205| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19206
Line | AML source
--------------------------------------------------------------------------------
19203|         {
19204|         }
19205| 
19206|         Method (PRJS, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19207|         {
19208|             SGPL (0x0F, One, Zero)
19209|             \_SB.PCI0.LPCB.EC0.SPIN (0x95, Zero)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19239
Line | AML source
--------------------------------------------------------------------------------
19236|         {
19237|         }
19238| 
19239|         Method (TGDC, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19240|         {
19241|         }
19242| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19243
Line | AML source
--------------------------------------------------------------------------------
19240|         {
19241|         }
19242| 
19243|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19244|         {
19245|         }
19246| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19243
Line | AML source
--------------------------------------------------------------------------------
19240|         {
19241|         }
19242| 
19243|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
19244|         {
19245|         }
19246| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19243
Line | AML source
--------------------------------------------------------------------------------
19240|         {
19241|         }
19242| 
19243|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
19244|         {
19245|         }
19246| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 19307
Line | AML source
--------------------------------------------------------------------------------
19304|             }
19305|             Else
19306|             {
19307|                 Store (\_SB.PCI0.LPCB.EC0.ST87 (0x20, 0xFF), Local0)
     |                                                                  ^
     | Warning 3144: Method Local is set but never used    (Local0)
19308|             }
19309| 
19310|             Return (One)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19438
Line | AML source
--------------------------------------------------------------------------------
19435|             Return (Local0)
19436|         }
19437| 
19438|         Method (DCPS, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19439|         {
19440|             Store (\_SB.PCI0.LPCB.EC0.RPIN (0x26), Local0)
19441|             XOr (Local0, One, Local0)
================================================================================
Table DSDT (0) reassembly: Found 1 errors, 36 warnings, 103 remarks.


Checking ACPI table SSDT (#1)

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 376
Line | AML source
--------------------------------------------------------------------------------
00373| 
00374|             Name (PATC, 0x02)
00375|             Name (AT0, Ones)
00376|             Method (PAT0, 1, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00377|             {
00378|             }
00379| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 381
Line | AML source
--------------------------------------------------------------------------------
00378|             }
00379| 
00380|             Name (AT1, Ones)
00381|             Method (PAT1, 1, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00382|             {
00383|             }
00384| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 573
Line | AML source
--------------------------------------------------------------------------------
00570|             }
00571| 
00572|             Name (PATC, 0x02)
00573|             Method (PAT0, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00574|             {
00575|             }
00576| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 577
Line | AML source
--------------------------------------------------------------------------------
00574|             {
00575|             }
00576| 
00577|             Method (PAT1, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00578|             {
00579|             }
00580| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 598
Line | AML source
--------------------------------------------------------------------------------
00595|             }
00596| 
00597|             Name (PATC, 0x02)
00598|             Method (PAT0, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00599|             {
00600|             }
00601| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 602
Line | AML source
--------------------------------------------------------------------------------
00599|             {
00600|             }
00601| 
00602|             Method (PAT1, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00603|             {
00604|             }
00605| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 623
Line | AML source
--------------------------------------------------------------------------------
00620|             }
00621| 
00622|             Name (PATC, 0x02)
00623|             Method (PAT0, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00624|             {
00625|             }
00626| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 627
Line | AML source
--------------------------------------------------------------------------------
00624|             {
00625|             }
00626| 
00627|             Method (PAT1, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00628|             {
00629|             }
00630| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 648
Line | AML source
--------------------------------------------------------------------------------
00645|             }
00646| 
00647|             Name (PATC, 0x02)
00648|             Method (PAT0, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00649|             {
00650|             }
00651| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 652
Line | AML source
--------------------------------------------------------------------------------
00649|             {
00650|             }
00651| 
00652|             Method (PAT1, 1, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
00653|             {
00654|             }
00655| 
================================================================================
Table SSDT (1) reassembly: Found 0 errors, 0 warnings, 10 remarks.


Checking ACPI table SSDT (#2)

Assembler remark in line 63
Line | AML source
--------------------------------------------------------------------------------
00060|         Name (XPCC, Zero)
00061|         Method (PPCC, 0, Serialized)
00062|         {
00063|             Name (_T_6, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_6)
00064|             Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 64
Line | AML source
--------------------------------------------------------------------------------
00061|         Method (PPCC, 0, Serialized)
00062|         {
00063|             Name (_T_6, Zero)  // _T_x: Emitted by ASL Compiler
00064|             Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_5)
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 65
Line | AML source
--------------------------------------------------------------------------------
00062|         {
00063|             Name (_T_6, Zero)  // _T_x: Emitted by ASL Compiler
00064|             Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_4)
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
00068|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 66
Line | AML source
--------------------------------------------------------------------------------
00063|             Name (_T_6, Zero)  // _T_x: Emitted by ASL Compiler
00064|             Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_3)
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
00068|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00069|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 67
Line | AML source
--------------------------------------------------------------------------------
00064|             Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_2)
00068|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00069|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
00070|             If (LAnd (LEqual (XPCC, Zero), CondRefOf (\_PR.CBMI)))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 68
Line | AML source
--------------------------------------------------------------------------------
00065|             Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
00068|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
00069|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
00070|             If (LAnd (LEqual (XPCC, Zero), CondRefOf (\_PR.CBMI)))
00071|             {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 69
Line | AML source
--------------------------------------------------------------------------------
00066|             Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler
00067|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
00068|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00069|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00070|             If (LAnd (LEqual (XPCC, Zero), CondRefOf (\_PR.CBMI)))
00071|             {
00072|                 Store (\_SB.PCI0.LPCB.EC0.RRAM (0x01BF), Local0)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 263
Line | AML source
--------------------------------------------------------------------------------
00260|             {
00261|                 Multiply (CNVT, 0x03E8, CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
00262|                 Multiply (RMDR, 0x03E8, RMDR) /* \_SB_.PCI0.B0D4.CPNU.RMDR */
00263|                 Divide (RMDR, PPUU, Local0, RMDR) /* \_SB_.PCI0.B0D4.CPNU.RMDR */
     |                                         ^
     | Warning 3144: Method Local is set but never used    (Local0)
00264|                 Add (CNVT, RMDR, CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
00265|                 Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
00266|             }
================================================================================
Assembler remark in line 370
Line | AML source
--------------------------------------------------------------------------------
00367| 
00368|         Method (SPPC, 1, Serialized)
00369|         {
00370|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00371|             If (LLessEqual (Arg0, \_SB.CPUP))
00372|             {
00373|                 Store (Subtract (\_SB.CPUP, Arg0), \_SB.SLMT) /* External reference */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [HIGH] AMLAsmASL_MSG_RESERVED_OPERAND_TYPE: Test 1, Assembler error in
line 437
Line | AML source
--------------------------------------------------------------------------------
00434|             {
00435|                 Return (Package (0x01)
00436|                 {
00437|                     Zero
     |                       ^
     | Error 6105: Invalid object type for reserved name    (_PSS: found Integer at index 0, Package required)
00438|                 })
00439|             }
00440|         }
================================================================================

ADVICE: (for Error #6105, ASL_MSG_RESERVED_OPERAND_TYPE): The object type for
the reserved name does not match the expected type.

FAILED [HIGH] AMLAsmASL_MSG_RESERVED_OPERAND_TYPE: Test 1, Assembler error in
line 452
Line | AML source
--------------------------------------------------------------------------------
00449|             {
00450|                 Return (Package (0x01)
00451|                 {
00452|                     Zero
     |                       ^
     | Error 6105: Invalid object type for reserved name    (_TSS: found Integer at index 0, Package required)
00453|                 })
00454|             }
00455|         }
================================================================================

ADVICE: (for Error #6105, ASL_MSG_RESERVED_OPERAND_TYPE): The object type for
the reserved name does not match the expected type.

FAILED [HIGH] AMLAsmASL_MSG_RESERVED_PACKAGE_LENGTH: Test 1, Assembler error in
line 477
Line | AML source
--------------------------------------------------------------------------------
00474|             }
00475|             Else
00476|             {
00477|                 Return (Package (0x01)
     |                                    ^
     | Error 6106: Invalid package length for reserved name    (_PTC: length 1, required minimum is 2)
00478|                 {
00479|                     Zero
00480|                 })
================================================================================

ADVICE: (for Error #6106, ASL_MSG_RESERVED_PACKAGE_LENGTH): The package is
smaller than required.

FAILED [HIGH] AMLAsmASL_MSG_RESERVED_OPERAND_TYPE: Test 1, Assembler error in
line 494
Line | AML source
--------------------------------------------------------------------------------
00491|             {
00492|                 Return (Package (0x01)
00493|                 {
00494|                     Zero
     |                       ^
     | Error 6105: Invalid object type for reserved name    (_TSD: found Integer at index 0, Package required)
00495|                 })
00496|             }
00497|         }
================================================================================

ADVICE: (for Error #6105, ASL_MSG_RESERVED_OPERAND_TYPE): The object type for
the reserved name does not match the expected type.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
499
Line | AML source
--------------------------------------------------------------------------------
00496|             }
00497|         }
00498| 
00499|         Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00500|         {
00501|             Name (LFMI, Zero)
00502|             If (CondRefOf (\_PR.CPU0._TSS))
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
514
Line | AML source
--------------------------------------------------------------------------------
00511|             }
00512|         }
00513| 
00514|         Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00515|         {
00516|             Name (LFMI, Zero)
00517|             If (CondRefOf (\_PR.CPU0._PSS))
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

Table SSDT (2) reassembly: Found 4 errors, 1 warnings, 10 remarks.


Checking ACPI table SSDT (#3)

PASSED: Test 1, SSDT (3) reassembly, Found 0 errors, 0 warnings, 0 remarks.


Checking ACPI table SSDT (#4)

Assembler remark in line 57
Line | AML source
--------------------------------------------------------------------------------
00054|     {
00055|         Method (TDPL, 0, Serialized)
00056|         {
00057|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00058|             Name (AAAA, Zero)
00059|             Name (BBBB, Zero)
00060|             Name (CCCC, Zero)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 61
Line | AML source
--------------------------------------------------------------------------------
00058|             Name (AAAA, Zero)
00059|             Name (BBBB, Zero)
00060|             Name (CCCC, Zero)
00061|             Name (PPUU, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [TDPL])
00062|             Name (TMP1, Package (0x01)
00063|             {
00064|                 Package (0x05)
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
330
Line | AML source
--------------------------------------------------------------------------------
00327|         Name (LEV0, Zero)
00328|         Name (LEV1, Zero)
00329|         Name (LEV2, Zero)
00330|         Method (STDP, 1, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (STDP)
00331|         {
00332|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00333|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

Assembler remark in line 332
Line | AML source
--------------------------------------------------------------------------------
00329|         Name (LEV2, Zero)
00330|         Method (STDP, 1, Serialized)
00331|         {
00332|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
00333|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
00334|             If (LGreaterEqual (Arg0, \_PR.CLVL))
00335|             {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 333
Line | AML source
--------------------------------------------------------------------------------
00330|         Method (STDP, 1, Serialized)
00331|         {
00332|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00333|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00334|             If (LGreaterEqual (Arg0, \_PR.CLVL))
00335|             {
00336|                 Return (Zero)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 402
Line | AML source
--------------------------------------------------------------------------------
00399| 
00400|         Method (_QB8, 0, Serialized)  // _Qxx: EC Query
00401|         {
00402|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00403|             While (One)
00404|             {
00405|                 Store (\_PR.CLVL, _T_0) /* \_SB_.PCI0.LPCB.EC0_._QB8._T_0 */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 427
Line | AML source
--------------------------------------------------------------------------------
00424| 
00425|         Method (_QB9, 0, Serialized)  // _Qxx: EC Query
00426|         {
00427|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00428|             While (One)
00429|             {
00430|                 Store (\_PR.CLVL, _T_0) /* \_SB_.PCI0.LPCB.EC0_._QB9._T_0 */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Table SSDT (4) reassembly: Found 0 errors, 1 warnings, 6 remarks.


Checking ACPI table SSDT (#5)

FAILED [MEDIUM] AMLAsmASL_MSG_NO_REGION: Test 1, Assembler warning in line 36
Line | AML source
--------------------------------------------------------------------------------
00033|     Scope (\_SB.PCI0.IDE0)
00034|     {
00035|         Name (REGF, One)
00036|         Method (_REG, 2, NotSerialized)  // _REG: Region Availability
     |                   ^
     | Warning 3079: _REG has no corresponding Operation Region  
00037|         {
00038|             If (LEqual (Arg0, 0x02))
00039|             {
================================================================================

ADVICE: (for Warning #3079, ASL_MSG_NO_REGION): _REG requires a corresponding
Operation Region, however one was not found.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 118
Line | AML source
--------------------------------------------------------------------------------
00115|             Name (W128, Zero)
00116|             Name (W119, Zero)
00117|             Name (W120, Zero)
00118|             Name (IRDY, One)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00119|             Name (PIOT, Zero)
00120|             Name (DMAT, Zero)
00121|             If (LEqual (SizeOf (Arg1), 0x0200))
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 119
Line | AML source
--------------------------------------------------------------------------------
00116|             Name (W119, Zero)
00117|             Name (W120, Zero)
00118|             Name (IRDY, One)
00119|             Name (PIOT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00120|             Name (DMAT, Zero)
00121|             If (LEqual (SizeOf (Arg1), 0x0200))
00122|             {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 120
Line | AML source
--------------------------------------------------------------------------------
00117|             Name (W120, Zero)
00118|             Name (IRDY, One)
00119|             Name (PIOT, Zero)
00120|             Name (DMAT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00121|             If (LEqual (SizeOf (Arg1), 0x0200))
00122|             {
00123|                 CreateWordField (Arg1, Zero, IW00)
================================================================================
Assembler remark in line 246
Line | AML source
--------------------------------------------------------------------------------
00243| 
00244|             Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
00245|             {
00246|                 Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
00247|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
00248|                 If (LEqual (Arg0, ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
00249|                 {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 247
Line | AML source
--------------------------------------------------------------------------------
00244|             Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
00245|             {
00246|                 Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00247|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00248|                 If (LEqual (Arg0, ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
00249|                 {
00250|                     While (One)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 336
Line | AML source
--------------------------------------------------------------------------------
00333|             }
00334|         }
00335| 
00336|         Method (AGTF, 2, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
00337|         {
00338|             Store (0xA0, Local0)
00339|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE0.CMDC */
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 342
Line | AML source
--------------------------------------------------------------------------------
00339|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE0.CMDC */
00340|             If (LEqual (SizeOf (Arg1), 0x0200))
00341|             {
00342|                 CreateWordField (Arg1, Zero, IW00)
     |                                                ^
     | Remark 2089: Object is not referenced    (Name is within method [AGTF])
00343|                 CreateWordField (Arg1, 0x0100, I128)
00344|                 If (And (I128, One))
00345|                 {
================================================================================
Table SSDT (5) reassembly: Found 0 errors, 1 warnings, 7 remarks.


Checking ACPI table SSDT (#6)

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 142
Line | AML source
--------------------------------------------------------------------------------
00139|             Name (W128, Zero)
00140|             Name (W119, Zero)
00141|             Name (W120, Zero)
00142|             Name (IRDY, One)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00143|             Name (PIOT, Zero)
00144|             Name (DMAT, Zero)
00145|             If (LEqual (SizeOf (Arg1), 0x0200))
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 143
Line | AML source
--------------------------------------------------------------------------------
00140|             Name (W119, Zero)
00141|             Name (W120, Zero)
00142|             Name (IRDY, One)
00143|             Name (PIOT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00144|             Name (DMAT, Zero)
00145|             If (LEqual (SizeOf (Arg1), 0x0200))
00146|             {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 144
Line | AML source
--------------------------------------------------------------------------------
00141|             Name (W120, Zero)
00142|             Name (IRDY, One)
00143|             Name (PIOT, Zero)
00144|             Name (DMAT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name is within method [GTF_])
00145|             If (LEqual (SizeOf (Arg1), 0x0200))
00146|             {
00147|                 CreateWordField (Arg1, Zero, IW00)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 223
Line | AML source
--------------------------------------------------------------------------------
00220|             Return (RETB) /* \_SB_.PCI0.IDE1.RATA.RETB */
00221|         }
00222| 
00223|         Method (AGTF, 2, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
00224|         {
00225|             Store (0xA0, Local0)
00226|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE1.CMDC */
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 229
Line | AML source
--------------------------------------------------------------------------------
00226|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE1.CMDC */
00227|             If (LEqual (SizeOf (Arg1), 0x0200))
00228|             {
00229|                 CreateWordField (Arg1, Zero, IW00)
     |                                                ^
     | Remark 2089: Object is not referenced    (Name is within method [AGTF])
00230|                 CreateWordField (Arg1, 0x0100, I128)
00231|                 If (And (I128, One))
00232|                 {
================================================================================
Table SSDT (6) reassembly: Found 0 errors, 0 warnings, 5 remarks.


Checking ACPI table SSDT (#7)

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 226
Line | AML source
--------------------------------------------------------------------------------
00223|                 0x0000000B
00224|             }
00225|         })
00226|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00227|         {
00228|             0x80000000, 
00229|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 246
Line | AML source
--------------------------------------------------------------------------------
00243|             0x80000000
00244|         }
00245| 
00246|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00247|         {
00248|             0x80000000, 
00249|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 247
Line | AML source
--------------------------------------------------------------------------------
00244|         }
00245| 
00246|         Package (0x06)
00247|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00248|             0x80000000, 
00249|             0x80000000, 
00250|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 266
Line | AML source
--------------------------------------------------------------------------------
00263|             0x80000000
00264|         }
00265| 
00266|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00267|         {
00268|             0x80000000, 
00269|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 267
Line | AML source
--------------------------------------------------------------------------------
00264|         }
00265| 
00266|         Package (0x06)
00267|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00268|             0x80000000, 
00269|             0x80000000, 
00270|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 286
Line | AML source
--------------------------------------------------------------------------------
00283|             0x80000000
00284|         }
00285| 
00286|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00287|         {
00288|             0x80000000, 
00289|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 287
Line | AML source
--------------------------------------------------------------------------------
00284|         }
00285| 
00286|         Package (0x06)
00287|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00288|             0x80000000, 
00289|             0x80000000, 
00290|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 306
Line | AML source
--------------------------------------------------------------------------------
00303|             0x80000000
00304|         }
00305| 
00306|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00307|         {
00308|             0x80000000, 
00309|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 307
Line | AML source
--------------------------------------------------------------------------------
00304|         }
00305| 
00306|         Package (0x06)
00307|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00308|             0x80000000, 
00309|             0x80000000, 
00310|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 326
Line | AML source
--------------------------------------------------------------------------------
00323|             0x80000000
00324|         }
00325| 
00326|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00327|         {
00328|             0x80000000, 
00329|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 327
Line | AML source
--------------------------------------------------------------------------------
00324|         }
00325| 
00326|         Package (0x06)
00327|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00328|             0x80000000, 
00329|             0x80000000, 
00330|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 346
Line | AML source
--------------------------------------------------------------------------------
00343|             0x80000000
00344|         }
00345| 
00346|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00347|         {
00348|             0x80000000, 
00349|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 347
Line | AML source
--------------------------------------------------------------------------------
00344|         }
00345| 
00346|         Package (0x06)
00347|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00348|             0x80000000, 
00349|             0x80000000, 
00350|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 366
Line | AML source
--------------------------------------------------------------------------------
00363|             0x80000000
00364|         }
00365| 
00366|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00367|         {
00368|             0x80000000, 
00369|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 367
Line | AML source
--------------------------------------------------------------------------------
00364|         }
00365| 
00366|         Package (0x06)
00367|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00368|             0x80000000, 
00369|             0x80000000, 
00370|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 386
Line | AML source
--------------------------------------------------------------------------------
00383|             0x80000000
00384|         }
00385| 
00386|         Name (_PSS, Package (0x0C)  // _PSS: Performance Supported States
     |           ^
     | Error 6126: syntax error, unexpected PARSEOP_NAME
00387|         {
00388|             Package (0x06)
00389|             {
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 507
Line | AML source
--------------------------------------------------------------------------------
00504|                 0x00000800, 
00505|                 0x00000800
00506|             }
00507|         })
     |         ^
     | Error 6126: syntax error, unexpected ')'  
00508|         Package (0x06)
00509|         {
00510|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 518
Line | AML source
--------------------------------------------------------------------------------
00515|             0x80000000
00516|         }
00517| 
00518|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00519|         {
00520|             0x80000000, 
00521|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 519
Line | AML source
--------------------------------------------------------------------------------
00516|         }
00517| 
00518|         Package (0x06)
00519|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00520|             0x80000000, 
00521|             0x80000000, 
00522|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 538
Line | AML source
--------------------------------------------------------------------------------
00535|             0x80000000
00536|         }
00537| 
00538|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00539|         {
00540|             0x80000000, 
00541|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 539
Line | AML source
--------------------------------------------------------------------------------
00536|         }
00537| 
00538|         Package (0x06)
00539|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00540|             0x80000000, 
00541|             0x80000000, 
00542|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 558
Line | AML source
--------------------------------------------------------------------------------
00555|             0x80000000
00556|         }
00557| 
00558|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00559|         {
00560|             0x80000000, 
00561|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 559
Line | AML source
--------------------------------------------------------------------------------
00556|         }
00557| 
00558|         Package (0x06)
00559|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00560|             0x80000000, 
00561|             0x80000000, 
00562|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 578
Line | AML source
--------------------------------------------------------------------------------
00575|             0x80000000
00576|         }
00577| 
00578|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00579|         {
00580|             0x80000000, 
00581|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 579
Line | AML source
--------------------------------------------------------------------------------
00576|         }
00577| 
00578|         Package (0x06)
00579|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00580|             0x80000000, 
00581|             0x80000000, 
00582|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 598
Line | AML source
--------------------------------------------------------------------------------
00595|             0x80000000
00596|         }
00597| 
00598|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00599|         {
00600|             0x80000000, 
00601|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 599
Line | AML source
--------------------------------------------------------------------------------
00596|         }
00597| 
00598|         Package (0x06)
00599|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00600|             0x80000000, 
00601|             0x80000000, 
00602|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 618
Line | AML source
--------------------------------------------------------------------------------
00615|             0x80000000
00616|         }
00617| 
00618|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00619|         {
00620|             0x80000000, 
00621|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 619
Line | AML source
--------------------------------------------------------------------------------
00616|         }
00617| 
00618|         Package (0x06)
00619|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00620|             0x80000000, 
00621|             0x80000000, 
00622|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 638
Line | AML source
--------------------------------------------------------------------------------
00635|             0x80000000
00636|         }
00637| 
00638|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00639|         {
00640|             0x80000000, 
00641|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 639
Line | AML source
--------------------------------------------------------------------------------
00636|         }
00637| 
00638|         Package (0x06)
00639|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00640|             0x80000000, 
00641|             0x80000000, 
00642|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 658
Line | AML source
--------------------------------------------------------------------------------
00655|             0x80000000
00656|         }
00657| 
00658|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00659|         {
00660|             0x80000000, 
00661|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 659
Line | AML source
--------------------------------------------------------------------------------
00656|         }
00657| 
00658|         Package (0x06)
00659|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00660|             0x80000000, 
00661|             0x80000000, 
00662|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 709
Line | AML source
--------------------------------------------------------------------------------
00706|             }
00707|         })
00708|     }
00709| }
     | ^                                         
     | Error 6126: syntax error, unexpected '}', expecting $end and premature End-Of-File
00710| 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] SyntaxCheckIASLCompilerAborted: Test 1, Compilation aborted early
due to a parser detected syntax error.

ADVICE: Some subsequent errors may not be detected because the compiler had to
terminate prematurely. If the compiler did not abort early then potentially
correct code may parse incorrectly producing some or many false positive errors.

Table SSDT (7) reassembly: Found 34 errors, 0 warnings, 0 remarks.


Checking ACPI table SSDT (#8)

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 108
Line | AML source
--------------------------------------------------------------------------------
00105|             Store (CPPC, \_PR.CPU0._PPC ())
00106|             Store (CPDC (Arg0), Local0)
00107|             GCAP (Local0)
00108|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00109|         }
00110| 
00111|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
118
Line | AML source
--------------------------------------------------------------------------------
00115|             Return (Local0)
00116|         }
00117| 
00118|         Method (CPDC, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00119|         {
00120|             CreateDWordField (Arg0, Zero, REVS)
00121|             CreateDWordField (Arg0, 0x04, SIZE)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 133
Line | AML source
--------------------------------------------------------------------------------
00130|             Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
00131|         }
00132| 
00133|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
00134|         {
00135|             CreateDWordField (Arg3, Zero, STS0)
00136|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
133
Line | AML source
--------------------------------------------------------------------------------
00130|             Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
00131|         }
00132| 
00133|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00134|         {
00135|             CreateDWordField (Arg3, Zero, STS0)
00136|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 136
Line | AML source
--------------------------------------------------------------------------------
00133|         Method (COSC, 4, NotSerialized)
00134|         {
00135|             CreateDWordField (Arg3, Zero, STS0)
00136|             CreateDWordField (Arg3, 0x04, CAP0)
     |                                             ^
     | Remark 2089: Object is not referenced    (Name is within method [COSC])
00137|             CreateDWordField (Arg0, Zero, IID0)
00138|             CreateDWordField (Arg0, 0x04, IID1)
00139|             CreateDWordField (Arg0, 0x08, IID2)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
162
Line | AML source
--------------------------------------------------------------------------------
00159|             Return (Arg3)
00160|         }
00161| 
00162|         Method (GCAP, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00163|         {
00164|             CreateDWordField (Arg0, Zero, STS0)
00165|             CreateDWordField (Arg0, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 201
Line | AML source
--------------------------------------------------------------------------------
00198|         {
00199|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00200|             GCAP (Local0)
00201|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00202|         }
00203| 
00204|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
241
Line | AML source
--------------------------------------------------------------------------------
00238|             Return (Zero)
00239|         }
00240| 
00241|         Method (APCT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00242|         {
00243|             If (LAnd (And (CFGD, 0x2E), LNot (And (SDTL, 0x20))))
00244|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
251
Line | AML source
--------------------------------------------------------------------------------
00248|             }
00249|         }
00250| 
00251|         Method (APPT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00252|         {
00253|             If (LAnd (And (CFGD, One), LNot (And (SDTL, 0x10))))
00254|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 268
Line | AML source
--------------------------------------------------------------------------------
00265|         {
00266|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00267|             GCAP (Local0)
00268|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00269|         }
00270| 
00271|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 315
Line | AML source
--------------------------------------------------------------------------------
00312|         {
00313|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00314|             GCAP (Local0)
00315|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00316|         }
00317| 
00318|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 362
Line | AML source
--------------------------------------------------------------------------------
00359|         {
00360|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00361|             GCAP (Local0)
00362|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00363|         }
00364| 
00365|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 409
Line | AML source
--------------------------------------------------------------------------------
00406|         {
00407|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00408|             GCAP (Local0)
00409|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00410|         }
00411| 
00412|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 456
Line | AML source
--------------------------------------------------------------------------------
00453|         {
00454|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00455|             GCAP (Local0)
00456|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00457|         }
00458| 
00459|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 503
Line | AML source
--------------------------------------------------------------------------------
00500|         {
00501|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00502|             GCAP (Local0)
00503|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00504|         }
00505| 
00506|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

Table SSDT (8) reassembly: Found 0 errors, 8 warnings, 7 remarks.


Checking ACPI table SSDT (#9)

PASSED: Test 1, SSDT (9) reassembly, Found 0 errors, 0 warnings, 0 remarks.


================================================================================
2 passed, 215 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

stao: STAO Status Override Table test.
--------------------------------------------------------------------------------
ACPI STAO table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

srat: SRAT System Resource Affinity Table test.
--------------------------------------------------------------------------------
ACPI SRAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spmi: SPMI Service Processor Management Interface Description Table test.
--------------------------------------------------------------------------------
ACPI SPMI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spcr: SPCR Serial Port Console Redirection Table test.
--------------------------------------------------------------------------------
ACPI SPCR table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slit: SLIT System Locality Distance Information test.
--------------------------------------------------------------------------------
ACPI SLIT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slic: SLIC Software Licensing Description Table test.
--------------------------------------------------------------------------------
ACPI SLIC table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

sbst: SBST Smart Battery Specification Table test.
--------------------------------------------------------------------------------
ACPI SBST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

rsdt: RSDT Root System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDT Root System Description Table test.
PASSED: Test 1, No issues found in RSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

rsdp: RSDP Root System Description Pointer test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDP Root System Description Pointer test.
PASSED: Test 1, No issues found in RSDP table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pcc: Processor Clocking Control (PCC) test.
--------------------------------------------------------------------------------
Test 1 of 1: Processor Clocking Control (PCC) test.
This test checks the sanity of the Processor Clocking Control as found on some
HP ProLiant machines. Most computers do not use this interface to control the
CPU clock frequency, so this test will be skipped.

This machine does not use Processor Clocking Control (PCC).

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

osilinux: Disassemble DSDT to check for _OSI("Linux").
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble DSDT to check for _OSI("Linux").
This is not strictly a failure mode, it just alerts one that this has been
defined in the DSDT and probably should be avoided since the Linux ACPI driver
matches onto the Windows _OSI strings
                {
                    Store (OSVT, OSFG) /* \OSFG */
                }
                If (_OSI ("Linux"))
                {
                    Store (OSEG, OSFG) /* \OSFG */
                }
                If (_OSI ("Windows 2009"))
                {
                    Store (OSW7, OSFG) /* \OSFG */
                }
                If (_OSI ("Windows 2012"))
                {
                    Store (OSW8, OSFG) /* \OSFG */
                }
                Return (OSFG) /* \OSFG */
            }
WARNING: Test 1, DSDT implements a deprecated _OSI("Linux") test.

================================================================================
0 passed, 0 failed, 1 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

method: ACPI DSDT Method Semantic tests.
--------------------------------------------------------------------------------
Test 1 of 191: Test Method Names.
Found 2836 Objects 
PASSED: Test 1, Method names contain legal characters.

Test 2 of 191: Test _AEI.
SKIPPED: Test 2, Skipping test for non-existant object _AEI.

Test 3 of 191: Test _EVT (Event Method).
SKIPPED: Test 3, Skipping test for non-existant object _EVT.

Test 4 of 191: Test _DLM (Device Lock Mutex).
SKIPPED: Test 4, Skipping test for non-existant object _DLM.

Test 5 of 191: Test _PIC (Inform AML of Interrupt Model).
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.

Test 6 of 191: Test _CID (Compatible ID).
PASSED: Test 6, \_SB_.PCI0._CID returned an integer 0x030ad041 (EISA ID
PNP0A03).
PASSED: Test 6, \_SB_.PCI0.LPCB.CWDT._CID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x000a2e4f (EISA
ID SYN0A00).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x02002e4f (EISA
ID SYN0002).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x030fd041 (EISA
ID PNP0F03).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x130fd041 (EISA
ID PNP0F13).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x120fd041 (EISA
ID PNP0F12).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2K._CID returned an integer 0x0b03d041 (EISA
ID PNP030B).
PASSED: Test 6, \_SB_.PTID._CID returned an integer 0x020cd041 (EISA ID
PNP0C02).
PASSED: Test 6, \_SB_.IFFS._CID returned an integer 0x020cd041 (EISA ID
PNP0C02).

Test 7 of 191: Test _DDN (DOS Device Name).
SKIPPED: Test 7, Skipping test for non-existant object _DDN.

Test 8 of 191: Test _HID (Hardware ID).
PASSED: Test 8, \_SB_.PCI0._HID returned an integer 0x080ad041 (EISA ID
PNP0A08).
PASSED: Test 8, \_SB_.PCI0.TPMX._HID returned an integer 0x010cd041 (EISA ID
PNP0C01).
PASSED: Test 8, \_SB_.PCI0.LPCB.DMAC._HID returned an integer 0x0002d041 (EISA
ID PNP0200).
PASSED: Test 8, \_SB_.PCI0.LPCB.FWHD._HID returned an integer 0x0008d425 (EISA
ID INT0800).
PASSED: Test 8, \_SB_.PCI0.LPCB.HPET._HID returned an integer 0x0301d041 (EISA
ID PNP0103).
PASSED: Test 8, \_SB_.PCI0.LPCB.IPIC._HID returned an integer 0x0000d041 (EISA
ID PNP0000).
PASSED: Test 8, \_SB_.PCI0.LPCB.LDRC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.RTC_._HID returned an integer 0x000bd041 (EISA
ID PNP0B00).
PASSED: Test 8, \_SB_.PCI0.LPCB.TIMR._HID returned an integer 0x0001d041 (EISA
ID PNP0100).
PASSED: Test 8, \_SB_.PCI0.LPCB.CWDT._HID returned an integer 0x0d3fd425 (EISA
ID INT3F0D).
PASSED: Test 8, \_SB_.PCI0.LPCB.RMSC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.COPR._HID returned an integer 0x040cd041 (EISA
ID PNP0C04).
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2M._HID returned an integer 0x060a2e4f (EISA
ID SYN0A06).
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2K._HID returned an integer 0x01308b06 (EISA
ID ATK3001).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_._HID returned an integer 0x090cd041 (EISA
ID PNP0C09).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_.TFN1._HID returned an integer 0x0434d425
(EISA ID INT3404).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_.TSKN._HID returned an integer 0x0334d425
(EISA ID INT3403).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_.TAMB._HID returned an integer 0x0334d425
(EISA ID INT3403).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_.T_VR._HID returned an integer 0x0334d425
(EISA ID INT3403).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_.TEFN._HID returned an integer 0x0334d425
(EISA ID INT3403).
PASSED: Test 8, \_SB_.PCI0.PDRC._HID returned an integer 0x020cd041 (EISA ID
PNP0C02).
PASSED: Test 8, \_SB_.PCI0.AC0_._HID returned a string 'ACPI0003' as expected.
PASSED: Test 8, \_SB_.PCI0.BAT0._HID returned an integer 0x0a0cd041 (EISA ID
PNP0C0A).
PASSED: Test 8, \_SB_.PCI0.RESC._HID returned an integer 0x020cd041 (EISA ID
PNP0C02).
PASSED: Test 8, \_SB_.PCI0.TMEM._HID returned an integer 0x0234d425 (EISA ID
INT3402).
PASSED: Test 8, \_SB_.LNKA._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKB._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKC._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKD._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKE._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKF._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKG._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKH._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.MEM2._HID returned an integer 0x010cd041 (EISA ID
PNP0C01).
PASSED: Test 8, \_SB_.ATKD._HID returned a string 'PNP0C14' as expected.
PASSED: Test 8, \_SB_.ASHS._HID returned a string 'ATK4001' as expected.
PASSED: Test 8, \_SB_.PTID._HID returned an integer 0x0e34d425 (EISA ID
INT340E).
PASSED: Test 8, \_SB_.LID_._HID returned an integer 0x0d0cd041 (EISA ID
PNP0C0D).
PASSED: Test 8, \_SB_.SLPB._HID returned an integer 0x0e0cd041 (EISA ID
PNP0C0E).
PASSED: Test 8, \_SB_.IETM._HID returned an integer 0x0034d425 (EISA ID
INT3400).
PASSED: Test 8, \_SB_.IFFS._HID returned an integer 0x9233d425 (EISA ID
INT3392).

Test 9 of 191: Test _HRV (Hardware Revision Number).
SKIPPED: Test 9, Skipping test for non-existant object _HRV.

Test 10 of 191: Test _MLS (Multiple Language String).
SKIPPED: Test 10, Skipping test for non-existant object _MLS.

Test 11 of 191: Test _PLD (Physical Device Location).
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2.DCAM._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP4._PLD correctly returned a sane
looking package.

Test 12 of 191: Test _SUB (Subsystem ID).
SKIPPED: Test 12, Skipping test for non-existant object _SUB.

Test 13 of 191: Test _SUN (Slot User Number).
SKIPPED: Test 13, Skipping test for non-existant object _SUN.

Test 14 of 191: Test _STR (String).
PASSED: Test 14, \_SB_.PCI0.LPCB.EC0_.TSKN._STR correctly returned a buffer of
48 elements.
PASSED: Test 14, \_SB_.PCI0.LPCB.EC0_.TAMB._STR correctly returned a buffer of
56 elements.
PASSED: Test 14, \_SB_.PCI0.LPCB.EC0_.T_VR._STR correctly returned a buffer of
44 elements.
PASSED: Test 14, \_SB_.PCI0.LPCB.EC0_.TEFN._STR correctly returned a buffer of
62 elements.

Test 15 of 191: Test _UID (Unique ID).
PASSED: Test 15, \_SB_.PCI0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.TPMX._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.LPCB.HPET._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.LDRC._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.PCI0.LPCB.RMSC._UID correctly returned sane looking value
0x00000010.
PASSED: Test 15, \_SB_.PCI0.LPCB.EC0_.TFN1._UID correctly returned sane looking
value 0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.EC0_.TSKN._UID correctly returned sane looking
value 0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.EC0_.TAMB._UID correctly returned sane looking
value 0x00000001.
PASSED: Test 15, \_SB_.PCI0.LPCB.EC0_.T_VR._UID correctly returned sane looking
value 0x00000002.
PASSED: Test 15, \_SB_.PCI0.LPCB.EC0_.TEFN._UID correctly returned sane looking
value 0x00000003.
PASSED: Test 15, \_SB_.PCI0.PDRC._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.BAT0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.RESC._UID correctly returned sane looking value
0x00000009.
PASSED: Test 15, \_SB_.PCI0.TMEM._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.LNKA._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.LNKB._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.LNKC._UID correctly returned sane looking value
0x00000003.
PASSED: Test 15, \_SB_.LNKD._UID correctly returned sane looking value
0x00000004.
PASSED: Test 15, \_SB_.LNKE._UID correctly returned sane looking value
0x00000005.
PASSED: Test 15, \_SB_.LNKF._UID correctly returned sane looking value
0x00000006.
PASSED: Test 15, \_SB_.LNKG._UID correctly returned sane looking value
0x00000007.
PASSED: Test 15, \_SB_.LNKH._UID correctly returned sane looking value
0x00000008.
PASSED: Test 15, \_SB_.MEM2._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.ATKD._UID returned a string 'ATK' as expected.

Test 16 of 191: Test _CDM (Clock Domain).
SKIPPED: Test 16, Skipping test for non-existant object _CDM.

Test 17 of 191: Test _CRS (Current Resource Settings).
PASSED: Test 17, \_SB_.PCI0._CRS (WORD Address Space Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.TPMX._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.DMAC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.FWHD._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.HPET._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.IPIC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.LDRC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RTC_._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.TIMR._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.CWDT._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RMSC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.COPR._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2M._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2K._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.EC0_._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.PDRC._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.RESC._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKA._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKB._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKC._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKD._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKE._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKF._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKG._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKH._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.MEM2._CRS (32-bit Fixed Location Memory Range Descriptor)
looks sane.

Test 18 of 191: Test _DSD (Device Specific Data).
SKIPPED: Test 18, Skipping test for non-existant object _DSD.

Test 19 of 191: Test _DIS (Disable).
PASSED: Test 19, \_SB_.LNKA._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKB._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKC._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKD._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKE._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKF._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKG._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKH._DIS returned no values as expected.

Test 20 of 191: Test _DMA (Direct Memory Access).
SKIPPED: Test 20, Skipping test for non-existant object _DMA.

Test 21 of 191: Test _FIX (Fixed Register Resource Provider).
SKIPPED: Test 21, Skipping test for non-existant object _FIX.

Test 22 of 191: Test _GSB (Global System Interrupt Base).
SKIPPED: Test 22, Skipping test for non-existant object _GSB.

Test 23 of 191: Test _HPP (Hot Plug Parameters).
SKIPPED: Test 23, Skipping test for non-existant object _HPP.

Test 24 of 191: Test _PRS (Possible Resource Settings).
PASSED: Test 24, \_SB_.PCI0.LPCB.PS2K._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKA._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKB._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKC._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKD._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKE._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKF._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKG._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKH._PRS (IRQ Descriptor) looks sane.

Test 25 of 191: Test _PXM (Proximity).
SKIPPED: Test 25, Skipping test for non-existant object _PXM.

Test 26 of 191: Test _CCA (Cache Coherency Attribute).
SKIPPED: Test 26, Skipping test for non-existant object _CCA.

Test 27 of 191: Test _EDL (Eject Device List).
SKIPPED: Test 27, Skipping test for non-existant object _EDL.

Test 28 of 191: Test _EJD (Ejection Dependent Device).
SKIPPED: Test 28, Skipping test for non-existant object _EJD.

Test 29 of 191: Test _EJ0 (Eject).
SKIPPED: Test 29, Skipping test for non-existant object _EJ0.

Test 30 of 191: Test _EJ1 (Eject).
SKIPPED: Test 30, Skipping test for non-existant object _EJ1.

Test 31 of 191: Test _EJ2 (Eject).
SKIPPED: Test 31, Skipping test for non-existant object _EJ2.

Test 32 of 191: Test _EJ3 (Eject).
SKIPPED: Test 32, Skipping test for non-existant object _EJ3.

Test 33 of 191: Test _EJ4 (Eject).
SKIPPED: Test 33, Skipping test for non-existant object _EJ4.

Test 34 of 191: Test _LCK (Lock).
SKIPPED: Test 34, Skipping test for non-existant object _LCK.

Test 35 of 191: Test _RMV (Remove).
PASSED: Test 35, \_SB_.PCI0.RP02.WLAN._RMV correctly returned sane looking value
0x00000000.

Test 36 of 191: Test _STA (Status).
PASSED: Test 36, \_SB_.PCI0.TPMX._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.HPET._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.PCI0.LPCB.CWDT._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.PS2M._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.PS2K._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.LPCB.EC0_.TFN1._STA correctly returned sane looking
value 0x0000000f.
PASSED: Test 36, \_SB_.PCI0.BAT0._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.PCI0.TMEM._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 36, \_SB_.LNKA._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKB._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKC._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKD._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKE._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKF._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKG._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.LNKH._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 36, \_SB_.MEM2._STA correctly returned sane looking value
0x00000000.
PASSED: Test 36, \_SB_.ASHS._STA correctly returned sane looking value
0x0000000f.

Test 37 of 191: Test _DEP (Operational Region Dependencies).
SKIPPED: Test 37, Skipping test for non-existant object _DEP.

Test 38 of 191: Test _BDN (BIOS Dock Name).
SKIPPED: Test 38, Skipping test for non-existant object _BDN.

Test 39 of 191: Test _BBN (Base Bus Number).
PASSED: Test 39, \_SB_.PCI0._BBN correctly returned an integer.

Test 40 of 191: Test _DCK (Dock).
SKIPPED: Test 40, Skipping test for non-existant object _DCK.

Test 41 of 191: Test _INI (Initialize).
PASSED: Test 41, \_SB_.PCI0.LPCB.EC0_._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0.GFX0._INI returned no values as expected.
PASSED: Test 41, \_SB_.PCI0._INI returned no values as expected.

Test 42 of 191: Test _GLK (Global Lock).
SKIPPED: Test 42, Skipping test for non-existant object _GLK.

Test 43 of 191: Test _SEG (Segment).
SKIPPED: Test 43, Skipping test for non-existant object _SEG.

Test 44 of 191: Test _OFF (Set resource off).
SKIPPED: Test 44, Skipping test for non-existant object _OFF.

Test 45 of 191: Test _ON (Set resource on).
SKIPPED: Test 45, Skipping test for non-existant object _ON.

Test 46 of 191: Test _DSW (Device Sleep Wake).
SKIPPED: Test 46, Skipping test for non-existant object _DSW.

Test 47 of 191: Test _IRC (In Rush Current).
SKIPPED: Test 47, Skipping test for non-existant object _IRC.

Test 48 of 191: Test _PRE (Power Resources for Enumeration).
SKIPPED: Test 48, Skipping test for non-existant object _PRE.

Test 49 of 191: Test _PR0 (Power Resources for D0).
SKIPPED: Test 49, Skipping test for non-existant object _PR0.

Test 50 of 191: Test _PR1 (Power Resources for D1).
SKIPPED: Test 50, Skipping test for non-existant object _PR1.

Test 51 of 191: Test _PR2 (Power Resources for D2).
SKIPPED: Test 51, Skipping test for non-existant object _PR2.

Test 52 of 191: Test _PR3 (Power Resources for D3).
SKIPPED: Test 52, Skipping test for non-existant object _PR3.

Test 53 of 191: Test _PRW (Power Resources for Wake).
PASSED: Test 53, \_SB_.PCI0.P0P1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG0._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG2._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.PEG3._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.XHC1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.EHC1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB1._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB2._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB3._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB4._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.EHC2._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB5._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB6._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.USB7._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.HDEF._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP01._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP03._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP05._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP06._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP07._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP08._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP02.WLAN._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.RP04._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.PCI0.RP04.GLAN._PRW correctly returned a sane looking
package.
PASSED: Test 53, \_SB_.PCI0.XHC_._PRW correctly returned a sane looking package.
PASSED: Test 53, \_SB_.SLPB._PRW correctly returned a sane looking package.

Test 54 of 191: Test _PS0 (Power State 0).
SKIPPED: Test 54, Skipping test for non-existant object _PS0.

Test 55 of 191: Test _PS1 (Power State 1).
SKIPPED: Test 55, Skipping test for non-existant object _PS1.

Test 56 of 191: Test _PS2 (Power State 2).
SKIPPED: Test 56, Skipping test for non-existant object _PS2.

Test 57 of 191: Test _PS3 (Power State 3).
SKIPPED: Test 57, Skipping test for non-existant object _PS3.

Test 58 of 191: Test _PSC (Power State Current).
SKIPPED: Test 58, Skipping test for non-existant object _PSC.

Test 59 of 191: Test _PSE (Power State for Enumeration).
SKIPPED: Test 59, Skipping test for non-existant object _PSE.

Test 60 of 191: Test _PSW (Power State Wake).
SKIPPED: Test 60, Skipping test for non-existant object _PSW.

Test 61 of 191: Test _S1D (S1 Device State).
SKIPPED: Test 61, Skipping test for non-existant object _S1D.

Test 62 of 191: Test _S2D (S2 Device State).
SKIPPED: Test 62, Skipping test for non-existant object _S2D.

Test 63 of 191: Test _S3D (S3 Device State).
PASSED: Test 63, \_SB_.PCI0.XHC_._S3D correctly returned an integer.

Test 64 of 191: Test _S4D (S4 Device State).
PASSED: Test 64, \_SB_.PCI0.XHC_._S4D correctly returned an integer.

Test 65 of 191: Test _S0W (S0 Device Wake State).
SKIPPED: Test 65, Skipping test for non-existant object _S0W.

Test 66 of 191: Test _S1W (S1 Device Wake State).
SKIPPED: Test 66, Skipping test for non-existant object _S1W.

Test 67 of 191: Test _S2W (S2 Device Wake State).
SKIPPED: Test 67, Skipping test for non-existant object _S2W.

Test 68 of 191: Test _S3W (S3 Device Wake State).
SKIPPED: Test 68, Skipping test for non-existant object _S3W.

Test 69 of 191: Test _S4W (S4 Device Wake State).
SKIPPED: Test 69, Skipping test for non-existant object _S4W.

Test 70 of 191: Test _RST (Device Reset).
SKIPPED: Test 70, Skipping test for non-existant object _RST.

Test 71 of 191: Test _PRR (Power Resource for Reset).
SKIPPED: Test 71, Skipping test for non-existant object _PRR.

Test 72 of 191: Test _S0_ (S0 System State).
\_S0_ PM1a_CNT.SLP_TYP value: 0x00000000
\_S0_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 72, \_S0_ correctly returned a sane looking package.

Test 73 of 191: Test _S1_ (S1 System State).
SKIPPED: Test 73, Skipping test for non-existant object _S1_.

Test 74 of 191: Test _S2_ (S2 System State).
SKIPPED: Test 74, Skipping test for non-existant object _S2_.

Test 75 of 191: Test _S3_ (S3 System State).
\_S3_ PM1a_CNT.SLP_TYP value: 0x00000005
\_S3_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 75, \_S3_ correctly returned a sane looking package.

Test 76 of 191: Test _S4_ (S4 System State).
\_S4_ PM1a_CNT.SLP_TYP value: 0x00000006
\_S4_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 76, \_S4_ correctly returned a sane looking package.

Test 77 of 191: Test _S5_ (S5 System State).
\_S5_ PM1a_CNT.SLP_TYP value: 0x00000007
\_S5_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 77, \_S5_ correctly returned a sane looking package.

Test 78 of 191: Test _SWS (System Wake Source).
SKIPPED: Test 78, Skipping test for non-existant object _SWS.

Test 79 of 191: Test _PSS (Performance Supported States).
\_PR_.CPU0._PSS values:
P-State  Freq     Power  Latency   Bus Master
         (MHz)    (mW)    (us)    Latency (us)
   0      1801    17000    10        10
   1      1800    17000    10        10
   2      1700    15798    10        10
   3      1600    14620    10        10
   4      1500    13631    10        10
   5      1400    12499    10        10
   6      1300    11552    10        10
   7      1200    10467    10        10
   8      1100     9560    10        10
   9      1000     8518    10        10
  10       900     7651    10        10
  11       800     6652    10        10
PASSED: Test 79, \_PR_.CPU0._PSS correctly returned a sane looking package.
\_SB_.PCI0.B0D4._PSS values:
P-State  Freq     Power  Latency   Bus Master
         (MHz)    (mW)    (us)    Latency (us)
   0      1801    17000    10        10
   1      1800    17000    10        10
   2      1700    15798    10        10
   3      1600    14620    10        10
   4      1500    13631    10        10
   5      1400    12499    10        10
   6      1300    11552    10        10
   7      1200    10467    10        10
   8      1100     9560    10        10
   9      1000     8518    10        10
  10       900     7651    10        10
  11       800     6652    10        10
PASSED: Test 79, \_SB_.PCI0.B0D4._PSS correctly returned a sane looking package.

Test 80 of 191: Test _CPC (Continuous Performance Control).
SKIPPED: Test 80, Skipping test for non-existant object _CPC.

Test 81 of 191: Test _CSD (C State Dependencies).
SKIPPED: Test 81, Skipping test for non-existant object _CSD.

Test 82 of 191: Test _CST (C States).
SKIPPED: Test 82, Skipping test for non-existant object _CST.

Test 83 of 191: Test _PCT (Performance Control).
PASSED: Test 83, \_PR_.CPU0._PCT correctly returned a sane looking package.

Test 84 of 191: Test _PDL (P-State Depth Limit).
PASSED: Test 84, \_SB_.PCI0.B0D4._PDL correctly returned an integer.

Test 85 of 191: Test _PPC (Performance Present Capabilities).
PASSED: Test 85, \_PR_.CPU0._PPC correctly returned an integer.
PASSED: Test 85, \_SB_.PCI0.B0D4._PPC correctly returned an integer.

Test 86 of 191: Test _PPE (Polling for Platform Error).
SKIPPED: Test 86, Skipping test for non-existant object _PPE.

Test 87 of 191: Test _PSD (Power State Dependencies).
PASSED: Test 87, \_PR_.CPU0._PSD correctly returned a sane looking package.

Test 88 of 191: Test _PTC (Processor Throttling Control).
FAILED [MEDIUM] Method_PTCElementType: Test 88, \_SB_.PCI0.B0D4._PTC package
element 0 was not the expected type 'buffer', was instead type 'integer'.

Test 89 of 191: Test _TDL (T-State Depth Limit).
PASSED: Test 89, \_SB_.PCI0.B0D4._TDL correctly returned an integer.

Test 90 of 191: Test _TPC (Throttling Present Capabilities).
PASSED: Test 90, \_SB_.PCI0.B0D4._TPC correctly returned an integer.

Test 91 of 191: Test _TSD (Throttling State Dependencies).
FAILED [MEDIUM] Method_TSDSubPackageElementCount: Test 91, \_SB_.PCI0.B0D4._TSD
sub-package 0 was expected to have 5 elements, got 1 elements instead.

Test 92 of 191: Test _TSS (Throttling Supported States).
FAILED [MEDIUM] Method_TSSSubPackageElementCount: Test 92, \_SB_.PCI0.B0D4._TSS
sub-package 0 was expected to have 5 elements, got 1 elements instead.

Test 93 of 191: Test _PUR (Processor Utilization Request).
SKIPPED: Test 93, Skipping test for non-existant object _PUR.

Test 94 of 191: Test _MSG (Message).
SKIPPED: Test 94, Skipping test for non-existant object _MSG.

Test 95 of 191: Test _SST (System Status).
SKIPPED: Test 95, Skipping test for non-existant object _SST.

Test 96 of 191: Test _ALC (Ambient Light Colour Chromaticity).
SKIPPED: Test 96, Skipping test for non-existant object _ALC.

Test 97 of 191: Test _ALI (Ambient Light Illuminance).
SKIPPED: Test 97, Skipping test for non-existant object _ALI.

Test 98 of 191: Test _ALT (Ambient Light Temperature).
SKIPPED: Test 98, Skipping test for non-existant object _ALT.

Test 99 of 191: Test _ALP (Ambient Light Polling).
SKIPPED: Test 99, Skipping test for non-existant object _ALP.

Test 100 of 191: Test _ALR (Ambient Light Response).
SKIPPED: Test 100, Skipping test for non-existant object _ALR.

Test 101 of 191: Test _LID (Lid Status).
PASSED: Test 101, \_SB_.LID_._LID correctly returned sane looking value
0x00000001.

Test 102 of 191: Test _GTF (Get Task File).
ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 102, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT0._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.

ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 102, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT1._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.

ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 102, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT2._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.


Test 103 of 191: Test _GTM (Get Timing Mode).
SKIPPED: Test 103, Skipping test for non-existant object _GTM.

Test 104 of 191: Test _MBM (Memory Bandwidth Monitoring Data).
SKIPPED: Test 104, Skipping test for non-existant object _MBM.

Test 105 of 191: Test _UPC (USB Port Capabilities).
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HSP1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HSP2._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HSP3._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.HSP4._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP1._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP2._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP3._UPC correctly returned a sane
looking package.
PASSED: Test 105, \_SB_.PCI0.XHC_.RHUB.SSP4._UPC correctly returned a sane
looking package.

Test 106 of 191: Test _UPD (User Presence Detect).
SKIPPED: Test 106, Skipping test for non-existant object _UPD.

Test 107 of 191: Test _UPP (User Presence Polling).
SKIPPED: Test 107, Skipping test for non-existant object _UPP.

Test 108 of 191: Test _GCP (Get Capabilities).
SKIPPED: Test 108, Skipping test for non-existant object _GCP.

Test 109 of 191: Test _GRT (Get Real Time).
SKIPPED: Test 109, Skipping test for non-existant object _GRT.

Test 110 of 191: Test _GWS (Get Wake Status).
SKIPPED: Test 110, Skipping test for non-existant object _GWS.

Test 111 of 191: Test _CWS (Clear Wake Status).
SKIPPED: Test 111, Skipping test for non-existant object _CWS.

Test 112 of 191: Test _STP (Set Expired Timer Wake Policy).
SKIPPED: Test 112, Skipping test for non-existant object _STP.

Test 113 of 191: Test _STV (Set Timer Value).
SKIPPED: Test 113, Skipping test for non-existant object _STV.

Test 114 of 191: Test _TIP (Expired Timer Wake Policy).
SKIPPED: Test 114, Skipping test for non-existant object _TIP.

Test 115 of 191: Test _TIV (Timer Values).
SKIPPED: Test 115, Skipping test for non-existant object _TIV.

Test 116 of 191: Test _SBS (Smart Battery Subsystem).
SKIPPED: Test 116, Skipping test for non-existant object _SBS.

Test 117 of 191: Test _BCT (Battery Charge Time).
SKIPPED: Test 117, Skipping test for non-existant object _BCT.

Test 118 of 191: Test _BIF (Battery Information).
PASSED: Test 118, \_SB_.PCI0.BAT0._BIF correctly returned a sane looking
package.

Test 119 of 191: Test _BIX (Battery Information Extended).
PASSED: Test 119, \_SB_.PCI0.BAT0._BIX correctly returned a sane looking
package.

Test 120 of 191: Test _BMA (Battery Measurement Averaging).
SKIPPED: Test 120, Skipping test for non-existant object _BMA.

Test 121 of 191: Test _BMC (Battery Maintenance Control).
SKIPPED: Test 121, Skipping test for non-existant object _BMC.

Test 122 of 191: Test _BMD (Battery Maintenance Data).
SKIPPED: Test 122, Skipping test for non-existant object _BMD.

Test 123 of 191: Test _BMS (Battery Measurement Sampling Time).
SKIPPED: Test 123, Skipping test for non-existant object _BMS.

Test 124 of 191: Test _BST (Battery Status).
PASSED: Test 124, \_SB_.PCI0.BAT0._BST correctly returned a sane looking
package.

Test 125 of 191: Test _BTP (Battery Trip Point).
PASSED: Test 125, \_SB_.PCI0.BAT0._BTP returned no values as expected.

PASSED: Test 125, \_SB_.PCI0.BAT0._BTP returned no values as expected.

PASSED: Test 125, \_SB_.PCI0.BAT0._BTP returned no values as expected.

PASSED: Test 125, \_SB_.PCI0.BAT0._BTP returned no values as expected.

PASSED: Test 125, \_SB_.PCI0.BAT0._BTP returned no values as expected.


Test 126 of 191: Test _BTH (Battery Throttle Limit).
SKIPPED: Test 126, Skipping test for non-existant object _BTH.

Test 127 of 191: Test _BTM (Battery Time).
SKIPPED: Test 127, Skipping test for non-existant object _BTM.

Test 128 of 191: Test _PCL (Power Consumer List).
PASSED: Test 128, \_SB_.PCI0.AC0_._PCL returned a sane package of 1 references.
PASSED: Test 128, \_SB_.PCI0.BAT0._PCL returned a sane package of 1 references.

Test 129 of 191: Test _PIF (Power Source Information).
SKIPPED: Test 129, Skipping test for non-existant object _PIF.

Test 130 of 191: Test _PRL (Power Source Redundancy List).
SKIPPED: Test 130, Skipping test for non-existant object _PRL.

Test 131 of 191: Test _PSR (Power Source).
PASSED: Test 131, \_SB_.PCI0.AC0_._PSR correctly returned sane looking value
0x00000000.

Test 132 of 191: Test _GAI (Get Averaging Level).
SKIPPED: Test 132, Skipping test for non-existant object _GAI.

Test 133 of 191: Test _GHL (Get Harware Limit).
SKIPPED: Test 133, Skipping test for non-existant object _GHL.

Test 134 of 191: Test _PMD (Power Meter Devices).
SKIPPED: Test 134, Skipping test for non-existant object _PMD.

Test 135 of 191: Test _PMM (Power Meter Measurement).
SKIPPED: Test 135, Skipping test for non-existant object _PMM.

Test 136 of 191: Test _FIF (Fan Information).
  Package has 4 elements:
    00: INTEGER: 0x00000000
    01: INTEGER: 0x00000001
    02: INTEGER: 0x00000002
    03: INTEGER: 0x00000000
PASSED: Test 136, \_SB_.PCI0.LPCB.EC0_.TFN1._FIF correctly returned a sane
looking package.

Test 137 of 191: Test _FPS (Fan Performance States).
PASSED: Test 137, \_SB_.PCI0.LPCB.EC0_.TFN1._FPS correctly returned a sane
looking package.
PASSED: Test 137, \_SB_.PCI0.LPCB.EC0_.TFN1._FPS correctly returned a sane
looking package.

Test 138 of 191: Test _FSL (Fan Set Level).
PASSED: Test 138, \_SB_.PCI0.LPCB.EC0_.TFN1._FSL returned no values as expected.

Test 139 of 191: Test _FST (Fan Status).
  Package has 3 elements:
    00: INTEGER: 0x00000000
    01: INTEGER: 0xffffffffffffffff
    02: INTEGER: 0xffffffffffffffff
PASSED: Test 139, \_SB_.PCI0.LPCB.EC0_.TFN1._FST correctly returned a sane
looking package.

Test 140 of 191: Test _ACx (Active Cooling).
SKIPPED: Test 140, Skipping test for non-existant object _AC0.

SKIPPED: Test 140, Skipping test for non-existant object _AC1.

SKIPPED: Test 140, Skipping test for non-existant object _AC2.

SKIPPED: Test 140, Skipping test for non-existant object _AC3.

SKIPPED: Test 140, Skipping test for non-existant object _AC4.

SKIPPED: Test 140, Skipping test for non-existant object _AC5.

SKIPPED: Test 140, Skipping test for non-existant object _AC6.

SKIPPED: Test 140, Skipping test for non-existant object _AC7.

SKIPPED: Test 140, Skipping test for non-existant object _AC8.

SKIPPED: Test 140, Skipping test for non-existant object _AC9.


Test 141 of 191: Test _ART (Active Cooling Relationship Table).
SKIPPED: Test 141, Skipping test for non-existant object _ART.

Test 142 of 191: Test _CRT (Critical Trip Point).
PASSED: Test 142, \_TZ_.THRM._CRT correctly returned a sane looking return type.

Test 143 of 191: Test _CR3 (Warm/Standby Temperature).
SKIPPED: Test 143, Skipping test for non-existant object _CR3.

Test 144 of 191: Test _DTI (Device Temperature Indication).
PASSED: Test 144, \_SB_.PCI0.B0D4._DTI returned no values as expected.
PASSED: Test 144, \_SB_.PCI0.TMEM._DTI returned no values as expected.
PASSED: Test 144, \_SB_.PCI0.TPCH._DTI returned no values as expected.

Test 145 of 191: Test _HOT (Hot Temperature).
SKIPPED: Test 145, Skipping test for non-existant object _HOT.

Test 146 of 191: Test _MTL (Minimum Throttle Limit).
SKIPPED: Test 146, Skipping test for non-existant object _MTL.

Test 147 of 191: Test _NTT (Notification Temp Threshold).
PASSED: Test 147, _NTT correctly returned sane looking value 0x00000ade (278.2
degrees K)
PASSED: Test 147, _NTT correctly returned sane looking value 0x00000ade (278.2
degrees K)
PASSED: Test 147, _NTT correctly returned sane looking value 0x00000ade (278.2
degrees K)

Test 148 of 191: Test _PSL (Passive List).
PASSED: Test 148, \_TZ_.THRM._PSL correctly returned a sane looking package.

Test 149 of 191: Test _PSV (Passive Temp).
PASSED: Test 149, \_TZ_.THRM._PSV correctly returned a sane looking return type.

Test 150 of 191: Test _RTV (Relative Temp Values).
SKIPPED: Test 150, Skipping test for non-existant object _RTV.

Test 151 of 191: Test _SCP (Set Cooling Policy).
PASSED: Test 151, \_SB_.PCI0.B0D4._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TMEM._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TPCH._DTI returned no values as expected.

PASSED: Test 151, \_SB_.PCI0.B0D4._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TMEM._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TPCH._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.B0D4._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TMEM._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TPCH._DTI returned no values as expected.

PASSED: Test 151, \_SB_.PCI0.B0D4._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TMEM._DTI returned no values as expected.
PASSED: Test 151, \_SB_.PCI0.TPCH._DTI returned no values as expected.

Test 152 of 191: Test _TC1 (Thermal Constant 1).
PASSED: Test 152, _TC1 correctly returned sane looking value 0x00000002.

Test 153 of 191: Test _TC2 (Thermal Constant 2).
PASSED: Test 153, _TC1 correctly returned sane looking value 0x0000000a.

Test 154 of 191: Test _TFP (Thermal fast Sampling Period).
SKIPPED: Test 154, Skipping test for non-existant object _TFP.

Test 155 of 191: Test _TMP (Thermal Zone Current Temp).
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, _TMP correctly returned sane looking value 0x00000bb8 (300.0
degrees K)
PASSED: Test 155, \_TZ_.THRM._TMP correctly returned a sane looking return type.

Test 156 of 191: Test _TPT (Trip Point Temperature).
SKIPPED: Test 156, Skipping test for non-existant object _TPT.

Test 157 of 191: Test _TRT (Thermal Relationship Table).
SKIPPED: Test 157, Skipping test for non-existant object _TRT.

Test 158 of 191: Test _TSN (Thermal Sensor Device).
SKIPPED: Test 158, Skipping test for non-existant object _TSN.

Test 159 of 191: Test _TSP (Thermal Sampling Period).
PASSED: Test 159, _TSP correctly returned sane looking value 10.000000 seconds

Test 160 of 191: Test _TST (Temperature Sensor Threshold).
SKIPPED: Test 160, Skipping test for non-existant object _TST.

Test 161 of 191: Test _TZD (Thermal Zone Devices).
SKIPPED: Test 161, Skipping test for non-existant object _TZD.

Test 162 of 191: Test _TZM (Thermal Zone member).
SKIPPED: Test 162, Skipping test for non-existant object _TZM.

Test 163 of 191: Test _TZP (Thermal Zone Polling).
SKIPPED: Test 163, Skipping test for non-existant object _TZP.

Test 164 of 191: Test _GPE (General Purpose Events).
PASSED: Test 164, \_SB_.PCI0.LPCB.EC0_._GPE returned an integer 0x00000019

Test 165 of 191: Test _EC (EC Offset Query).
SKIPPED: Test 165, Skipping test for non-existant object _EC.

Test 166 of 191: Test _PTS (Prepare to Sleep).
Test _PTS(1).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 166, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(2).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 166, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(3).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 166, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(4).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 166, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(5).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 166, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.



Test 167 of 191: Test _TTS (Transition to State).
SKIPPED: Test 167, Optional control method _TTS does not exist.

Test 168 of 191: Test _S0 (System S0 State).
SKIPPED: Test 168, Skipping test for non-existant object _S0.

Test 169 of 191: Test _S1 (System S1 State).
SKIPPED: Test 169, Skipping test for non-existant object _S1.

Test 170 of 191: Test _S2 (System S2 State).
SKIPPED: Test 170, Skipping test for non-existant object _S2.

Test 171 of 191: Test _S3 (System S3 State).
SKIPPED: Test 171, Skipping test for non-existant object _S3.

Test 172 of 191: Test _S4 (System S4 State).
SKIPPED: Test 172, Skipping test for non-existant object _S4.

Test 173 of 191: Test _S5 (System S5 State).
SKIPPED: Test 173, Skipping test for non-existant object _S5.

Test 174 of 191: Test _WAK (System Wake).
Test _WAK(1) System Wake, State S1.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 174, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(2) System Wake, State S2.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 174, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(3) System Wake, State S3.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 174, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(4) System Wake, State S4.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 174, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(5) System Wake, State S5.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WTSB
WARNING: Test 174, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.



Test 175 of 191: Test _ADR (Return Unique ID for Device).
PASSED: Test 175, \_SB_.PCI0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.P0P1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.B0D4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG0.PEGP._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.PEG3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.USB1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.USB2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.USB3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.USB4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2.DCAM._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._ADR correctly returned an
integer.
PASSED: Test 175, \_SB_.PCI0.USB5._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.USB6._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.USB7._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.HDEF._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP03._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP05._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP06._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP07._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP08._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.LPCB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.IDE0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.IDE0.PRT0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.IDE0.PRT1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.IDE0.PRT2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.IDE1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.SBUS._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD01._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.LCDD._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD03._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD04._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD05._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD06._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD07._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.GFX0.DD08._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP02._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP02.WLAN._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP04._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.RP04.GLAN._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HSP1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HSP2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HSP3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.HSP4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP1._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP2._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP3._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.XHC_.RHUB.SSP4._ADR correctly returned an integer.
PASSED: Test 175, \_SB_.PCI0.TPCH._ADR correctly returned an integer.

Test 176 of 191: Test _BCL (Query List of Brightness Control Levels Supported).
Brightness level 100 (index 2) is greater than brightness level 99 (index 3u),
should be in ascending order.
Brightness level 99 (index 3) is greater than brightness level 98 (index 4u),
should be in ascending order.
Brightness level 98 (index 4) is greater than brightness level 97 (index 5u),
should be in ascending order.
Brightness level 97 (index 5) is greater than brightness level 96 (index 6u),
should be in ascending order.
Brightness level 96 (index 6) is greater than brightness level 95 (index 7u),
should be in ascending order.
Brightness level 95 (index 7) is greater than brightness level 94 (index 8u),
should be in ascending order.
Brightness level 94 (index 8) is greater than brightness level 93 (index 9u),
should be in ascending order.
Brightness level 93 (index 9) is greater than brightness level 92 (index 10u),
should be in ascending order.
Brightness level 92 (index 10) is greater than brightness level 91 (index 11u),
should be in ascending order.
Brightness level 91 (index 11) is greater than brightness level 90 (index 12u),
should be in ascending order.
Brightness level 90 (index 12) is greater than brightness level 89 (index 13u),
should be in ascending order.
Brightness level 89 (index 13) is greater than brightness level 88 (index 14u),
should be in ascending order.
Brightness level 88 (index 14) is greater than brightness level 87 (index 15u),
should be in ascending order.
Brightness level 87 (index 15) is greater than brightness level 86 (index 16u),
should be in ascending order.
Brightness level 86 (index 16) is greater than brightness level 85 (index 17u),
should be in ascending order.
Brightness level 85 (index 17) is greater than brightness level 84 (index 18u),
should be in ascending order.
Brightness level 84 (index 18) is greater than brightness level 83 (index 19u),
should be in ascending order.
Brightness level 83 (index 19) is greater than brightness level 82 (index 20u),
should be in ascending order.
Brightness level 82 (index 20) is greater than brightness level 81 (index 21u),
should be in ascending order.
Brightness level 81 (index 21) is greater than brightness level 80 (index 22u),
should be in ascending order.
Brightness level 80 (index 22) is greater than brightness level 79 (index 23u),
should be in ascending order.
Brightness level 79 (index 23) is greater than brightness level 78 (index 24u),
should be in ascending order.
Brightness level 78 (index 24) is greater than brightness level 77 (index 25u),
should be in ascending order.
Brightness level 77 (index 25) is greater than brightness level 76 (index 26u),
should be in ascending order.
Brightness level 76 (index 26) is greater than brightness level 75 (index 27u),
should be in ascending order.
Brightness level 75 (index 27) is greater than brightness level 74 (index 28u),
should be in ascending order.
Brightness level 74 (index 28) is greater than brightness level 73 (index 29u),
should be in ascending order.
Brightness level 73 (index 29) is greater than brightness level 72 (index 30u),
should be in ascending order.
Brightness level 72 (index 30) is greater than brightness level 71 (index 31u),
should be in ascending order.
Brightness level 71 (index 31) is greater than brightness level 70 (index 32u),
should be in ascending order.
Brightness level 70 (index 32) is greater than brightness level 69 (index 33u),
should be in ascending order.
Brightness level 69 (index 33) is greater than brightness level 68 (index 34u),
should be in ascending order.
Brightness level 68 (index 34) is greater than brightness level 67 (index 35u),
should be in ascending order.
Brightness level 67 (index 35) is greater than brightness level 66 (index 36u),
should be in ascending order.
Brightness level 66 (index 36) is greater than brightness level 65 (index 37u),
should be in ascending order.
Brightness level 65 (index 37) is greater than brightness level 64 (index 38u),
should be in ascending order.
Brightness level 64 (index 38) is greater than brightness level 63 (index 39u),
should be in ascending order.
Brightness level 63 (index 39) is greater than brightness level 62 (index 40u),
should be in ascending order.
Brightness level 62 (index 40) is greater than brightness level 61 (index 41u),
should be in ascending order.
Brightness level 61 (index 41) is greater than brightness level 60 (index 42u),
should be in ascending order.
Brightness level 60 (index 42) is greater than brightness level 59 (index 43u),
should be in ascending order.
Brightness level 59 (index 43) is greater than brightness level 58 (index 44u),
should be in ascending order.
Brightness level 58 (index 44) is greater than brightness level 57 (index 45u),
should be in ascending order.
Brightness level 57 (index 45) is greater than brightness level 56 (index 46u),
should be in ascending order.
Brightness level 56 (index 46) is greater than brightness level 55 (index 47u),
should be in ascending order.
Brightness level 55 (index 47) is greater than brightness level 54 (index 48u),
should be in ascending order.
Brightness level 54 (index 48) is greater than brightness level 53 (index 49u),
should be in ascending order.
Brightness level 53 (index 49) is greater than brightness level 52 (index 50u),
should be in ascending order.
Brightness level 52 (index 50) is greater than brightness level 51 (index 51u),
should be in ascending order.
Brightness level 51 (index 51) is greater than brightness level 50 (index 52u),
should be in ascending order.
Brightness level 50 (index 52) is greater than brightness level 49 (index 53u),
should be in ascending order.
Brightness level 49 (index 53) is greater than brightness level 48 (index 54u),
should be in ascending order.
Brightness level 48 (index 54) is greater than brightness level 47 (index 55u),
should be in ascending order.
Brightness level 47 (index 55) is greater than brightness level 46 (index 56u),
should be in ascending order.
Brightness level 46 (index 56) is greater than brightness level 45 (index 57u),
should be in ascending order.
Brightness level 45 (index 57) is greater than brightness level 44 (index 58u),
should be in ascending order.
Brightness level 44 (index 58) is greater than brightness level 43 (index 59u),
should be in ascending order.
Brightness level 43 (index 59) is greater than brightness level 42 (index 60u),
should be in ascending order.
Brightness level 42 (index 60) is greater than brightness level 41 (index 61u),
should be in ascending order.
Brightness level 41 (index 61) is greater than brightness level 40 (index 62u),
should be in ascending order.
Brightness level 40 (index 62) is greater than brightness level 39 (index 63u),
should be in ascending order.
Brightness level 39 (index 63) is greater than brightness level 38 (index 64u),
should be in ascending order.
Brightness level 38 (index 64) is greater than brightness level 37 (index 65u),
should be in ascending order.
Brightness level 37 (index 65) is greater than brightness level 36 (index 66u),
should be in ascending order.
Brightness level 36 (index 66) is greater than brightness level 35 (index 67u),
should be in ascending order.
Brightness level 35 (index 67) is greater than brightness level 34 (index 68u),
should be in ascending order.
Brightness level 34 (index 68) is greater than brightness level 33 (index 69u),
should be in ascending order.
Brightness level 33 (index 69) is greater than brightness level 32 (index 70u),
should be in ascending order.
Brightness level 32 (index 70) is greater than brightness level 31 (index 71u),
should be in ascending order.
Brightness level 31 (index 71) is greater than brightness level 30 (index 72u),
should be in ascending order.
Brightness level 30 (index 72) is greater than brightness level 29 (index 73u),
should be in ascending order.
Brightness level 29 (index 73) is greater than brightness level 28 (index 74u),
should be in ascending order.
Brightness level 28 (index 74) is greater than brightness level 27 (index 75u),
should be in ascending order.
Brightness level 27 (index 75) is greater than brightness level 26 (index 76u),
should be in ascending order.
Brightness level 26 (index 76) is greater than brightness level 25 (index 77u),
should be in ascending order.
Brightness level 25 (index 77) is greater than brightness level 24 (index 78u),
should be in ascending order.
Brightness level 24 (index 78) is greater than brightness level 23 (index 79u),
should be in ascending order.
Brightness level 23 (index 79) is greater than brightness level 22 (index 80u),
should be in ascending order.
Brightness level 22 (index 80) is greater than brightness level 21 (index 81u),
should be in ascending order.
Brightness level 21 (index 81) is greater than brightness level 20 (index 82u),
should be in ascending order.
Brightness level 20 (index 82) is greater than brightness level 19 (index 83u),
should be in ascending order.
Brightness level 19 (index 83) is greater than brightness level 18 (index 84u),
should be in ascending order.
Brightness level 18 (index 84) is greater than brightness level 17 (index 85u),
should be in ascending order.
Brightness level 17 (index 85) is greater than brightness level 16 (index 86u),
should be in ascending order.
Brightness level 16 (index 86) is greater than brightness level 15 (index 87u),
should be in ascending order.
Brightness level 15 (index 87) is greater than brightness level 14 (index 88u),
should be in ascending order.
Brightness level 14 (index 88) is greater than brightness level 13 (index 89u),
should be in ascending order.
Brightness level 13 (index 89) is greater than brightness level 12 (index 90u),
should be in ascending order.
Brightness level 12 (index 90) is greater than brightness level 11 (index 91u),
should be in ascending order.
Brightness level 11 (index 91) is greater than brightness level 10 (index 92u),
should be in ascending order.
Brightness level 10 (index 92) is greater than brightness level 9 (index 93u),
should be in ascending order.
Brightness level 9 (index 93) is greater than brightness level 8 (index 94u),
should be in ascending order.
Brightness level 8 (index 94) is greater than brightness level 7 (index 95u),
should be in ascending order.
Brightness level 7 (index 95) is greater than brightness level 6 (index 96u),
should be in ascending order.
Brightness level 6 (index 96) is greater than brightness level 5 (index 97u),
should be in ascending order.
Brightness level 5 (index 97) is greater than brightness level 4 (index 98u),
should be in ascending order.
Brightness level 4 (index 98) is greater than brightness level 3 (index 99u),
should be in ascending order.
Brightness level 3 (index 99) is greater than brightness level 2 (index 100u),
should be in ascending order.
Brightness level 2 (index 100) is greater than brightness level 1 (index 101u),
should be in ascending order.
Brightness level 1 (index 101) is greater than brightness level 0 (index 102u),
should be in ascending order.
FAILED [MEDIUM] Method_BCLAscendingOrder: Test 176, Some or all of the
brightness level are not in ascending order which should be fixed in the
firmware.
Brightness levels for \_SB_.PCI0.GFX0.LCDD._BCL:
  Level on full power   : 100
  Level on battery power: 40
  Brightness Levels     : 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

ADVICE: \_SB_.PCI0.GFX0.LCDD._BCL seems to be misconfigured and is returning
incorrect brightness levels.It is worth sanity checking this with the firmware
test suite interactive test 'brightness' to see how broken this is. As it is,
_BCL is broken and needs to be fixed.


Test 177 of 191: Test _BCM (Set Brightness Level).
PASSED: Test 177, \_SB_.PCI0.GFX0.LCDD._BCM returned no values as expected.

Test 178 of 191: Test _BQC (Brightness Query Current Level).
PASSED: Test 178, \_SB_.PCI0.GFX0.LCDD._BQC correctly returned an integer.

Test 179 of 191: Test _DCS (Return the Status of Output Device).
PASSED: Test 179, \_SB_.PCI0.GFX0.DD01._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.LCDD._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD03._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD04._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD05._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD06._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD07._DCS correctly returned an integer.
PASSED: Test 179, \_SB_.PCI0.GFX0.DD08._DCS correctly returned an integer.

Test 180 of 191: Test _DDC (Return the EDID for this Device).
SKIPPED: Test 180, Skipping test for non-existant object _DDC.

Test 181 of 191: Test _DSS (Device Set State).
PASSED: Test 181, \_SB_.PCI0.GFX0.DD01._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.LCDD._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD03._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD04._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD05._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD06._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD07._DSS returned no values as expected.
PASSED: Test 181, \_SB_.PCI0.GFX0.DD08._DSS returned no values as expected.

Test 182 of 191: Test _DGS (Query Graphics State).
PASSED: Test 182, \_SB_.PCI0.GFX0.DD01._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.LCDD._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD03._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD04._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD05._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD06._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD07._DGS correctly returned an integer.
PASSED: Test 182, \_SB_.PCI0.GFX0.DD08._DGS correctly returned an integer.

Test 183 of 191: Test _DOD (Enumerate All Devices Attached to Display Adapter).
Device 0:
  Instance:                0
  Display port attachment: 0
  Type of display:         4 (Internal/Integrated Digital Flat Panel)
  BIOS can detect device:  0
  Non-VGA device:          0
  Head or pipe ID:         0
PASSED: Test 183, \_SB_.PCI0.GFX0._DOD correctly returned a sane looking
package.

Test 184 of 191: Test _DOS (Enable/Disable Output Switching).
PASSED: Test 184, \_SB_.PCI0.GFX0._DOS returned no values as expected.

Test 185 of 191: Test _GPD (Get POST Device).
SKIPPED: Test 185, Skipping test for non-existant object _GPD.

Test 186 of 191: Test _ROM (Get ROM Data).
SKIPPED: Test 186, Skipping test for non-existant object _ROM.

Test 187 of 191: Test _SPD (Set POST Device).
SKIPPED: Test 187, Skipping test for non-existant object _SPD.

Test 188 of 191: Test _VPO (Video POST Options).
SKIPPED: Test 188, Skipping test for non-existant object _VPO.

Test 189 of 191: Test _CBA (Configuration Base Address).
SKIPPED: Test 189, Skipping test for non-existant object _CBA.

Test 190 of 191: Test _IFT (IPMI Interface Type).
SKIPPED: Test 190, Skipping test for non-existant object _IFT.

Test 191 of 191: Test _SRV (IPMI Interface Revision).
SKIPPED: Test 191, Skipping test for non-existant object _SRV.

================================================================================
390 passed, 7 failed, 10 warnings, 0 aborted, 134 skipped, 0 info only.
================================================================================

msdm: MSDM Microsoft Data Management Table test.
--------------------------------------------------------------------------------
Test 1 of 1: MSDM Microsoft Data Management Table test.
  Reserved:                 0x00000000
  Data Type:                0x00000001
  Data Reserved:            0x00000000
  Data Length:              0x0000001d
  Data:                     'P9TNR-XVT4M-P3Q8J-CG837-FJMQ6'
MSDM has had minimal check due to proprietary nature of the table
PASSED: Test 1, No issues found in MSDM table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mchi: MCHI Management Controller Host Interface Table test.
--------------------------------------------------------------------------------
ACPI MCHI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

mcfg: MCFG PCI Express* memory mapped config space test.
--------------------------------------------------------------------------------
Test 1 of 2: Validate MCFG table.
This test tries to validate the MCFG table by comparing the first 16 bytes in
the MMIO mapped config space with the 'traditional' config space of the first
PCI device (root bridge). The MCFG data is only trusted if it is marked reserved
in the UEFI run-time service memory map

Memory Map Layout
-----------------
0x0000000000000000 - 0x000000000009dfff (System RAM)
0x000000000009e000 - 0x000000000009ffff (reserved)
0x0000000000100000 - 0x000000001fffffff (System RAM)
0x0000000020000000 - 0x00000000201fffff (reserved)
0x0000000020200000 - 0x0000000040003fff (System RAM)
0x0000000040004000 - 0x0000000040004fff (reserved)
0x0000000040005000 - 0x00000000d9749fff (System RAM)
0x00000000d974a000 - 0x00000000d9d4afff (ACPI Non-volatile Storage)
0x00000000d9d4b000 - 0x00000000d9d4dfff (reserved)
0x00000000d9d4e000 - 0x00000000d9d63fff (System RAM)
0x00000000d9d64000 - 0x00000000d9d69fff (reserved)
0x00000000d9d6a000 - 0x00000000d9d6bfff (System RAM)
0x00000000d9d6c000 - 0x00000000d9d79fff (reserved)
0x00000000d9d7a000 - 0x00000000d9f0ffff (System RAM)
0x00000000d9f10000 - 0x00000000d9f13fff (reserved)
0x00000000d9f14000 - 0x00000000d9f5cfff (System RAM)
0x00000000d9f5d000 - 0x00000000d9f63fff (reserved)
0x00000000d9f64000 - 0x00000000d9f65fff (System RAM)
0x00000000d9f66000 - 0x00000000d9f72fff (reserved)
0x00000000d9f73000 - 0x00000000d9f84fff (reserved)
0x00000000d9f85000 - 0x00000000d9f87fff (System RAM)
0x00000000d9f88000 - 0x00000000d9f89fff (reserved)
0x00000000d9f8a000 - 0x00000000d9fa0fff (System RAM)
0x00000000d9fa1000 - 0x00000000d9fa6fff (reserved)
0x00000000d9fa7000 - 0x00000000d9faefff (System RAM)
0x00000000d9faf000 - 0x00000000d9faffff (reserved)
0x00000000d9fb0000 - 0x00000000d9fbefff (System RAM)
0x00000000d9fbf000 - 0x00000000d9fbffff (reserved)
0x00000000d9fc0000 - 0x00000000d9fcafff (System RAM)
0x00000000d9fcb000 - 0x00000000d9fcffff (reserved)
0x00000000d9fd0000 - 0x00000000d9feefff (System RAM)
0x00000000d9fef000 - 0x00000000d9ff0fff (reserved)
0x00000000d9ff1000 - 0x00000000d9ffdfff (System RAM)
0x00000000d9ffe000 - 0x00000000d9ffefff (reserved)
0x00000000d9fff000 - 0x00000000da010fff (System RAM)
0x00000000da011000 - 0x00000000da037fff (reserved)
0x00000000da038000 - 0x00000000da04dfff (System RAM)
0x00000000da04e000 - 0x00000000da04efff (reserved)
0x00000000da04f000 - 0x00000000da04ffff (System RAM)
0x00000000da050000 - 0x00000000da051fff (reserved)
0x00000000da052000 - 0x00000000da052fff (System RAM)
0x00000000da053000 - 0x00000000da057fff (reserved)
0x00000000da058000 - 0x00000000da06cfff (System RAM)
0x00000000da06d000 - 0x00000000da0edfff (reserved)
0x00000000da0ee000 - 0x00000000da108fff (reserved)
0x00000000da109000 - 0x00000000da632fff (reserved)
0x00000000da633000 - 0x00000000da8b2fff (ACPI Non-volatile Storage)
0x00000000da8b3000 - 0x00000000da8b7fff (ACPI Non-volatile Storage)
0x00000000da8b8000 - 0x00000000da8b8fff (System RAM)
0x00000000da8b9000 - 0x00000000da8fbfff (ACPI Non-volatile Storage)
0x00000000da8fc000 - 0x00000000dad08fff (System RAM)
0x00000000dad09000 - 0x00000000daff3fff (reserved)
0x00000000daff4000 - 0x00000000daffffff (System RAM)
0x00000000dbc00000 - 0x00000000dfdfffff (reserved)
0x00000000f8000000 - 0x00000000fbffffff (reserved)
0x00000000fec00000 - 0x00000000fec00fff (reserved)
0x00000000fed00000 - 0x00000000fed03fff (reserved)
0x00000000fed1c000 - 0x00000000fed1ffff (reserved)
0x00000000fee00000 - 0x00000000fee00fff (reserved)
0x00000000ff000000 - 0x00000000ffffffff (reserved)
0x0000000100000000 - 0x000000011f1fffff (System RAM)

MCFG table found, size is 16 bytes (excluding header) (1 entries).
Configuration Entry #0:
  Base Address  : 0xf8000000
  Segment       : 0
  Start bus     : 0
  End bus       : 63
PASSED: Test 1, MCFG MMIO config space is reserved in memory map table.

Test 2 of 2: Validate MCFG PCI config space.
PASSED: Test 2, PCI config space verified.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

madt: MADT Multiple APIC Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: MADT Multiple APIC Description Table test.
PASSED: Test 1, No issues found in MADT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

lpit: LPIT Low Power Idle Table test.
--------------------------------------------------------------------------------
ACPI LPIT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

iort: IORT IO Remapping Table test.
--------------------------------------------------------------------------------
ACPI IORT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

hpet: HPET IA-PC High Precision Event Timer Table tests.
--------------------------------------------------------------------------------
Test 1 of 4: Test HPET base in kernel log.
This test checks the HPET PCI BAR for each timer block in the timer. The base
address is passed by the firmware via an ACPI table. IRQ routing and
initialization is also verified by the test.
PASSED: Test 1, Found HPET base 0xfed00000 in kernel log.

Test 2 of 4: Test HPET base in HPET table.
Hardware ID of Event Block:
  PCI Vendor ID              : 0x8086
  Legacy IRQ Routing Capable : 1
  COUNT_SIZE_CAP counter size: 1
  Number of comparitors      : 7
  Hardwre Revision ID        : 0x1
Lower 32 bit base Address    : 0xfed00000
  Address Space ID           : 0x0
  Register Bit Width         : 0x40
  Register Bit Offset        : 0x0
  Address Width              : 0x0
HPET sequence number         : 0x0
Minimum clock tick           : 0x37ee
Page Protection              : 0x0 (No guaranteed protection)
OEM attributes               : 0x0
PASSED: Test 2, HPET looks sane.

Test 3 of 4: Test HPET base in DSDT and/or SSDT.
PASSED: Test 3, HPET base matches that between DSDT and the kernel (0xfed00000).

Test 4 of 4: Test HPET configuration.
PASSED: Test 4, Vendor ID looks sane: 0x8086.
PASSED: Test 4, Valid clock period 69841279.

================================================================================
5 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

hest: HEST Hardware Error Source Table test.
--------------------------------------------------------------------------------
ACPI HEST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

gtdt: GTDT Generic Timer Description Table test.
--------------------------------------------------------------------------------
ACPI GTDT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

fpdt: FPDT Firmware Performance Data Table test.
--------------------------------------------------------------------------------
Test 1 of 1: FPDT Firmware Performance Data Table test.
  S3 Performance Table Pointer Record:
    Perf Rec Type:	0x0001
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    S3PT Pointer:	0x00000000da11c018
Note: currently fwts does not check S3PT validity and the associated data
    Firmware Basic Boot Performance Pointer Record:
    Perf Rec Type:	0x0000
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    FBPT Pointer:	0x00000000da11c038
Note: currently fwts does not check FBPT validity and the associated data
PASSED: Test 1, No issues found in FPDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fan: Simple fan tests.
--------------------------------------------------------------------------------
Test 1 of 2: Test fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
FAILED [MEDIUM] NoFanCurState: Test 1, Fan present but has no cur_state present.
FAILED [MEDIUM] NoFanCurState: Test 1, Fan present but has no cur_state present.
PASSED: Test 1, Fan cooling_device1 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device2 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device3 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device4 of type Processor has max cooling state 3
and current cooling state 0.
FAILED [MEDIUM] NoFanCurState: Test 1, Fan present but has no cur_state present.

Test 2 of 2: Load system, check CPU fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
FAILED [MEDIUM] NoFanCurState: Test 2, Fan present but has no cur_state present.
Loading CPUs for 20 seconds to try and get fan speeds to change.
FAILED [MEDIUM] NoFanCurState: Test 2, Fan present but has no cur_state present.
Fan cooling_device1 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device2 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device3 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device4 current state did not change from value 0 while CPUs were
busy.

ADVICE: Did not detect any change in the CPU related thermal cooling device
states. It could be that the devices are returning static information back to
the driver and/or the fan speed is automatically being controlled by firmware
using System Management Mode in which case the kernel interfaces being examined
may not work anyway.


================================================================================
4 passed, 5 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fadt: FADT Fixed ACPI Description Table tests.
--------------------------------------------------------------------------------
Test 1 of 3: Test FADT ACPI Description Table tests.
PASSED: Test 1, No issues found in FADT table.

Test 2 of 3: Test FADT SCI_EN bit is enabled.
FADT Preferred PM Profile: 2 (Mobile) 
FADT is greater than ACPI version 1.0
PASSED: Test 2, SCI_EN bit in PM1a Control Register Block is enabled.

Test 3 of 3: Test FADT reset register.
PASSED: Test 3, FADT reset register width is 8 bits wide as expected.
PASSED: Test 3, FADT register bit offset is 0 as expected.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

facs: FACS Firmware ACPI Control Structure test.
--------------------------------------------------------------------------------
Test 1 of 1: FACS Firmware ACPI Control Structure test.
FACS Firmware ACPI Control Structure:
  Signature:                'FACS'
  Length:                   0x00000040
  Hardware Signature:       0x00000000
  Firmware Waking Vector:   0x00000000
  Global Lock:              0x00000000
  Flags:                    0x00000000
  X-Firmware Waking Vector: 0x0000000000000000
  Version:                  0x02
  Reserved:                 0x00 0x00 0x00
  OSPM Flags:               0x00000000
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
PASSED: Test 1, No issues found in FACS table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

erst: ERST Error Record Serialization Table test.
--------------------------------------------------------------------------------
ACPI ERST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

ecdt: ECDT Embedded Controller Boot Resources Table test.
--------------------------------------------------------------------------------
Test 1 of 1: ECDT Embedded Controller Boot Resources Table test.
ECDT Embedded Controller Boot Resources Table:
  EC_CONTROL:
    Address Space ID:       0x01
    Register Bit Width      0x08
    Register Bit Offset     0x00
    Access Size             0x00
    Address                 0x0000000000000066
  EC_DATA:
    Address Space ID:       0x01
    Register Bit Width      0x08
    Register Bit Offset     0x00
    Access Size             0x00
    Address                 0x0000000000000062
  UID:                      0x00000000
  GPE_BIT:                  0x19
  EC_ID:                    '\_SB.PCI0.LPCB.EC0'

FAILED [MEDIUM] ECDTEvalUidFailed: Test 1, Failed to evaluate ECDT UID
\_SB.PCI0.LPCB.EC0._UID, cannot check UID
PASSED: Test 1, No issues found in ECDT table.

================================================================================
1 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

dmar: DMA Remapping (VT-d) test.
--------------------------------------------------------------------------------
Test 1 of 1: DMA Remapping test.
SKIPPED: Test 1, No DMAR table. This is not necessarily a failure as most
systems do not have this table.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dbg2: DBG2 (Debug Port Table 2) test.
--------------------------------------------------------------------------------
ACPI DBG2 table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dbgp: DBGP (Debug Port) Table test.
--------------------------------------------------------------------------------
ACPI DBGP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cstates: Processor C state support test.
--------------------------------------------------------------------------------
Test 1 of 1: Test all CPUs C-states.
This test checks if all processors have the same number of C-states, if the
C-state counter works and if C-state transitions happen.
Processor 0 has not reached C1 C3 C6 during tests. This is not a failure,
however it is not a complete and thorough test.
Processor 1 has not reached C1 C3 C6 during tests. This is not a failure,
however it is not a complete and thorough test.
PASSED: Test 1, Processor 1 has the same number of C-states as processor 0
Processor 2 has not reached C3 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
PASSED: Test 1, Processor 2 has the same number of C-states as processor 0
Processor 3 has not reached C3 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
PASSED: Test 1, Processor 3 has the same number of C-states as processor 0

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

csrt: CSRT Core System Resource Table test.
--------------------------------------------------------------------------------
ACPI CSRT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cpep: CPEP Corrected Platform Error Polling Table test.
--------------------------------------------------------------------------------
ACPI CPEP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

checksum: ACPI table checksum test.
--------------------------------------------------------------------------------
Test 1 of 1: ACPI table checksum test.
PASSED: Test 1, Table RSDP has correct checksum 0xeb.
PASSED: Test 1, Table RSDP has correct extended checksum 0x7a.
PASSED: Test 1, Table XSDT has correct checksum 0x68
PASSED: Test 1, Table DSDT has correct checksum 0xfd
PASSED: Test 1, Table FACP has correct checksum 0xf2
PASSED: Test 1, Table APIC has correct checksum 0xcf
PASSED: Test 1, Table FPDT has correct checksum 0x4d
PASSED: Test 1, Table ECDT has correct checksum 0xf6
PASSED: Test 1, Table MCFG has correct checksum 0x32
PASSED: Test 1, Table SSDT has correct checksum 0x83
PASSED: Test 1, Table SSDT has correct checksum 0xc3
PASSED: Test 1, Table SSDT has correct checksum 0xb3
PASSED: Test 1, Table SSDT has correct checksum 0xee
PASSED: Test 1, Table HPET has correct checksum 0x3f
PASSED: Test 1, Table SSDT has correct checksum 0xee
PASSED: Test 1, Table SSDT has correct checksum 0xe7
PASSED: Test 1, Table SSDT has correct checksum 0x3e
PASSED: Test 1, Table SSDT has correct checksum 0xa5
PASSED: Test 1, Table BGRT has correct checksum 0x73
PASSED: Test 1, Table SSDT has correct checksum 0x52
PASSED: Test 1, Table MSDM has correct checksum 0x46
PASSED: Test 1, Table RSDT has correct checksum 0x23
PASSED: Test 1, Table FACP has correct checksum 0x92

================================================================================
23 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

autobrightness: Automated LCD brightness test.
--------------------------------------------------------------------------------
Test 1 of 2: Test for maximum and actual brightness.
PASSED: Test 1, Maximum brightness for intel_backlight is 4882 which is sane.
PASSED: Test 1, Actual brightness for intel_backlight is 4882 which is in range
0..4882.

Test 2 of 2: Change actual brightness.
PASSED: Test 2, Actual brightness matches the brightnesss level for all 4882
levels for backlight intel_backlight.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

boot: BOOT Table test.
--------------------------------------------------------------------------------
ACPI BOOT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bgrt: BGRT Boot Graphics Resource Table test.
--------------------------------------------------------------------------------
Test 1 of 1: BGRT Boot Graphics Resource Table test.
BGRT Boot Graphics Resource Table:
  Version:                  0x0001
  Status:                   0x00
  Image Type:               0x00
  Image Memory Address:     0x00000000d8350018
  Image Offset X:           0x0000020e
  Image Offset Y:           0x00000133
PASSED: Test 1, No issues found in BGRT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

bert: BERT Boot Error Record Table test.
--------------------------------------------------------------------------------
ACPI BERT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

aspt: ASPT Table test.
--------------------------------------------------------------------------------
ACPI ASPT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

asf: ASF! Alert Standard Format Table test.
--------------------------------------------------------------------------------
ACPI ASF! table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

apicinstance: Test for single instance of APIC/MADT table.
--------------------------------------------------------------------------------
Test 1 of 1: Test for single instance of APIC/MADT table.
Found APIC/MADT table APIC @ da8985f8, length 0x114 
PASSED: Test 1, Found 1 APIC/MADT table(s), as expected.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

acpitables: ACPI table headers sanity tests.
--------------------------------------------------------------------------------
Test 1 of 1: Test ACPI headers.
PASSED: Test 1, Table XSDT has valid signature and ID strings.
PASSED: Test 1, Table DSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.
PASSED: Test 1, Table APIC has valid signature and ID strings.
PASSED: Test 1, Table FPDT has valid signature and ID strings.
PASSED: Test 1, Table ECDT has valid signature and ID strings.
PASSED: Test 1, Table MCFG has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table HPET has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table BGRT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table MSDM has valid signature and ID strings.
PASSED: Test 1, Table RSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.

================================================================================
21 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================


677 passed, 277 failed, 19 warnings, 3 aborted, 192 skipped, 10 info only.

Test Failure Summary
================================================================================

Critical failures: NONE

High failures: 56
 klog: HIGH Kernel message: [   28.461984] ACPI Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with OpRegion 0x0000000000000400-0x000000000000044F (\GPIS) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.461994] ACPI Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with OpRegion 0x0000000000000400-0x000000000000047F (\PMIO) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462007] ACPI Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462013] ACPI Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462022] ACPI Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462028] ACPI Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462037] ACPI Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150619/utaddress-254)
 klog: HIGH Kernel message: [   28.462042] ACPI Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150619/utaddress-254)
 uefirtauthvar: Failed to create authenticated variable with UEFI runtime service.
 uefirtauthvar: Failed to set authenticated variable with UEFI runtime service.
 uefirttime: Time returned an invalid year 32424, should be between 1900 and 9999.
 uefirttime: Failed to verify wakeup time after change.
 uefirttime: Failed to set wakeup time with UEFI runtime service.
 syntaxcheck: Assembler error in line 9770
 syntaxcheck: Assembler error in line 437
 syntaxcheck: Assembler error in line 452
 syntaxcheck: Assembler error in line 477
 syntaxcheck: Assembler error in line 494
 syntaxcheck: Assembler error in line 226
 syntaxcheck: Assembler error in line 246
 syntaxcheck: Assembler error in line 247
 syntaxcheck: Assembler error in line 266
 syntaxcheck: Assembler error in line 267
 syntaxcheck: Assembler error in line 286
 syntaxcheck: Assembler error in line 287
 syntaxcheck: Assembler error in line 306
 syntaxcheck: Assembler error in line 307
 syntaxcheck: Assembler error in line 326
 syntaxcheck: Assembler error in line 327
 syntaxcheck: Assembler error in line 346
 syntaxcheck: Assembler error in line 347
 syntaxcheck: Assembler error in line 366
 syntaxcheck: Assembler error in line 367
 syntaxcheck: Assembler error in line 386
 syntaxcheck: Assembler error in line 507
 syntaxcheck: Assembler error in line 518
 syntaxcheck: Assembler error in line 519
 syntaxcheck: Assembler error in line 538
 syntaxcheck: Assembler error in line 539
 syntaxcheck: Assembler error in line 558
 syntaxcheck: Assembler error in line 559
 syntaxcheck: Assembler error in line 578
 syntaxcheck: Assembler error in line 579
 syntaxcheck: Assembler error in line 598
 syntaxcheck: Assembler error in line 599
 syntaxcheck: Assembler error in line 618
 syntaxcheck: Assembler error in line 619
 syntaxcheck: Assembler error in line 638
 syntaxcheck: Assembler error in line 639
 syntaxcheck: Assembler error in line 658
 syntaxcheck: Assembler error in line 659
 syntaxcheck: Assembler error in line 709
 syntaxcheck: Compilation aborted early due to a parser detected syntax error.
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT0._GTF'.
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT1._GTF'.
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT2._GTF'.

Medium failures: 61
 mtrr: Memory range 0xdfe08000 to 0xdfe0ffff (0000:00:04.0) has incorrect attribute Write-Back.
 dmicheck: String index 0x05 in table entry 'Base Board Information (Type 2)' @ 0xda10d0ca, field 'Asset Tag', offset 0x08 has a default value 'ATN12345678901234567' and probably has not been updated by the BIOS vendor.
 cpufreq: CPU max frequency is unreachable
 cpufreq: Can't set CPU frequencies
 apicedge: Non-Legacy interrupt 0 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 1 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 8 is incorrectly level triggered.
 apicedge: Non-Legacy interrupt 12 is incorrectly level triggered.
 syntaxcheck: Assembler warning in line 2441
 syntaxcheck: Assembler warning in line 8683
 syntaxcheck: Assembler warning in line 9658
 syntaxcheck: Assembler warning in line 11162
 syntaxcheck: Assembler warning in line 11357
 syntaxcheck: Assembler warning in line 11379
 syntaxcheck: Assembler warning in line 11525
 syntaxcheck: Assembler warning in line 11940
 syntaxcheck: Assembler warning in line 12002
 syntaxcheck: Assembler warning in line 14155
 syntaxcheck: Assembler warning in line 14167
 syntaxcheck: Assembler warning in line 14168
 syntaxcheck: Assembler warning in line 14312
 syntaxcheck: Assembler warning in line 15510
 syntaxcheck: Assembler warning in line 15541
 syntaxcheck: Assembler warning in line 16115
 syntaxcheck: Assembler warning in line 16245
 syntaxcheck: Assembler warning in line 16364
 syntaxcheck: Assembler warning in line 16407
 syntaxcheck: Assembler warning in line 16523
 syntaxcheck: Assembler warning in line 16876
 syntaxcheck: Assembler warning in line 16898
 syntaxcheck: Assembler warning in line 16915
 syntaxcheck: Assembler warning in line 16945
 syntaxcheck: Assembler warning in line 16971
 syntaxcheck: Assembler warning in line 16985
 syntaxcheck: Assembler warning in line 17075
 syntaxcheck: Assembler warning in line 17083
 syntaxcheck: Assembler warning in line 17092
 syntaxcheck: Assembler warning in line 17100
 syntaxcheck: Assembler warning in line 17114
 syntaxcheck: Assembler warning in line 17122
 syntaxcheck: Assembler warning in line 17525
 syntaxcheck: Assembler warning in line 17777
 syntaxcheck: Assembler warning in line 18053
 syntaxcheck: Assembler warning in line 19307
 syntaxcheck: Assembler warning in line 263
 syntaxcheck: Assembler warning in line 330
 syntaxcheck: Assembler warning in line 36
 syntaxcheck: Assembler warning in line 108
 syntaxcheck: Assembler warning in line 201
 syntaxcheck: Assembler warning in line 268
 syntaxcheck: Assembler warning in line 315
 syntaxcheck: Assembler warning in line 362
 syntaxcheck: Assembler warning in line 409
 syntaxcheck: Assembler warning in line 456
 syntaxcheck: Assembler warning in line 503
 method: \_SB_.PCI0.B0D4._PTC package element 0 was not the expected type 'buffer', was instead type 'integer'.
 method: \_SB_.PCI0.B0D4._TSD sub-package 0 was expected to have 5 elements, got 1 elements instead.
 method: \_SB_.PCI0.B0D4._TSS sub-package 0 was expected to have 5 elements, got 1 elements instead.
 method: Some or all of the brightness level are not in ascending order which should be fixed in the firmware.
 fan: Fan present but has no cur_state present.
 ecdt: Failed to evaluate ECDT UID \_SB.PCI0.LPCB.EC0._UID, cannot check UID

Low failures: 135
 klog: LOW Kernel message: [   28.462051] lpc_ich: Resource conflict(s) found affecting gpio_ich
 dmicheck: String index 0x05 in table entry 'Chassis Information (Type 3)' @ 0xda10d140, field 'SKU Number', offset 0x15 has a default value 'To be filled by O.E.M.' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Processor Information (Type 4)' @ 0xda10d33d, field 'Asset Tag', offset 0x21 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Processor Information (Type 4)' @ 0xda10d33d, field 'Part Number', offset 0x22 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0xda10d3c7, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x03 in table entry 'Memory Device (Type 17)' @ 0xda10d45a, field 'Manufacturer', offset 0x17 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Memory Device (Type 17)' @ 0xda10d45a, field 'Serial Number', offset 0x18 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0xda10d45a, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x06 in table entry 'Memory Device (Type 17)' @ 0xda10d45a, field 'Part Number', offset 0x1a has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x03 in table entry 'Memory Device (Type 17)' @ 0xda10d4b6, field 'Manufacturer', offset 0x17 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Memory Device (Type 17)' @ 0xda10d4b6, field 'Serial Number', offset 0x18 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0xda10d4b6, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x06 in table entry 'Memory Device (Type 17)' @ 0xda10d4b6, field 'Part Number', offset 0x1a has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x03 in table entry 'Memory Device (Type 17)' @ 0xda10d512, field 'Manufacturer', offset 0x17 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Memory Device (Type 17)' @ 0xda10d512, field 'Serial Number', offset 0x18 has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0xda10d512, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x06 in table entry 'Memory Device (Type 17)' @ 0xda10d512, field 'Part Number', offset 0x1a has a default value '[Empty]' and probably has not been updated by the BIOS vendor.
 syntaxcheck: Assembler remark in line 6021
 syntaxcheck: Assembler remark in line 6199
 syntaxcheck: Assembler remark in line 6383
 syntaxcheck: Assembler remark in line 7693
 syntaxcheck: Assembler remark in line 8229
 syntaxcheck: Assembler remark in line 8441
 syntaxcheck: Assembler remark in line 8454
 syntaxcheck: Assembler remark in line 8465
 syntaxcheck: Assembler remark in line 9626
 syntaxcheck: Assembler remark in line 9840
 syntaxcheck: Assembler remark in line 10666
 syntaxcheck: Assembler remark in line 11432
 syntaxcheck: Assembler remark in line 11835
 syntaxcheck: Assembler remark in line 12162
 syntaxcheck: Assembler remark in line 12177
 syntaxcheck: Assembler remark in line 12192
 syntaxcheck: Assembler remark in line 12260
 syntaxcheck: Assembler remark in line 12330
 syntaxcheck: Assembler remark in line 12346
 syntaxcheck: Assembler remark in line 12419
 syntaxcheck: Assembler remark in line 12432
 syntaxcheck: Assembler remark in line 12468
 syntaxcheck: Assembler remark in line 12488
 syntaxcheck: Assembler remark in line 12516
 syntaxcheck: Assembler remark in line 12559
 syntaxcheck: Assembler remark in line 12573
 syntaxcheck: Assembler remark in line 12665
 syntaxcheck: Assembler remark in line 12685
 syntaxcheck: Assembler remark in line 12734
 syntaxcheck: Assembler remark in line 12754
 syntaxcheck: Assembler remark in line 12774
 syntaxcheck: Assembler remark in line 12920
 syntaxcheck: Assembler remark in line 12959
 syntaxcheck: Assembler remark in line 12979
 syntaxcheck: Assembler remark in line 13001
 syntaxcheck: Assembler remark in line 13071
 syntaxcheck: Assembler remark in line 13091
 syntaxcheck: Assembler remark in line 13131
 syntaxcheck: Assembler remark in line 13181
 syntaxcheck: Assembler remark in line 13199
 syntaxcheck: Assembler remark in line 13222
 syntaxcheck: Assembler remark in line 13240
 syntaxcheck: Assembler remark in line 13265
 syntaxcheck: Assembler remark in line 13310
 syntaxcheck: Assembler remark in line 13330
 syntaxcheck: Assembler remark in line 13348
 syntaxcheck: Assembler remark in line 13462
 syntaxcheck: Assembler remark in line 13482
 syntaxcheck: Assembler remark in line 13502
 syntaxcheck: Assembler remark in line 13537
 syntaxcheck: Assembler remark in line 13560
 syntaxcheck: Assembler remark in line 13608
 syntaxcheck: Assembler remark in line 13628
 syntaxcheck: Assembler remark in line 13695
 syntaxcheck: Assembler remark in line 13715
 syntaxcheck: Assembler remark in line 13752
 syntaxcheck: Assembler remark in line 13789
 syntaxcheck: Assembler remark in line 13815
 syntaxcheck: Assembler remark in line 13859
 syntaxcheck: Assembler remark in line 13879
 syntaxcheck: Assembler remark in line 13898
 syntaxcheck: Assembler remark in line 13922
 syntaxcheck: Assembler remark in line 13972
 syntaxcheck: Assembler remark in line 13992
 syntaxcheck: Assembler remark in line 13998
 syntaxcheck: Assembler remark in line 14016
 syntaxcheck: Assembler remark in line 14042
 syntaxcheck: Assembler remark in line 14049
 syntaxcheck: Assembler remark in line 14171
 syntaxcheck: Assembler remark in line 14207
 syntaxcheck: Assembler remark in line 14219
 syntaxcheck: Assembler remark in line 14231
 syntaxcheck: Assembler remark in line 16305
 syntaxcheck: Assembler remark in line 16309
 syntaxcheck: Assembler remark in line 17673
 syntaxcheck: Assembler remark in line 17687
 syntaxcheck: Assembler remark in line 17702
 syntaxcheck: Assembler remark in line 17717
 syntaxcheck: Assembler remark in line 17731
 syntaxcheck: Assembler remark in line 17746
 syntaxcheck: Assembler remark in line 17761
 syntaxcheck: Assembler remark in line 18156
 syntaxcheck: Assembler remark in line 18161
 syntaxcheck: Assembler remark in line 18278
 syntaxcheck: Assembler remark in line 18733
 syntaxcheck: Assembler remark in line 19202
 syntaxcheck: Assembler remark in line 19206
 syntaxcheck: Assembler remark in line 19239
 syntaxcheck: Assembler remark in line 19243
 syntaxcheck: Assembler remark in line 19438
 syntaxcheck: Assembler remark in line 376
 syntaxcheck: Assembler remark in line 381
 syntaxcheck: Assembler remark in line 573
 syntaxcheck: Assembler remark in line 577
 syntaxcheck: Assembler remark in line 598
 syntaxcheck: Assembler remark in line 602
 syntaxcheck: Assembler remark in line 623
 syntaxcheck: Assembler remark in line 627
 syntaxcheck: Assembler remark in line 648
 syntaxcheck: Assembler remark in line 652
 syntaxcheck: Assembler remark in line 499
 syntaxcheck: Assembler remark in line 514
 syntaxcheck: Assembler remark in line 61
 syntaxcheck: Assembler remark in line 118
 syntaxcheck: Assembler remark in line 119
 syntaxcheck: Assembler remark in line 120
 syntaxcheck: Assembler remark in line 336
 syntaxcheck: Assembler remark in line 342
 syntaxcheck: Assembler remark in line 142
 syntaxcheck: Assembler remark in line 143
 syntaxcheck: Assembler remark in line 144
 syntaxcheck: Assembler remark in line 223
 syntaxcheck: Assembler remark in line 229
 syntaxcheck: Assembler remark in line 133
 syntaxcheck: Assembler remark in line 136
 syntaxcheck: Assembler remark in line 162
 syntaxcheck: Assembler remark in line 241
 syntaxcheck: Assembler remark in line 251

Other failures: NONE

Test           |Pass |Fail |Abort|Warn |Skip |Info |
---------------+-----+-----+-----+-----+-----+-----+
acpiinfo       |     |     |     |     |     |    3|
acpitables     |   21|     |     |     |     |     |
apicedge       |     |    4|     |     |     |     |
apicinstance   |    1|     |     |     |     |     |
asf            |     |     |     |     |    1|     |
aspm           |    2|     |     |    4|     |     |
aspt           |     |     |     |     |    1|     |
autobrightness |    3|     |     |     |     |     |
bert           |     |     |     |     |    1|     |
bgrt           |    1|     |     |     |     |     |
bios32         |     |     |     |     |    1|     |
bios_info      |     |     |     |     |     |    1|
boot           |     |     |     |     |    1|     |
checksum       |   23|     |     |     |     |     |
cpep           |     |     |     |     |    1|     |
cpufreq        |    3|    2|     |    4|    2|     |
crs            |    1|     |     |     |     |     |
csm            |     |     |     |     |     |    1|
csrt           |     |     |     |     |    1|     |
cstates        |    3|     |     |     |     |     |
dbg2           |     |     |     |     |    1|     |
dbgp           |     |     |     |     |    1|     |
dmar           |     |     |     |     |    1|     |
dmicheck       |   21|   17|     |     |    1|     |
ebda           |     |     |     |     |    1|     |
ecdt           |    1|    1|     |     |     |     |
erst           |     |     |     |     |    1|     |
facs           |    1|     |     |     |     |     |
fadt           |    4|     |     |     |     |     |
fan            |    4|    5|     |     |     |     |
fpdt           |    1|     |     |     |     |     |
gtdt           |     |     |     |     |    1|     |
hda_audio      |    2|     |     |     |     |     |
hest           |     |     |     |     |    1|     |
hpet           |    5|     |     |     |     |     |
iort           |     |     |     |     |    1|     |
klog           |     |    9|     |     |     |     |
lpit           |     |     |     |     |    1|     |
madt           |    1|     |     |     |     |     |
maxfreq        |    1|     |     |     |     |     |
maxreadreq     |    1|     |     |     |     |     |
mcfg           |    2|     |     |     |     |     |
mchi           |     |     |     |     |    1|     |
method         |  390|    7|     |   10|  134|     |
microcode      |     |     |     |     |    1|     |
mpcheck        |     |     |     |     |    9|     |
msdm           |    1|     |     |     |     |     |
msr            |   96|     |     |     |     |     |
mtrr           |    1|    1|     |     |    1|     |
nx             |    3|     |     |     |     |     |
oops           |    2|     |     |     |     |     |
osilinux       |     |     |     |    1|     |     |
pcc            |     |     |     |     |     |    1|
pciirq         |     |     |     |     |     |     |
pnp            |     |     |     |     |     |     |
rsdp           |    1|     |     |     |     |     |
rsdt           |    1|     |     |     |     |     |
sbst           |     |     |     |     |    1|     |
securebootcert |    3|     |     |     |    1|     |
slic           |     |     |     |     |    1|     |
slit           |     |     |     |     |    1|     |
spcr           |     |     |     |     |    1|     |
spmi           |     |     |     |     |    1|     |
srat           |     |     |     |     |    1|     |
stao           |     |     |     |     |    1|     |
syntaxcheck    |    2|  215|     |     |     |     |
tcpa           |     |     |    1|     |     |     |
tpm2           |     |     |    1|     |     |     |
uefi           |     |     |     |     |    1|     |
uefibootpath   |    2|     |     |     |     |     |
uefirtauthvar  |    4|    2|     |     |    6|     |
uefirtmisc     |    3|     |     |     |   10|     |
uefirttime     |   33|   14|     |     |     |     |
uefirtvariable |   25|     |     |     |     |     |
version        |     |     |     |     |     |    4|
virt           |    1|     |     |     |     |     |
waet           |     |     |     |     |    1|     |
wakealarm      |    4|     |     |     |     |     |
wdat           |     |     |     |     |    1|     |
wmi            |    2|     |     |     |     |     |
xenv           |     |     |    1|     |     |     |
xsdt           |    1|     |     |     |     |     |
---------------+-----+-----+-----+-----+-----+-----+
Total:         |  677|  277|    3|   19|  192|   10|
---------------+-----+-----+-----+-----+-----+-----+
