Results generated by fwts: Version V16.05.01 (2016-05-19 06:15:48).

Some of this work - Copyright (c) 1999 - 2016, Intel Corp. All rights reserved.
Some of this work - Copyright (c) 2010 - 2016, Canonical.
Some of this work - Copyright (c) 2016 IBM.

This test run on 30/05/16 at 18:46:56 on host Linux ubuntu 4.4.0-22-generic
#40~14.04.1-Ubuntu SMP Fri May 13 17:27:45 UTC 2016 x86_64.

Command: "fwts --force-clean --skip-test=s3 --batch --uefitests
--show-progress-dialog --log-type plaintext".
Running tests: version bios_info oops olog klog bmc_info mtrr acpiinfo
dt_sysinfo dt_base esrt uefirtauthvar uefibootpath securebootcert uefirtmisc
uefirtvariable uefirttime csm maxreadreq crs aspm dmicheck microcode msr nx
cpufreq maxfreq virt pnp pciirq mpcheck hda_audio ebda bios32 apicedge xenv xsdt
wmi wdat wakealarm waet uefi tpm2 tcpa syntaxcheck stao srat spmi spcr slit slic
sbst rsdt rsdp pcc osilinux method msdm msct mchi mcfg madt lpit iort hpet hest
gtdt fpdt fan fadt facs erst einj ecdt dmar dbg2 dbgp cstates csrt cpep checksum
autobrightness boot bgrt bert aspt asf apicinstance acpitables.

version: Gather kernel system information.
--------------------------------------------------------------------------------
Test 1 of 4: Gather kernel signature.
Signature: Ubuntu 4.4.0-22.40~14.04.1-generic 4.4.8

Test 2 of 4: Gather kernel system information.
Kernel Version: Linux version 4.4.0-22-generic (buildd@lcy01-08) (gcc version
4.8.2 (Ubuntu 4.8.2-19ubuntu1) ) #40~14.04.1-Ubuntu SMP Fri May 13 17:27:45 UTC
2016

Test 3 of 4: Gather kernel boot command line.
Kernel boot command line: BOOT_IMAGE=/casper/vmlinuz boot=casper ip=frommedia
persistent noprompt splash quiet FWTS_AUTO_SHUTDOWN=1 --

Test 4 of 4: Gather ACPI driver version.
ACPI Version: 20150930

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 4 info only.
================================================================================

bios_info: Gather BIOS DMI information.
--------------------------------------------------------------------------------
Test 1 of 1: Gather BIOS DMI information
BIOS Vendor       : American Megatrends Inc.
BIOS Version      : G75VW.222
BIOS Release Date : 11/06/2012
Board Name        : G75VW
Board Serial #    : 
Board Version     : 1.0
Board Asset Tag   : ATN12345678901234567
Chassis Serial #  : ###############
Chassis Type      : 10
Chassis Vendor    : ASUSTeK COMPUTER INC.
Chassis Version   : 1.0
Chassic Asset Tag : No Asset Tag
Product Name      : G75VW
Product Serial #  : ###############
Product UUID      : ########-####-####-####-############
Product Version   : 1.0
System Vendor     : ASUSTeK COMPUTER INC.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

oops: Scan kernel log for Oopses.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log oops check.
PASSED: Test 1, Found no oopses in kernel log.
PASSED: Test 1, Found no WARN_ON warnings in kernel log.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

olog: Run OLOG scan and analysis checks.
--------------------------------------------------------------------------------
OLOG without any parameters on the platform you are running does nothing, please
specify -o for custom log analysis. 
PPC supports dump and analysis of the default firmware logs. 
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

klog: Scan kernel log for errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Kernel log error check.
Kernel message: [ 0.020667] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'

ADVICE: This is not exactly a failure but a warning from the kernel. The
MSR_IA32_ENERGY_PERF_BIAS was initialized and defaulted to a high performance
bias setting. The kernel has detected this and changed it down to a 'normal'
bias setting.

Kernel message: [ 0.363370] [Firmware Bug]: ACPI: BIOS _OSI(Linux) query ignored

ADVICE: This is not exactly a failure mode but a warning from the kernel. The
_OSI() method has implemented a match to the 'Linux' query in the DSDT and this
is redundant because the ACPI driver matches onto the Windows _OSI strings by
default.

Kernel message: [ 0.366557] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S1_] (20150930/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S1 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S1 sleep state, however, it should not be a problem if the S1 sleep
state isn't supported intentionally.

Kernel message: [ 0.366562] ACPI Exception: AE_NOT_FOUND, While evaluating Sleep
State [\_S2_] (20150930/hwxface-580)

ADVICE: The exception comes from kernel cannot find _S2 namespace object that
contains the register values for the sleep state when kernel would like to setup
all the sleep state information. This means that the kernel does not know how to
enter the S2 sleep state, however, it should not be a problem if the S2 sleep
state isn't supported intentionally.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 4.391939] ACPI
Warning: \_SB_.PCI0.PEG0.GFX0._DSM: Argument #4 type mismatch - Found [Buffer],
ACPI requires [Package] (20150930/nsarguments-95)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560876] ACPI
Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with
OpRegion 0x0000000000000400-0x000000000000044F (\GPIS) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560882] ACPI
Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with
OpRegion 0x0000000000000400-0x000000000000047F (\PMIO) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560888] ACPI
Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560890] ACPI
Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560893] ACPI
Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560895] ACPI
Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560898] ACPI
Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with
OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [HIGH] KlogAcpiBadAmlCode: Test 1, HIGH Kernel message: [ 20.560900] ACPI
Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with
OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)

ADVICE: ACPI AML intepreter has found some non-conforming AML code. This should
be investigated and fixed.

FAILED [LOW] KlogAcpiSystemIOConflictLpcIchWatchDogTimer: Test 1, LOW Kernel
message: [ 20.560902] lpc_ich: Resource conflict(s) found affecting gpio_ich

ADVICE: A resource conflict has occurred between ACPI OperationRegions and the
same I/O region used by the lpc_ich driver for the General Purpose I/O (GPIO)
region. Sometimes this GPIO region is used by the firmware for rfkill or LED
controls or very rarely for the Embedded Controller System Control Interrupt.
This may require deeper inspection to check if the conflict will lead to any
real issues. However, in the vast majority of cases this warning can be ignored
as no harm will occur.

Found 10 unique errors in kernel log.

================================================================================
0 passed, 10 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

bmc_info: BMC Info
--------------------------------------------------------------------------------
Test skipped, missing features: IPMI
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

mtrr: MTRR tests.
--------------------------------------------------------------------------------
MTRR overview
-------------
Reg 0: 0x0000000000000000 - 0x000000007fffffff (  2048 MB)   Write-Back
Reg 1: 0x0000000080000000 - 0x00000000bfffffff (  1024 MB)   Write-Back
Reg 2: 0x00000000c0000000 - 0x00000000dfffffff (   512 MB)   Write-Back
Reg 3: 0x00000000dfc00000 - 0x00000000dfffffff (     4 MB)   Uncached
Reg 4: 0x0000000100000000 - 0x00000001ffffffff (  4096 MB)   Write-Back
Reg 5: 0x0000000200000000 - 0x00000003ffffffff (  8192 MB)   Write-Back
Reg 6: 0x0000000400000000 - 0x000000041fffffff (   512 MB)   Write-Back
Reg 7: 0x000000041f400000 - 0x000000041f7fffff (     4 MB)   Uncached
Reg 8: 0x000000041f800000 - 0x000000041fffffff (     8 MB)   Uncached

Test 1 of 3: Validate the kernel MTRR IOMEM setup.
FAILED [MEDIUM] MTRRIncorrectAttr: Test 1, Memory range 0x100000 to 0xdd6acfff
(System RAM) has incorrect attribute Default (Most probably Uncached).
FAILED [MEDIUM] MTRRIncorrectAttr: Test 1, Memory range 0x100000000 to
0x41f3fffff (System RAM) has incorrect attribute Default (Most probably
Uncached).

Test 2 of 3: Validate the MTRR setup across all processors.
PASSED: Test 2, All processors have the a consistent MTRR setup.

Test 3 of 3: Test for AMD MtrrFixDramModEn being cleared by the BIOS.
SKIPPED: Test 3, CPU is not an AMD, cannot test.

================================================================================
1 passed, 2 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

acpiinfo: General ACPI information test.
--------------------------------------------------------------------------------
Test 1 of 3: Determine Kernel ACPI version.
Kernel ACPICA driver version: 20150930, supports ACPI 5.0

Test 2 of 3: Determine machine's ACPI version.
FADT X_FIRMWARE_CTRL 64 bit pointer was zero, falling back to using
FIRMWARE_CTRL 32 bit pointer.
FACP ACPI Version: 5.0 

Test 3 of 3: Determine AML compiler.
Determine the compiler used to generate the ACPI AML in the DSDT and SSDT.
Table DSDT, OEM _ASUS_, created with INTL (Intel) compiler.
Table SSDT0, OEM AhciR1, created with INTL (Intel) compiler.
Table SSDT1, OEM AhciR2, created with INTL (Intel) compiler.
Table SSDT2, OEM PmRef, created with INTL (Intel) compiler.
Table SSDT3, OEM PmRef, created with INTL (Intel) compiler.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 3 info only.
================================================================================

dt_sysinfo: Device tree system information test
--------------------------------------------------------------------------------
Test skipped, missing features: devicetree
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 2 skipped, 0 info only.
================================================================================

dt_base: Base device tree validity check
--------------------------------------------------------------------------------
Test skipped, missing features: devicetree
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 3 skipped, 0 info only.
================================================================================

esrt: Sanity check UEFI ESRT Table.
--------------------------------------------------------------------------------
Cannot find ESRT table, firmware seems not supported. Aborted.
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

uefirtauthvar: Authenticated variable tests.
--------------------------------------------------------------------------------
Test 1 of 12: Create authenticated variable test.
FAILED [HIGH] UEFICreateAuthVar: Test 1, Failed to create authenticated variable
with UEFI runtime service.
Return status: EFI_SECURITY_VIOLATION. The function was not performed due to a
security violation.

Test 2 of 12: Authenticated variable test with the same authenticated variable.
SKIPPED: Test 2, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 3 of 12: Authenticated variable test with another valid authenticated
variable.
SKIPPED: Test 3, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 4 of 12: Append authenticated variable test.
SKIPPED: Test 4, The test variable, AuthVarCreate, doesn't exist, skip the test.

Test 5 of 12: Update authenticated variable test.
SKIPPED: Test 5, The test data, AuthVarAppend, doesn't exist, skip the test.

Test 6 of 12: Authenticated variable test with old authenticated variable.
SKIPPED: Test 6, The test variable, AuthVarUpdate, doesn't exist, skip the test.

Test 7 of 12: Delete authenticated variable test.
SKIPPED: Test 7, The test data, AuthVarCreate, doesn't exist, skip the test.

Test 8 of 12: Authenticated variable test with invalid modified data.
PASSED: Test 8, Set authenticated variable test with invalid modified data
passed.

Test 9 of 12: Authenticated variable test with invalid modified timestamp.
PASSED: Test 9, Set authenticated variable test with invalid modified timestamp
passed.

Test 10 of 12: Authenticated variable test with different guid.
PASSED: Test 10, Set authenticated variable test with different guid passed.

Test 11 of 12: Authenticated variable test with invalid attributes.
PASSED: Test 11, Set authenticated variable test with invalid attributes passed.

Test 12 of 12: Set and delete authenticated variable created by different key
test.
FAILED [HIGH] UEFISetAuthVarDiff: Test 12, Failed to set authenticated variable
with UEFI runtime service.
Return status: EFI_SECURITY_VIOLATION. The function was not performed due to a
security violation.

================================================================================
4 passed, 2 failed, 0 warning, 0 aborted, 6 skipped, 0 info only.
================================================================================

uefibootpath: Sanity check for UEFI Boot Path Boot####.
--------------------------------------------------------------------------------
Test 1 of 1: Test UEFI Boot Path Boot####.
Name: Boot0000
Info: grub_uefi
PASSED: Test 1, Check bootpath Boot0000 test passed.
Name: Boot0001
Info: Windows Boot Manager
PASSED: Test 1, Check bootpath Boot0001 test passed.
Name: Boot0003
Info: CD/DVD Drive 
PASSED: Test 1, Check bootpath Boot0003 test passed.
Name: Boot0005
Info: Network Card 
PASSED: Test 1, Check bootpath Boot0005 test passed.
Name: Boot0006
Info: UEFI: Generic USB Flash Disk 0.00
PASSED: Test 1, Check bootpath Boot0006 test passed.
Name: Boot0007
Info: Hard Drive 
PASSED: Test 1, Check bootpath Boot0007 test passed.

================================================================================
6 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

securebootcert: UEFI secure boot test.
--------------------------------------------------------------------------------
Test 1 of 1: UEFI secure boot test.
The KEK variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x27 (NonVolatile,BootServ,RunTime,TimeBaseAuthenicatedWrite).
SKIPPED: Test 1, Cannot determine system, stop checking the Master CA
certificate.

The SecureBoot variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x16 (BootServ,RunTime,AuthenicatedWrite).
  Value: 0x00 (Secure Boot Mode Off).
PASSED: Test 1, Secure boot relative variable SecureBoot check passed.

The SetupMode variable check.
  GUID: 8BE4DF61-93CA-11D2-AA0D-00E098032B8C
  Attr: 0x16 (BootServ,RunTime,AuthenicatedWrite).
  Value: 0x00 (User Mode).
PASSED: Test 1, Secure boot relative variable SetupMode check passed.

The db variable check.
  GUID: D719B2CB-3D3A-4596-A3BC-DAD00E67656F
  Attr: 0x27 (NonVolatile,BootServ,RunTime,TimeBaseAuthenicatedWrite).
Check Microsoft UEFI CA certificate presence in db
PASSED: Test 1, MS UEFI CA 2011 key check passed.


================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefirtmisc: UEFI miscellaneous runtime service interface tests.
--------------------------------------------------------------------------------
Test 1 of 3: Test for UEFI miscellaneous runtime service interfaces.
Testing UEFI runtime service GetNextHighMonotonicCount interface.
PASSED: Test 1, UEFI runtime service GetNextHighMonotonicCount interface test
passed.
Testing UEFI runtime service QueryCapsuleCapabilities interface.
SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x0: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x10000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x30000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x50000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 1, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x70000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.


Test 2 of 3: Stress test for UEFI miscellaneous runtime service interfaces.
Stress testing for UEFI runtime service GetNextHighMonotonicCount interface.
PASSED: Test 2, UEFI runtime service GetNextHighMonotonicCount interface stress
test passed.
Stress testing UEFI runtime service QueryCapsuleCapabilities interface.
SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x0: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x10000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x30000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x50000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.

SKIPPED: Test 2, Not support the UEFI QueryCapsuleCapabilities runtime interface
with flag value 0x70000: cannot test.

ADVICE: Firmware also needs to check if the revision of system table is correct
or not. Linux kernel returns EFI_UNSUPPORTED as well, if the FirmwareRevision of
system table is less than EFI_2_00_SYSTEM_TABLE_REVISION.


Test 3 of 3: Test GetNextHighMonotonicCount with invalid NULL parameter.
PASSED: Test 3, Test with invalid NULL parameter returned EFI_INVALID_PARAMETER
as expected.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 10 skipped, 0 info only.
================================================================================

uefirtvariable: UEFI Runtime service variable interface tests.
--------------------------------------------------------------------------------
Test 1 of 8: Test UEFI RT service get variable interface.
PASSED: Test 1, UEFI runtime service GetVariable interface test passed.

Test 2 of 8: Test UEFI RT service get next variable name interface.
The runtime service GetNextVariableName interface function test.
PASSED: Test 2, The runtime service GetNextVariableName interface function test
passed.
Check the GetNextVariableName returned value of VariableNameSize is equal to the
length of VariableName.
PASSED: Test 2, Check the GetNextVariableName returned value of VariableNameSize
is equal to the length of VariableName passed.
Test GetNextVariableName interface returns unique variables.
PASSED: Test 2, Test GetNextVariableName interface returns unique variables
passed.
The GetNextVariableName interface conformance tests.
PASSED: Test 2, The runtime service GetNextVariableName interface conformance
tests passed.

Test 3 of 8: Test UEFI RT service set variable interface.
Testing SetVariable on two different GUIDs and the same variable name.
PASSED: Test 3, SetVariable on two different GUIDs and the same variable name
passed.
Testing SetVariable on the same and different variable data.
PASSED: Test 3, SetVariable on the same and different variable data passed.
Testing SetVariable on similar variable name.
PASSED: Test 3, SetVariable on similar variable name passed.
Testing SetVariable on DataSize is 0.
PASSED: Test 3, SetVariable on DataSize is 0 passed.
Testing SetVariable on Attributes is 0.
PASSED: Test 3, SetVariable on Attributes is 0 passed.
Testing SetVariable on Invalid Attributes.
PASSED: Test 3, SetVariable on Invalid Attributes passed.
Testing SetVariable with both Authenticated Attributes set.
PASSED: Test 3, Testing SetVariable with both Authenticated Attributes set
passed.

Test 4 of 8: Test UEFI RT service query variable info interface.
PASSED: Test 4, UEFI runtime service query variable info interface test passed.

Test 5 of 8: Test UEFI RT service variable interface stress test.
Testing GetVariable on getting the variable 1024 times.
PASSED: Test 5, GetVariable on getting the variable multiple times passed.
Testing GetNextVariableName on getting the variable multiple times.
PASSED: Test 5, GetNextVariableName on getting the next variable name multiple
times passed.

Test 6 of 8: Test UEFI RT service set variable interface stress test.
Testing SetVariable on setting the variable with the same data 40 times.
PASSED: Test 6, SetVariable on setting the variable with the same data multiple
times passed.
Testing SetVariable on setting the variable with different data 40 times.
PASSED: Test 6, Testing SetVariable on setting the variable with different data
multiple times passed.
Testing SetVariable on setting the variable with different name 40 times.
PASSED: Test 6, Testing SetVariable on setting the variable with different name
multiple times passed.
Testing SetVariable on setting the variable with different name and data 40
times.
PASSED: Test 6, Testing SetVariable on setting the variable with different name
and data multiple times passed.

Test 7 of 8: Test UEFI RT service query variable info interface stress test.
Testing QueryVariableInfo on querying the variable 1024 times.
PASSED: Test 7, UEFI runtime service query variable info interface stress test
passed.

Test 8 of 8: Test UEFI RT service get variable interface, invalid parameters.
Testing GetVariable with NULL variable name.
PASSED: Test 8, GetVariable with NULL variable name returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL vendor GUID.
PASSED: Test 8, GetVariable with NULL vendor GUID returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL datasize.
PASSED: Test 8, GetVariable with NULL datasize returned error
EFI_INVALID_PARAMETER as expected.
Testing GetVariable with NULL data.
PASSED: Test 8, GetVariable with NULL data returned error EFI_INVALID_PARAMETER
as expected.
Testing GetVariable with NULL variable name, vendor GUID, datasize and data.
PASSED: Test 8, GetVariable with NULL variable name, vendor GUID, datasize and
data returned error EFI_INVALID_PARAMETER as expected.

================================================================================
25 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

uefirttime: UEFI Runtime service time interface tests.
--------------------------------------------------------------------------------
Test 1 of 35: Test UEFI RT service get time interface.
PASSED: Test 1, UEFI runtime service GetTime interface test passed.

Test 2 of 35: Test UEFI RT service get time interface, NULL time parameter.
PASSED: Test 2, UEFI runtime service GetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 3 of 35: Test UEFI RT service get time interface, NULL time and NULL
capabilties parameters.
PASSED: Test 3, UEFI runtime service GetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 4 of 35: Test UEFI RT service set time interface.
PASSED: Test 4, UEFI runtime service SetTime interface test passed.

Test 5 of 35: Test UEFI RT service set time interface, invalid year 1899.
PASSED: Test 5, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 6 of 35: Test UEFI RT service set time interface, invalid year 10000.
PASSED: Test 6, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 7 of 35: Test UEFI RT service set time interface, invalid month 0.
PASSED: Test 7, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 8 of 35: Test UEFI RT service set time interface, invalid month 13.
PASSED: Test 8, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 9 of 35: Test UEFI RT service set time interface, invalid day 0.
PASSED: Test 9, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 10 of 35: Test UEFI RT service set time interface, invalid day 32.
PASSED: Test 10, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 11 of 35: Test UEFI RT service set time interface, invalid hour 24.
PASSED: Test 11, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 12 of 35: Test UEFI RT service set time interface, invalid minute 60.
PASSED: Test 12, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 13 of 35: Test UEFI RT service set time interface, invalid second 60.
PASSED: Test 13, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 14 of 35: Test UEFI RT service set time interface, invalid nanosecond
1000000000.
PASSED: Test 14, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 15 of 35: Test UEFI RT service set time interface, invalid timezone -1441.
PASSED: Test 15, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 16 of 35: Test UEFI RT service set time interface, invalid timezone 1441.
PASSED: Test 16, UEFI runtime service SetTime interface test passed, returned
EFI_INVALID_PARAMETER as expected.

Test 17 of 35: Test UEFI RT service get wakeup time interface.
FAILED [HIGH] UEFIRuntimeTimeFieldBadYear: Test 17, Time returned an invalid
year 64496, should be between 1900 and 9999.

Test 18 of 35: Test UEFI RT service get wakeup time interface, NULL enabled
parameter.
PASSED: Test 18, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 19 of 35: Test UEFI RT service get wakeup time interface, NULL pending
parameter.
PASSED: Test 19, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 20 of 35: Test UEFI RT service get wakeup time interface, NULL time
parameter.
PASSED: Test 20, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 21 of 35: Test UEFI RT service get wakeup time interface, NULL enabled,
pending and time parameters.
PASSED: Test 21, UEFI runtime service GetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER or EFI_UNSUPPORTED as expected.

Test 22 of 35: Test UEFI RT service set wakeup time interface.
FAILED [HIGH] UEFIRuntimeSetWakeupTimeVerify: Test 22, Failed to verify wakeup
time after change.

Test 23 of 35: Test UEFI RT service set wakeup time interface, NULL time
parameter.
PASSED: Test 23, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.

Test 24 of 35: Test UEFI RT service set wakeup time interface, invalid year
1899.
PASSED: Test 24, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 24, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 25 of 35: Test UEFI RT service set wakeup time interface, invalid year
10000.
PASSED: Test 25, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 25, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 26 of 35: Test UEFI RT service set wakeup time interface, invalid month 0.
PASSED: Test 26, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 26, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 27 of 35: Test UEFI RT service set wakeup time interface, invalid month 13.
PASSED: Test 27, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 27, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 28 of 35: Test UEFI RT service set wakeup time interface, invalid day 0.
PASSED: Test 28, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 28, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 29 of 35: Test UEFI RT service set wakeup time interface, invalid day 32.
PASSED: Test 29, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 29, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 30 of 35: Test UEFI RT service set wakeup time interface, invalid hour 24.
PASSED: Test 30, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 30, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 31 of 35: Test UEFI RT service set wakeup time interface, invalid minute
60.
PASSED: Test 31, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 31, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 32 of 35: Test UEFI RT service set wakeup time interface, invalid second
60.
PASSED: Test 32, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 32, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 33 of 35: Test UEFI RT service set wakeup time interface, invalid
nanosecond 1000000000.
PASSED: Test 33, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 33, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 34 of 35: Test UEFI RT service set wakeup time interface, invalid timezone
-1441.
PASSED: Test 34, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 34, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

Test 35 of 35: Test UEFI RT service set wakeup time interface, invalid timezone
1441.
PASSED: Test 35, UEFI runtime service SetTimeWakeupTime interface test passed,
returned EFI_INVALID_PARAMETER as expected.
FAILED [HIGH] UEFIRuntimeSetWakeupTime: Test 35, Failed to set wakeup time with
UEFI runtime service.
Return status: EFI_INVALID_PARAMETER. A parameter was incorrect.

================================================================================
33 passed, 14 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

csm: UEFI Compatibility Support Module test.
--------------------------------------------------------------------------------
Test 1 of 1: UEFI Compatibility Support Module test.
Checking for UEFI Compatibility Support Module (CSM)
Int 10h jumps to 0xc182e in option ROM at: 0xc0000..0xce800
CSM: UEFI firmware seems to have CSM support with Int 10h support.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

maxreadreq: Test firmware has set PCI Express MaxReadReq to a higher value on
non-motherboard devices.
--------------------------------------------------------------------------------
Test 1 of 1: Test firmware settings MaxReadReq for PCI Express devices.
PASSED: Test 1, All devices have MaxReadReq set > 128.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

crs: Test PCI host bridge configuration using _CRS.
--------------------------------------------------------------------------------
Test 1 of 1: Test PCI host bridge configuration using _CRS.
PASSED: Test 1, The kernel has detected a BIOS newer than the end of 2007 (11/6
/2012) and has assumed that your BIOS can correctly specify the host bridge MMIO
aperture using _CRS. If this does not work correctly you can override this by
booting with "pci=nocrs".

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

aspm: PCIe ASPM test.
--------------------------------------------------------------------------------
Test 1 of 2: PCIe ASPM ACPI test.
PCIe ASPM is not controlled by Linux kernel.

ADVICE: BIOS reports that Linux kernel should not modify ASPM settings that BIOS
configured. It can be intentional because hardware vendors identified some
capability bugs between the motherboard and the add-on cards.


Test 2 of 2: PCIe ASPM registers test.
WARNING: Test 2, RP 00h:01h.00h L0s not enabled.
WARNING: Test 2, RP 00h:01h.00h L1 not enabled.
WARNING: Test 2, Device 01h:00h.00h L0s not enabled.
WARNING: Test 2, Device 01h:00h.00h L1 not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increase power consumption, and will impact the battery life of a
mobile system.


ADVICE: The ASPM L1 low power Link state is optimized for maximum power savings
with longer entry and exit latencies. Disabling L1 of a PCIe device may
increases power consumption, and will impact the battery life of a mobile system
significantly.

PASSED: Test 2, PCIe ASPM setting matched was matched.
WARNING: Test 2, RP 00h:1Ch.01h L0s not enabled.
WARNING: Test 2, Device 03h:00h.00h L0s not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increase power consumption, and will impact the battery life of a
mobile system.

PASSED: Test 2, PCIe ASPM setting matched was matched.
WARNING: Test 2, RP 00h:1Ch.03h L0s not enabled.
WARNING: Test 2, Device 04h:00h.00h L0s not enabled.

ADVICE: The ASPM L0s low power Link state is optimized for short entry and exit
latencies, while providing substantial power savings. Disabling L0s of a PCIe
device may increase power consumption, and will impact the battery life of a
mobile system.

PASSED: Test 2, PCIe ASPM setting matched was matched.

================================================================================
3 passed, 0 failed, 8 warnings, 0 aborted, 0 skipped, 0 info only.
================================================================================

dmicheck: DMI/SMBIOS table tests.
--------------------------------------------------------------------------------
Test 1 of 3: Find and test SMBIOS Table Entry Points.
This test tries to find and sanity check the SMBIOS data structures.
PASSED: Test 1, Found SMBIOS Table Entry Point at 0xf04c0
SMBIOS Entry Point Structure:
  Anchor String          : _SM_
  Checksum               : 0xdd
  Entry Point Length     : 0x1f
  Major Version          : 0x02
  Minor Version          : 0x07
  Maximum Struct Size    : 0x9d
  Entry Point Revision   : 0x00
  Formatted Area         : 0x00 0x00 0x00 0x00 0x00
  Intermediate Anchor    : _DMI_
  Intermediate Checksum  : 0xdc
  Structure Table Length : 0x070d
  Structure Table Address: 0x000eba70
  # of SMBIOS Structures : 0x0019
  SBMIOS BCD Revision    : 27

PASSED: Test 1, SMBIOS Table Entry Point Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Point Length is valid.
PASSED: Test 1, SMBIOS Table Entry Intermediate Anchor String _DMI_ is valid.
PASSED: Test 1, SMBIOS Table Entry Point Intermediate Checksum is valid.
PASSED: Test 1, SMBIOS Table Entry Structure Table Address and Length looks
valid.

Test 2 of 3: Test DMI/SMBIOS tables for errors.
PASSED: Test 2, Entry @ 0x000eba70 'BIOS Information (Type 0)'
PASSED: Test 2, Entry @ 0x000ebab7 'System Information (Type 1)'
FAILED [MEDIUM] DMIAssetTag: Test 2, String index 0x05 in table entry 'Base
Board Information (Type 2)' @ 0x000ebb22, field 'Asset Tag', offset 0x08 has a
default value 'ATN12345678901234567' and probably has not been updated by the
BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless. Note that the kernel uses this field so it probably should be corrected
to ensure the kernel is using sane values.


ADVICE: It may be worth checking against section 7.3 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMISerialNumber: Test 2, String index 0x05 in table entry 'Chassis
Information (Type 3)' @ 0x000ebb98, field 'SKU Number', offset 0x15 has a
default value 'To be filled by O.E.M.' and probably has not been updated by the
BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.4 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ebc0d 'On Board Devices (Type 10)'
PASSED: Test 2, Entry @ 0x000ebcaa 'OEM Strings (Type 11)'
PASSED: Test 2, Entry @ 0x000ebcfb 'System Configuration Options (Type 12)'
PASSED: Test 2, Entry @ 0x000ebd7b 'System Boot Information (Type 32)'
PASSED: Test 2, Entry @ 0x000ebd91 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ebdb5 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ebdd9 'Cache Information (Type 7)'
PASSED: Test 2, Entry @ 0x000ebdfd 'Physical Memory Array (Type 16)'
FAILED [LOW] DMIAssetTag: Test 2, String index 0x04 in table entry 'Processor
Information (Type 4)' @ 0x000ebe16, field 'Asset Tag', offset 0x21 has a default
value 'Fill By OEM' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Processor
Information (Type 4)' @ 0x000ebe16, field 'Part Number', offset 0x22 has a
default value 'Fill By OEM' and probably has not been updated by the BIOS
vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.5 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0x000ebea1, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ebf0f 'Memory Device Mapped Address (Type 20)'
FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0x000ebf34, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ebfa2 'Memory Device Mapped Address (Type 20)'
FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0x000ebfc7, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ec035 'Memory Device Mapped Address (Type 20)'
FAILED [LOW] DMIAssetTag: Test 2, String index 0x05 in table entry 'Memory
Device (Type 17)' @ 0x000ec05a, field 'Asset Tag', offset 0x19 has a default
value '9876543210' and probably has not been updated by the BIOS vendor.

ADVICE: The DMI table contains data which is clearly been left in a default
setting and not been configured for this machine. Somebody has probably
forgotten to define this field and it basically means this field is effectively
useless, however the kernel does not use this data so the issue is fairly low.


ADVICE: It may be worth checking against section 7.18 of the System Management
BIOS (SMBIOS) Reference Specification (see http://www.dmtf.org/standards
/smbios).

PASSED: Test 2, Entry @ 0x000ec0c8 'Memory Device Mapped Address (Type 20)'
PASSED: Test 2, Entry @ 0x000ec0ed 'Memory Array Mapped Address (Type 19)'
PASSED: Test 2, Entry @ 0x000ec10e 'Unknown (Type 131)'
PASSED: Test 2, Entry @ 0x000ec150 'BIOS Language Information (Type 13)'
PASSED: Test 2, Entry @ 0x000ec177 'End of Table (Type 127)'

Test 3 of 3: Test DMI/SMBIOS3 tables for errors.
SKIPPED: Test 3, Cannot find SMBIOS30 table entry, skip the test.

================================================================================
24 passed, 8 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

microcode: Test if system is using latest microcode.
--------------------------------------------------------------------------------
Test 1 of 1: Test for most recent microcode being loaded.
This test verifies if the firmware has put a recent revision of the microcode
into the processor at boot time. Recent microcode is important to have all the
required features and errata updates for the processor.
The kernel did not report that CPU 0 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 1 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 2 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 3 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 4 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 5 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 6 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
The kernel did not report that CPU 7 has had a microcode update. The current
firmware is revision 0x12 and probably has not been updated.
SKIPPED: Test 1, Could not determine from kernel log if latest microcode has
been loaded.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

msr: MSR register tests.
--------------------------------------------------------------------------------
Test 1 of 5: Test CPU generic MSRs.
PASSED: Test 1, MSR 0x00000001 P5_MC_TYPE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000006 MONITOR_FILTER_SIZE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000017 PLATFORM_ID is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000002a EBL_CR_POWERON is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000001b APIC_BASE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000003a FEATURE_CONTROL is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000008b BIOS_SIGN_ID is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000000fe MTRRCAP is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000174 SYSENTER_CS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000175 SYSENTER_ESP is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000176 SYSENTER_EIP is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000179 MCG_CAP is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000017a MCG_STATUS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000019a CLOCK_MODULATION is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000019b THERM_INTERRUPT is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000001a0 MISC_ENABLE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000001b2 PACKAGE_THERM_INTERRUPT is consistent across 8
CPUs.
PASSED: Test 1, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000200 MTRR_PHYSBASE0 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000201 MTRR_PHYSMASK0 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000202 MTRR_PHYSBASE1 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000203 MTRR_PHYSMASK1 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000204 MTRR_PHYSBASE2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000205 MTRR_PHYSMASK2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000206 MTRR_PHYSBASE3 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000207 MTRR_PHYSMASK3 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000208 MTRR_PHYSBASE4 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000209 MTRR_PHYSMASK4 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020a MTRR_PHYSBASE5 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020b MTRR_PHYSMASK5 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020c MTRR_PHYSBASE6 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020d MTRR_PHYSMASK6 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020e MTRR_PHYSBASE7 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000020f MTRR_PHYSMASK7 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000210 MTRR_PHYSBASE8 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000211 MTRR_PHYSMASK8 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000212 MTRR_PHYSBASE9 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000213 MTRR_PHYSMASK9 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000250 MTRR_FIX64K_000 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000258 MTRR_FIX16K_800 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000259 MTRR_FIX16K_a00 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000268 MTRR_FIX4K_C000 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000269 MTRR_FIX4K_C800 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026a MTRR_FIX4K_D000 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026b MTRR_FIX4K_D800 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026c MTRR_FIX4K_E000 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026d MTRR_FIX4K_E800 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026e MTRR_FIX4K_F000 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000026f MTRR_FIX4K_F800 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000277 PAT is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000280 MC0_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000281 MC1_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000282 MC2_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000283 MC3_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000284 MC4_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000285 MC5_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000286 MC6_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000287 MC7_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000288 MC8_CTL2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000002ff MTRR_DEF_TYPE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x000003f1 PEBS_ENABLE is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000480 VMX_BASIC is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000481 VMX_PINPASED_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000482 VMX_PROCBASED_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000483 VMX_EXIT_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000484 VMX_ENTRY_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000485 VMX_MISC is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000486 VMX_CR0_FIXED0 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000487 VMX_CR0_FIXED1 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000488 VMX_CR4_FIXED0 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000489 VMX_CR4_FIXED1 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000048a VMX_VMX_VMCS_ENUM is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000048b VMX_PROCBASED_CTLS2 is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000048c VMX_EPT_VPID_CAP is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x0000048d VMX_TRUE_PINBASED_CTLS is consistent across 8
CPUs.
PASSED: Test 1, MSR 0x0000048e VMX_TRUE_PROCBASED_CTLS is consistent across 8
CPUs.
PASSED: Test 1, MSR 0x0000048f VMX_TRUE_EXIT_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0x00000490 VMX_TRUE_ENTRY_CTLS is consistent across 8 CPUs.
PASSED: Test 1, MSR 0xc0000080 EFER is consistent across 8 CPUs.
PASSED: Test 1, MSR 0xc0000081 STAR is consistent across 8 CPUs.
PASSED: Test 1, MSR 0xc0000082 LSTAR is consistent across 8 CPUs.
PASSED: Test 1, MSR 0xc0000084 FMASK is consistent across 8 CPUs.
PASSED: Test 1, MSR 0xc0000102 KERNEL_GS_BASE is consistent across 8 CPUs.

Test 2 of 5: Test CPU specific model MSRs.
CPU family: 0x6, model: 0x3a (Ivybridge)
PASSED: Test 2, MSR 0x000000ce MSR_PLATFORM_INFO is consistent across 8 CPUs.
PASSED: Test 2, MSR 0x000000e2 MSR_PKG_CST_CONFIG_CONTROL is consistent across 8
CPUs.
PASSED: Test 2, MSR 0x00000648 MSR_CONFIG_TDP_NOMINAL is consistent across 8
CPUs.
PASSED: Test 2, MSR 0x00000649 MSR_CONFIG_TDP_LEVEL1 is consistent across 8
CPUs.
PASSED: Test 2, MSR 0x0000064a MSR_CONFIG_TDP_LEVEL2 is consistent across 8
CPUs.
PASSED: Test 2, MSR 0x0000064b MSR_CONFIG_TDP_CONTROL is consistent across 8
CPUs.
PASSED: Test 2, MSR 0x0000064c MSR_TURBO_ACTIVATION_RATIO is consistent across 8
CPUs.

Test 3 of 5: Test all P State Ratios.
PASSED: Test 3, MSR 0x000000ce Minimum P-State is consistent across 8 CPUs.
PASSED: Test 3, MSR 0x000000ce Maximum P-State is consistent across 8 CPUs.

Test 4 of 5: Test C1 and C3 autodemotion.
PASSED: Test 4, MSR 0x000000e2 C1 and C3 Autodemotion is consistent across 8
CPUs.
C1 and C3 Autodemotion enabled.

Test 5 of 5: Test SMRR MSR registers.
PASSED: Test 5, MSR 0x000001f2 SMRR_PHYSBASE is consistent across 8 CPUs.
PASSED: Test 5, MSR 0x000001f2 SMRR_TYPE is consistent across 8 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_PHYSMASK is consistent across 8 CPUs.
PASSED: Test 5, MSR 0x000001f3 SMRR_VALID is consistent across 8 CPUs.

================================================================================
98 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

nx: Test if CPU NX is disabled by the BIOS.
--------------------------------------------------------------------------------
Test 1 of 3: Test CPU NX capability.
PASSED: Test 1, CPU has NX flags, BIOS is not disabling it.

Test 2 of 3: Test all CPUs have same BIOS set NX flag.
This test verifies that all CPUs have the same NX flag setting. Although rare,
BIOS may set the NX flag differently per CPU. 
PASSED: Test 2, All 8 CPUs have the same NX flag set.

Test 3 of 3: Test all CPUs have same msr setting in MSR 0x1a0.
This test verifies that all CPUs have the same NX flag setting by examining the
per CPU MSR register 0x1a0.
PASSED: Test 3, All 8 CPUs have the NX flag in MSR 0x1a0 set.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

cpufreq: CPU frequency scaling tests.
--------------------------------------------------------------------------------
WARNING: Test 1, Cannot set CPU 0 governor to userspace.
Failed to intialise cpufreq to set CPU speed
Test 1 of 7: CPU frequency table consistency
PASSED: Test 1, CPU frequency tables are consistent

Test 2 of 7: CPU frequency table duplicates
PASSED: Test 2, No duplicates in CPU frequency table

Test 3 of 7: CPU frequency firmware limits
PASSED: Test 3, No BIOS limits imposed

Test 4 of 7: CPU frequency claimed maximum
PASSED: Test 4, No max frequencies present

Test 5 of 7: CPU frequency SW_ANY control
SKIPPED: Test 5, Can't set CPU frequencies

Test 6 of 7: CPU frequency SW_ALL control
SKIPPED: Test 6, Can't set CPU frequencies

Test 7 of 7: CPU frequency performance tests.
SKIPPED: Test 7, Can't set CPU frequencies

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 3 skipped, 0 info only.
================================================================================

maxfreq: Test max CPU frequencies against max scaling frequency.
--------------------------------------------------------------------------------
Test 1 of 1: Maximum CPU frequency test.
This test checks the maximum CPU frequency as detected by the kernel for each
CPU against maxiumum frequency as specified by the BIOS frequency scaling
settings.
PASSED: Test 1, 8 CPUs passed the maximum frequency check.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

virt: CPU Virtualisation Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: CPU Virtualisation Configuration test.
Check VT/VMX Virtualization extensions are set up correctly.
PASSED: Test 1, Virtualization extensions supported and enabled by BIOS.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pnp: BIOS Support Installation structure test.
--------------------------------------------------------------------------------
Test 1 of 1: PnP BIOS Support Installation structure test.
This test tries to find and sanity check the Plug and Play BIOS Support
Installation Check structure. 

Found PnP Installation Check structure at 0x000f0ad0
  Signature                          : $PnP
  Version                            : 0x10 (1.0)
  Length                             : 0x0021 bytes
  Control Field                      : 0x0000 (Not supported)
  Event Notification Flag Address    : 0x00000000 (undefined)
  Real Mode 16 bit Code Address      : 0xf000:c776
  Real Mode 16 bit Data Address      : 0xf000:0000
  16 bit Protected Mode Code Address : 0x000fc79e
  16 bit Protected Mode Data Address : 0x000f0000
  OEM Device Identifier              : 0x00000000 (undefined)

PASSED: Test 1, Version 1.0 detected.
PASSED: Test 1, PnP Installation Check structure is the correct length of 33
bytes.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pciirq: PCI IRQ Routing Table test.
--------------------------------------------------------------------------------
Test 1 of 1: PCI IRQ Routing Table test.
This test tries to find and sanity check the PCI IRQ Routing Table, as defined
by http://www.microsoft.com/taiwan/whdc/archive/pciirq.mspx and described in
pages 233-238 of PCI System Architecture, Fourth Edition, Mindshare, Inc.
(1999). NOTE: The PCI IRQ Routing Table only really knows about ISA IRQs and is
generally not used with APIC. 

Found PCI IRQ Routing Table at 0x000fd140
  Signature             : $PIR
  Version               : 0x0100 (1.0)
  Table Size            : 0x0100 bytes (14 slot entries)
  PCI Router ID         : 00:1f.0
  PCI Exclusive IRQs    : 0x0000 (none)
  Compatible PCI Router : 8086:27b8
  Miniport Data         : 0x00000000 (none)
  Reserved              : 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  Checksum              : 0xc0

Bus:Dev Slot  INTA#   INTB#   INTC#   INTD#
 00:1f   00  69/14f8 63/14f8 62/14f8 60/1cf8 
 00:16   00  60/1cf8 63/14f8 62/14f8 61/14f8 
 02:00   21  60/1cf8 61/14f8 62/14f8 63/14f8 
 03:00   22  61/14f8 62/14f8 63/14f8 60/1cf8 
 04:00   09  63/14f8 60/1cf8 61/14f8 62/14f8 
 00:04   00  60/1cf8 61/14f8 62/14f8 63/14f8 
 00:01   00  60/1cf8 61/14f8 62/14f8 63/14f8 
 00:06   00  63/14f8 60/1cf8 61/14f8 62/14f8 
 00:14   00  60/1cf8                         
 00:1d   00  6b/14f8 63/14f8 60/1cf8 62/14f8 
 00:1a   00  60/1cf8 69/14f8 62/14f8 63/14f8 
 00:1b   00  6a/14f8                         
 00:1c   00  60/1cf8 61/14f8 62/14f8 63/14f8 
 01:00   00  60/1cf8 61/14f8 62/14f8 63/14f8 

PASSED: Test 1, The Compatible PCI Interrupt Router is defined.
PASSED: Test 1, Table size was correct for 14 slot entries.
PASSED: Test 1, Reserved region is set to zero.
PASSED: Test 1, All 14 slots have sane looking link and IRQ bitmaps.

================================================================================
4 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

mpcheck: MultiProcessor Tables tests.
--------------------------------------------------------------------------------
The kernel is using the ACPI MADT for SMP configuration information, so the
Multiprocessor Tables are not used by the kernel. Any errors in the tables will
not affect the operation of Linux unless it is booted with ACPI disabled.

NOTE: Since ACPI is being used in preference to the Multiprocessor Tables, any
errors found in the mpcheck tests will be tagged as LOW errors.

Test 1 of 9: Test MP header.
PASSED: Test 1, MP header looks sane.

Test 2 of 9: Test MP CPU entries.
PASSED: Test 2, All 4 CPU entries look sane.

Test 3 of 9: Test MP Bus entries.
PASSED: Test 3, All 6 Bus Entries looked sane.

Test 4 of 9: Test MP IO APIC entries.
PASSED: Test 4, All 1 IO APIC Entries look sane.

Test 5 of 9: Test MP IO Interrupt entries.
PASSED: Test 5, All 58 IO Interrupt Entries look sane.

Test 6 of 9: Test MP Local Interrupt entries.
PASSED: Test 6, All 2 Local Interrupt Entries look sane.

Test 7 of 9: Test MP System Address entries.
FAILED [LOW] MPSysAddrSpaceAddrLength: Test 7, System Address Space Mapping
Entry 3 (@0x000fd790) has a zero sized Address Length.
FAILED [LOW] MPSysAddrSpaceAddrLength: Test 7, System Address Space Mapping
Entry 4 (@0x000fd7a4) has a zero sized Address Length.

Test 8 of 9: Test MP Bus Hierarchy entries.
PASSED: Test 8, All 1 Bus Hierarchy Entries look sane.

Test 9 of 9: Test MP Compatible Bus Address Space entries.
PASSED: Test 9, All 2 Compatible Bus Address Space Entries look sane.

================================================================================
8 passed, 2 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

hda_audio: HDA Audio Pin Configuration test.
--------------------------------------------------------------------------------
Test 1 of 1: HDA Audio Pin Configuration test.
Checking 'hwC0D0':
Vendor Name    : VIA
Vendor ID      : 0x11068446
Subsystem ID   : 0x10431487
Revision ID    : 0x100000
BIOS pin configurations:
  Pin  Setting
  0x0024 0x901701f0
  0x0025 0x022140f0
  0x0028 0x422140f0
  0x0029 0x90a70137
  0x002a 0x418130f0
  0x002b 0x01a1903e
  0x002d 0x074411f0
  0x0030 0x50a601f0
  0x0033 0x501701f0
Driver defined pin configurations:
  Pin  Setting
  0x0024 0x991301f0
  0x0033 0x991301f1
BIOS pin configurations required software override to make HDA audio work
correctly.
The driver or user provided overrides should be corrected in BIOS firmware.

Checking 'hwC1D0':
Vendor Name    : Nvidia
Vendor ID      : 0x10de0042
Subsystem ID   : 0x10432116
Revision ID    : 0x100100
BIOS pin configurations:
  Pin  Setting
  0x0004 0x585600f0
  0x0005 0x185600f0
  0x0006 0x585600f0
  0x0007 0x185600f0
PASSED: Test 1, Default BIOS pin configurations did not have software override.


================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

ebda: Test EBDA region is mapped and reserved in memory map table.
--------------------------------------------------------------------------------
Machine is not using traditional BIOS firmware, skipping test.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bios32: BIOS32 Service Directory test.
--------------------------------------------------------------------------------
Machine is not using traditional BIOS firmware, skipping test.
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

apicedge: APIC edge/level test.
--------------------------------------------------------------------------------
Test 1 of 1: Legacy and PCI Interrupt Edge/Level trigger tests.
PASSED: Test 1, Legacy interrupts are edge and PCI interrupts are level
triggered.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

xenv: XENV Xen Environment Table tests.
--------------------------------------------------------------------------------
ACPI XENV table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

xsdt: XSDT Extended System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: XSDT Extended System Description Table test.
PASSED: Test 1, No issues found in XSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wmi: Extract and analyse Windows Management Instrumentation (WMI).
--------------------------------------------------------------------------------
Test 1 of 1: Windows Management Instrumentation test.

\_SB_.ATKD._WDG (1 of 2)
  GUID: 97845ED0-4E6D-11DE-8A39-0800200C9A66
  WMI Method:
    Flags          : 0x02 (Method)
    Object ID      : NB
    Instance       : 0x01
    Driver         : asus-wmi (Asus)
PASSED: Test 1, 97845ED0-4E6D-11DE-8A39-0800200C9A66 has associated method
\_SB_.ATKD.WMNB

\_SB_.ATKD._WDG (2 of 2)
  GUID: 0B3CBB35-E3C2-45ED-91C2-4C5A6D195D1C
  WMI Event:
    Flags          : 0x08 (Event)
    Notification ID: 0xff
    Reserved       : 0x00
    Instance       : 0x01
    Driver         : asus-nb-wmi (Asus)
PASSED: Test 1, All events associated with \_SB_.ATKD._WDG are handled by a
kernel driver.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

wdat: WDAT Microsoft Hardware Watchdog Action Table test.
--------------------------------------------------------------------------------
ACPI WDAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

wakealarm: ACPI Wakealarm tests.
--------------------------------------------------------------------------------
Test 1 of 5: Test existence of RTC with alarm interface.
PASSED: Test 1, RTC with a RTC alarm ioctl() interface found.

Test 2 of 5: Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 1 seconds in the future.
PASSED: Test 2, RTC wakealarm was triggered successfully.

Test 3 of 5: Test if wakealarm is fired.
PASSED: Test 3, RTC wakealarm triggered and fired successfully.

Test 4 of 5: Multiple wakealarm firing tests.
Trigger wakealarm for 1 seconds in the future.
Trigger wakealarm for 2 seconds in the future.
Trigger wakealarm for 3 seconds in the future.
Trigger wakealarm for 4 seconds in the future.
PASSED: Test 4, RTC wakealarm triggered and fired successfully.

Test 5 of 5: Reset wakealarm time.
PASSED: Test 5, RTC wakealarm set.
PASSED: Test 5, RTC wakealarm reset correctly back to 31/5/2016 05:30:59.

================================================================================
6 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

waet: WAET Windows ACPI Emulated Devices Table test.
--------------------------------------------------------------------------------
ACPI WAET table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

uefi: UEFI Data Table test.
--------------------------------------------------------------------------------
ACPI UEFI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

tpm2: TPM2 Trusted Platform Module 2 test.
--------------------------------------------------------------------------------
ACPI TPM2 table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

tcpa: TCPA Trusted Computing Platform Alliance Capabilities Table test.
--------------------------------------------------------------------------------
ACPI TCPA table does not exist, skipping test
Aborted test, initialisation failed.
================================================================================
0 passed, 0 failed, 0 warning, 1 aborted, 0 skipped, 0 info only.
================================================================================

syntaxcheck: Re-assemble DSDT and SSDTs to find syntax errors and warnings.
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble and reassemble DSDT and SSDTs.

Checking ACPI table DSDT (#0)

FAILED [MEDIUM] AMLAsmASL_MSG_TAG_LARGER: Test 1, Assembler warning in line 2400
Line | AML source
--------------------------------------------------------------------------------
02397|                 Add (Subtract (M1MX, M1MN), One, M1LN) /* \_SB_.PCI0._CRS.M1LN */
02398|                 If (LOr (LEqual (MM64, Zero), LLessEqual (OSYS, 0x07D3)))
02399|                 {
02400|                     CreateDWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
     |                                                              ^
     | Warning 3128: ResourceTag larger than Field    (Size mismatch, Tag: 64 bits, Field: 32 bits)
02401|                     Store (Zero, MSLN) /* \_SB_.PCI0._CRS.MSLN */
02402|                 }
02403|                 Else
================================================================================

ADVICE: (for Warning #3128, ASL_MSG_TAG_LARGER): The resource tag length is
larger than the field length.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
3018
Line | AML source
--------------------------------------------------------------------------------
03015|                             Store (One, DONE) /* \_SB_.PCI0.PEG0.GFX0.DONE */
03016|                         }
03017| 
03018|                         Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
     |                                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
03019|                         {
03020|                             If (LGreaterEqual (MSOS (), OSW8))
03021|                             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
3223
Line | AML source
--------------------------------------------------------------------------------
03220|                             Store (One, DONE) /* \_SB_.PCI0.PEG0.GFX0.DONE */
03221|                         }
03222| 
03223|                         Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
     |                                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
03224|                         {
03225|                             If (LGreaterEqual (MSOS (), OSW8))
03226|                             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
3639
Line | AML source
--------------------------------------------------------------------------------
03636|                         0xB6, 
03637|                         0xBA
03638|                     })
03639|                     Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
     |                               ^
     | Warning 3115: Not all control paths return a value    (_DSM)
03640|                     {
03641|                         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
03642|                         Method (CTOI, 1, Serialized)
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_RETURN_VALUE: Test 1, Assembler warning
in line 3639
Line | AML source
--------------------------------------------------------------------------------
03636|                         0xB6, 
03637|                         0xBA
03638|                     })
03639|                     Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
     |                               ^
     | Warning 3107: Reserved method must return a value    (Integer/String/Buffer/Package/Reference required for _DSM)
03640|                     {
03641|                         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
03642|                         Method (CTOI, 1, Serialized)
================================================================================

ADVICE: (for Warning #3107, ASL_MSG_RESERVED_RETURN_VALUE): A reserved method
was expected to return a value, however, it does not. This is unexpected
behaviour that does not conform the the ACPI specification.

Assembler remark in line 3641
Line | AML source
--------------------------------------------------------------------------------
03638|                     })
03639|                     Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
03640|                     {
03641|                         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                                 ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
03642|                         Method (CTOI, 1, Serialized)
03643|                         {
03644|                             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 3644
Line | AML source
--------------------------------------------------------------------------------
03641|                         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
03642|                         Method (CTOI, 1, Serialized)
03643|                         {
03644|                             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
03645|                             While (One)
03646|                             {
03647|                                 Store (ToInteger (Arg0), _T_0) /* \_SB_.PCI0.PEG0.GFX0._DSM.CTOI._T_0 */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
3709
Line | AML source
--------------------------------------------------------------------------------
03706|                             }
03707|                         }
03708| 
03709|                         Method (ITLP, 0, NotSerialized)
     |                                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
03710|                         {
03711|                             Name (DID1, Zero)
03712|                             Name (DID2, Zero)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
4049
Line | AML source
--------------------------------------------------------------------------------
04046|                         }
04047|                     }
04048| 
04049|                     Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
     |                               ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
04050|                     {
04051|                         If (RBUF)
04052|                         {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 4054
Line | AML source
--------------------------------------------------------------------------------
04051|                         If (RBUF)
04052|                         {
04053|                             Add (Arg0, RBUF, Local0)
04054|                             ShiftLeft (Arg1, 0x03, Local1)
     |                                                        ^
     | Warning 3144: Method Local is set but never used    (Local1)
04055|                             Name (VBUF, Buffer (Arg1) {})
04056|                             OperationRegion (VROM, SystemMemory, Local0, 0x1000)
04057|                             Field (VROM, ByteAcc, NoLock, Preserve)
================================================================================
FAILED [HIGH] AMLAsmASL_MSG_RESERVED_OPERAND_TYPE: Test 1, Assembler error in
line 4067
Line | AML source
--------------------------------------------------------------------------------
04064|                         }
04065|                         Else
04066|                         {
04067|                             Return (Zero)
     |                                       ^
     | Error 6105: Invalid object type for reserved name    (_ROM: found Integer, Buffer required)
04068|                         }
04069|                     }
04070| 
================================================================================

ADVICE: (for Error #6105, ASL_MSG_RESERVED_OPERAND_TYPE): The object type for
the reserved name does not match the expected type.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 4085
Line | AML source
--------------------------------------------------------------------------------
04082|                         CreateDWordField (GPSP, 0x18, CPUE)
04083|                         CreateDWordField (GPSP, 0x1C, TM01)
04084|                         CreateDWordField (GPSP, 0x20, TM02)
04085|                         Method (GPSD, 4, Serialized)
     |                                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
04086|                         {
04087|                             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
04088|                             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================
Assembler remark in line 4087
Line | AML source
--------------------------------------------------------------------------------
04084|                         CreateDWordField (GPSP, 0x20, TM02)
04085|                         Method (GPSD, 4, Serialized)
04086|                         {
04087|                             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                                     ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
04088|                             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
04089|                             If (LNotEqual (Arg1, 0x0100))
04090|                             {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 4088
Line | AML source
--------------------------------------------------------------------------------
04085|                         Method (GPSD, 4, Serialized)
04086|                         {
04087|                             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
04088|                             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
04089|                             If (LNotEqual (Arg1, 0x0100))
04090|                             {
04091|                                 Return (0x80000002)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4163
Line | AML source
--------------------------------------------------------------------------------
04160|                                 ElseIf (LEqual (_T_0, 0x2A))
04161|                                 {
04162|                                     CreateByteField (Arg3, Zero, PSH0)
04163|                                     CreateBitField (Arg3, 0x08, GPUT)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [GPUT] is within a method [GPSD])
04164|                                     CreateBitField (Arg3, 0x09, CPUT)
04165|                                     CreateBitField (Arg3, 0x0A, FANS)
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4165
Line | AML source
--------------------------------------------------------------------------------
04162|                                     CreateByteField (Arg3, Zero, PSH0)
04163|                                     CreateBitField (Arg3, 0x08, GPUT)
04164|                                     CreateBitField (Arg3, 0x09, CPUT)
04165|                                     CreateBitField (Arg3, 0x0A, FANS)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [FANS] is within a method [GPSD])
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
04167|                                     CreateBitField (Arg3, 0x0C, ENGR)
04168|                                     CreateBitField (Arg3, 0x0D, SEN1)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4166
Line | AML source
--------------------------------------------------------------------------------
04163|                                     CreateBitField (Arg3, 0x08, GPUT)
04164|                                     CreateBitField (Arg3, 0x09, CPUT)
04165|                                     CreateBitField (Arg3, 0x0A, FANS)
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [SKIN] is within a method [GPSD])
04167|                                     CreateBitField (Arg3, 0x0C, ENGR)
04168|                                     CreateBitField (Arg3, 0x0D, SEN1)
04169|                                     CreateBitField (Arg3, 0x0E, SEN2)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4167
Line | AML source
--------------------------------------------------------------------------------
04164|                                     CreateBitField (Arg3, 0x09, CPUT)
04165|                                     CreateBitField (Arg3, 0x0A, FANS)
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
04167|                                     CreateBitField (Arg3, 0x0C, ENGR)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [ENGR] is within a method [GPSD])
04168|                                     CreateBitField (Arg3, 0x0D, SEN1)
04169|                                     CreateBitField (Arg3, 0x0E, SEN2)
04170|                                     While (One)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4168
Line | AML source
--------------------------------------------------------------------------------
04165|                                     CreateBitField (Arg3, 0x0A, FANS)
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
04167|                                     CreateBitField (Arg3, 0x0C, ENGR)
04168|                                     CreateBitField (Arg3, 0x0D, SEN1)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [SEN1] is within a method [GPSD])
04169|                                     CreateBitField (Arg3, 0x0E, SEN2)
04170|                                     While (One)
04171|                                     {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 4169
Line | AML source
--------------------------------------------------------------------------------
04166|                                     CreateBitField (Arg3, 0x0B, SKIN)
04167|                                     CreateBitField (Arg3, 0x0C, ENGR)
04168|                                     CreateBitField (Arg3, 0x0D, SEN1)
04169|                                     CreateBitField (Arg3, 0x0E, SEN2)
     |                                                                   ^
     | Remark 2089: Object is not referenced    (Name [SEN2] is within a method [GPSD])
04170|                                     While (One)
04171|                                     {
04172|                                         Store (PSH0, _T_1) /* \_SB_.PCI0.PEG0.GFX0.GPSD._T_1 */
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
4215
Line | AML source
--------------------------------------------------------------------------------
04212|                         }
04213|                     }
04214| 
04215|                     Method (NINT, 2, NotSerialized)
     |                               ^
     | Warning 3115: Not all control paths return a value    (NINT)
04216|                     {
04217|                         If (LEqual (PBCC, One))
04218|                         {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7179
Line | AML source
--------------------------------------------------------------------------------
07176|                 Return (Zero)
07177|             }
07178| 
07179|             Method (POSC, 3, Serialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
07180|             {
07181|                 CreateDWordField (Arg2, Zero, CDW1)
07182|                 CreateDWordField (Arg2, 0x08, CDW3)
================================================================================
Assembler remark in line 7671
Line | AML source
--------------------------------------------------------------------------------
07668| 
07669|     Method (UXDV, 1, Serialized)
07670|     {
07671|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                 ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
07672|         Store (0xFF, Local0)
07673|         While (One)
07674|         {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7715
Line | AML source
--------------------------------------------------------------------------------
07712|         Return (Local0)
07713|     }
07714| 
07715|     Method (RRIO, 4, Serialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg3)
07716|     {
07717|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
07718|         While (One)
================================================================================
Assembler remark in line 7717
Line | AML source
--------------------------------------------------------------------------------
07714| 
07715|     Method (RRIO, 4, Serialized)
07716|     {
07717|         Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                 ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
07718|         While (One)
07719|         {
07720|             Store (Add (Arg0, Zero), _T_0) /* \RRIO._T_0 */
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7927
Line | AML source
--------------------------------------------------------------------------------
07924|         }
07925|     }
07926| 
07927|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg0)
07928|     {
07929|     }
07930| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7927
Line | AML source
--------------------------------------------------------------------------------
07924|         }
07925|     }
07926| 
07927|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg1)
07928|     {
07929|     }
07930| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7927
Line | AML source
--------------------------------------------------------------------------------
07924|         }
07925|     }
07926| 
07927|     Method (RDMA, 3, NotSerialized)
     |               ^
     | Remark 2146: Method Argument is never used    (Arg2)
07928|     {
07929|     }
07930| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7940
Line | AML source
--------------------------------------------------------------------------------
07937|         Name (PA4H, Zero)
07938|         Name (PA5H, Zero)
07939|         Name (PA6H, Zero)
07940|         Method (NPTS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
07941|         {
07942|             Store (PM0H, PA0H) /* \_SB_.PCI0.PA0H */
07943|             Store (PM1H, PA1H) /* \_SB_.PCI0.PA1H */
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 7951
Line | AML source
--------------------------------------------------------------------------------
07948|             Store (PM6H, PA6H) /* \_SB_.PCI0.PA6H */
07949|         }
07950| 
07951|         Method (NWAK, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
07952|         {
07953|             Store (PA0H, PM0H) /* \_SB_.PCI0.PM0H */
07954|             Store (PA1H, PM1H) /* \_SB_.PCI0.PM1H */
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 8169
Line | AML source
--------------------------------------------------------------------------------
08166|         Method (_INI, 0, NotSerialized)  // _INI: Initialize
08167|         {
08168|             Store (0x07D0, OSYS) /* \OSYS */
08169|             If (CondRefOf (\_OSI, Local0))
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local0)
08170|             {
08171|                 If (_OSI ("Windows 2001"))
08172|                 {
================================================================================
Assembler remark in line 8414
Line | AML source
--------------------------------------------------------------------------------
08411| 
08412|             Method (PECI, 7, Serialized)
08413|             {
08414|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
08415|                 While (LEqual (And (PBSY, 0x02), 0x02))
08416|                 {
08417|                     If (LGreater (Arg6, 0x1000))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
9111
Line | AML source
--------------------------------------------------------------------------------
09108|         Name (OSVT, 0x40)
09109|         Name (OSW7, 0x80)
09110|         Name (OSW8, 0x0100)
09111|         Method (MCTH, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
09112|         {
09113|             If (LLess (SizeOf (Arg0), SizeOf (Arg1)))
09114|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 9143
Line | AML source
--------------------------------------------------------------------------------
09140|                 Return (OSFG) /* \OSFG */
09141|             }
09142| 
09143|             If (CondRefOf (\_OSI, Local0))
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local0)
09144|             {
09145|                 If (_OSI ("Windows 2001"))
09146|                 {
================================================================================
FAILED [HIGH] AMLAsmASL_MSG_UPPER_CASE: Test 1, Assembler error in line 9255
Line | AML source
--------------------------------------------------------------------------------
09252|         Name (PWKY, Zero)
09253|         Device (ATKD)
09254|         {
09255|             Name (_HID, "pnp0c14")  // _HID: Hardware ID
     |                                ^
     | Error 6136: Non-hex letters must be upper case    (pnp0c14)
09256|             Name (_UID, "ATK")  // _UID: Unique ID
09257|             Name (ATKQ, Package (0x10)
09258|             {
================================================================================

ADVICE: (for Error #6136, ASL_MSG_UPPER_CASE): Characters in literal string that
are not hexadecimal letters must be upper case.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 9325
Line | AML source
--------------------------------------------------------------------------------
09322|                 /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
09323|                 /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
09324|             })
09325|             Method (WMNB, 3, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
09326|             {
09327|                 CreateDWordField (Arg2, Zero, IIA0)
09328|                 CreateDWordField (Arg2, 0x04, IIA1)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
9325
Line | AML source
--------------------------------------------------------------------------------
09322|                 /* 0018 */  0xC2, 0xE3, 0xED, 0x45, 0x91, 0xC2, 0x4C, 0x5A,  /* ...E..LZ */
09323|                 /* 0020 */  0x6D, 0x19, 0x5D, 0x1C, 0xFF, 0x00, 0x01, 0x08   /* m.]..... */
09324|             })
09325|             Method (WMNB, 3, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
09326|             {
09327|                 CreateDWordField (Arg2, Zero, IIA0)
09328|                 CreateDWordField (Arg2, 0x04, IIA1)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 10140
Line | AML source
--------------------------------------------------------------------------------
10137|                 Notify (ATKD, 0xFF) // Hardware-Specific
10138|             }
10139| 
10140|             Method (INIT, 1, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
10141|             {
10142|                 Store (One, ATKP) /* \_SB_.ATKP */
10143|                 Return (MNAM) /* \_SB_.MNAM */
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
10742
Line | AML source
--------------------------------------------------------------------------------
10739|         Device (ASHS)
10740|         {
10741|             Name (_HID, "ATK4001" /* Asus Radio Control Button */)  // _HID: Hardware ID
10742|             Method (HSWC, 1, Serialized)
     |                       ^
     | Warning 3115: Not all control paths return a value    (HSWC)
10743|             {
10744|                 If (LLess (Arg0, 0x02))
10745|                 {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 10892
Line | AML source
--------------------------------------------------------------------------------
10889|                 Divide (Local1, 0x64, Local3, Local6)
10890|                 Store (Local6, Index (PBIF, 0x06))
10891|                 Store (Local6, LOW2) /* \_SB_.PCI0.BAT0.LOW2 */
10892|                 Divide (Local1, 0x64, Local3, Local7)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local3)
10893|                 Store (Local7, Index (PBIF, 0x07))
10894|                 Store (Local7, Index (PBIF, 0x08))
10895|             }
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 10903
Line | AML source
--------------------------------------------------------------------------------
10900|                 {
10901|                     Store (DerefOf (Index (PBIF, 0x04)), Local0)
10902|                     Add (Local0, 0x01F4, Local0)
10903|                     Divide (Local0, 0x03E8, Local1, DVOT) /* \_SB_.PCI0.BAT0.DVOT */
     |                                                 ^
     | Warning 3144: Method Local is set but never used    (Local1)
10904|                     Store (Zero, Index (PBIF, Zero))
10905|                     Multiply (DerefOf (Index (PBIF, One)), DVOT, Index (PBIF, One))
10906|                     Multiply (DerefOf (Index (PBIF, 0x02)), DVOT, Index (PBIF, 0x02))
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 10963
Line | AML source
--------------------------------------------------------------------------------
10960|                 Return (PBIF) /* \_SB_.PCI0.BAT0.PBIF */
10961|             }
10962| 
10963|             Method (FBST, 4, NotSerialized)
     |                       ^
     | Remark 2146: Method Argument is never used    (Arg0)
10964|             {
10965|                 And (Arg1, 0xFFFF, Local1)
10966|                 Store (Zero, Local0)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11296
Line | AML source
--------------------------------------------------------------------------------
11293|             Return (Local0)
11294|         }
11295| 
11296|         Method (BIF9, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11297|         {
11298|             Name (BSTR, Buffer (0x20) {})
11299|             Store (SMBR (RDBL, BADR, 0x21), Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_SOME_NO_RETVAL: Test 1, Assembler warning in line
11401
Line | AML source
--------------------------------------------------------------------------------
11398|     {
11399|         Method (CHGS, 1, Serialized)
11400|         {
11401|             Store (\_SB.PCI0.LPCB.EC0.BCHG (Arg0), Local0)
     |                                         ^
     | Warning 3122: Called method may not always return a value  
11402|             Return (Local0)
11403|         }
11404| 
================================================================================

ADVICE: (for Warning #3122, ASL_MSG_SOME_NO_RETVAL): Method sometimes return a
value, sometimes it does not. This is inconsistent behaviour and a bug in the
AML. This needs to be fixed to avoid incorrect behaviour at run time.

FAILED [MEDIUM] AMLAsmASL_MSG_SOME_NO_RETVAL: Test 1, Assembler warning in line
11463
Line | AML source
--------------------------------------------------------------------------------
11460|         {
11461|             If (BATP (Zero))
11462|             {
11463|                 Store (BCLE (Zero), Local0)
     |                          ^
     | Warning 3122: Called method may not always return a value  
11464|                 If (LEqual (Local0, Zero))
11465|                 {
11466|                     Notify (BAT0, 0x80) // Status Change
================================================================================

ADVICE: (for Warning #3122, ASL_MSG_SOME_NO_RETVAL): Method sometimes return a
value, sometimes it does not. This is inconsistent behaviour and a bug in the
AML. This needs to be fixed to avoid incorrect behaviour at run time.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11627
Line | AML source
--------------------------------------------------------------------------------
11624|                 0x80000000, 
11625|                 0x80000000
11626|             })
11627|             Method (TSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11628|             {
11629|                 Name (TMPC, Zero)
11630|                 Store (^^PCI0.LPCB.EC0.ECPU, TMPC) /* \_SB_.PTID.TSDD.TMPC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11642
Line | AML source
--------------------------------------------------------------------------------
11639|                 Return (Ones)
11640|             }
11641| 
11642|             Method (PSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11643|             {
11644|                 Name (PWRC, Zero)
11645|                 Store (PWRG (), PWRC) /* \_SB_.PTID.PSDD.PWRC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11657
Line | AML source
--------------------------------------------------------------------------------
11654|                 Return (Ones)
11655|             }
11656| 
11657|             Method (OSDD, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11658|             {
11659|                 Name (OSDC, Zero)
11660|                 Store (OSDG (), OSDC) /* \_SB_.PTID.OSDD.OSDC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11725
Line | AML source
--------------------------------------------------------------------------------
11722|                 Return (MBOX) /* \_SB_.PTID.MBOX */
11723|             }
11724| 
11725|             Method (WPMD, 1, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11726|             {
11727|                 If (LNotEqual (SizeOf (Arg0), 0x1A))
11728|                 {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11795
Line | AML source
--------------------------------------------------------------------------------
11792|                 Store (Zero, CYCT) /* \_SB_.PTID.CYCT */
11793|             }
11794| 
11795|             Method (RPCS, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11796|             {
11797|                 Name (TPCS, Zero)
11798|                 If (LGreater (CYCT, Zero))
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11811
Line | AML source
--------------------------------------------------------------------------------
11808|                 Return (TPCS) /* \_SB_.PTID.RPCS.TPCS */
11809|             }
11810| 
11811|             Method (RPEC, 0, NotSerialized)
     |                       ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11812|             {
11813|                 Name (TPEC, Zero)
11814|                 Store (ERRN, TPEC) /* \_SB_.PTID.RPEC.TPEC */
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11884
Line | AML source
--------------------------------------------------------------------------------
11881|             Return (Zero)
11882|         }
11883| 
11884|         Method (GVER, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11885|         {
11886|             OperationRegion (\FGVR, SystemMemory, Arg0, Arg1)
11887|             Field (FGVR, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11897
Line | AML source
--------------------------------------------------------------------------------
11894|             Return (Zero)
11895|         }
11896| 
11897|         Method (MF30, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11898|         {
11899|             OperationRegion (FM30, SystemMemory, Arg0, 0x08)
11900|             Field (FM30, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11933
Line | AML source
--------------------------------------------------------------------------------
11930|             Return (Zero)
11931|         }
11932| 
11933|         Method (G30V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11934|         {
11935|             If (LLess (Arg1, 0x0C))
11936|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11953
Line | AML source
--------------------------------------------------------------------------------
11950|             Return (Zero)
11951|         }
11952| 
11953|         Method (EC01, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11954|         {
11955|             If (LLess (Arg1, 0x10))
11956|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
11981
Line | AML source
--------------------------------------------------------------------------------
11978|             Return (DerefOf (Index (Local0, Zero)))
11979|         }
11980| 
11981|         Method (EC02, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
11982|         {
11983|             If (LLess (Arg1, 0x30))
11984|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 12024
Line | AML source
--------------------------------------------------------------------------------
12021|             Return (Local2)
12022|         }
12023| 
12024|         Method (GENW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
12025|         {
12026|             Store (Zero, RTCW) /* \_SB_.RTCW */
12027|         }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12038
Line | AML source
--------------------------------------------------------------------------------
12035| 
12036|     Scope (_SB.ATKD)
12037|     {
12038|         Method (MF1X, 4, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12039|         {
12040|             OperationRegion (FM1X, SystemMemory, Arg0, 0x08)
12041|             Field (FM1X, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12130
Line | AML source
--------------------------------------------------------------------------------
12127|             Return (Local0)
12128|         }
12129| 
12130|         Method (G10V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12131|         {
12132|             If (LLess (Arg1, 0x0C))
12133|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12150
Line | AML source
--------------------------------------------------------------------------------
12147|             Return (Zero)
12148|         }
12149| 
12150|         Method (SRTC, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12151|         {
12152|             If (LLess (Arg1, 0x0C))
12153|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12199
Line | AML source
--------------------------------------------------------------------------------
12196|             Return (Local0)
12197|         }
12198| 
12199|         Method (G11V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12200|         {
12201|             If (LLess (Arg1, 0x0C))
12202|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12219
Line | AML source
--------------------------------------------------------------------------------
12216|             Return (Zero)
12217|         }
12218| 
12219|         Method (GBAT, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12220|         {
12221|             If (LLess (Arg1, 0x0A))
12222|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12239
Line | AML source
--------------------------------------------------------------------------------
12236|             Return (Zero)
12237|         }
12238| 
12239|         Method (ASBR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12240|         {
12241|             If (LLess (Arg1, 0x30))
12242|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12385
Line | AML source
--------------------------------------------------------------------------------
12382|             Return (0x10)
12383|         }
12384| 
12385|         Method (BTCR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12386|         {
12387|             If (LLess (Arg1, 0x09))
12388|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12424
Line | AML source
--------------------------------------------------------------------------------
12421|             Return (Local0)
12422|         }
12423| 
12424|         Method (G12V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12425|         {
12426|             If (LLess (Arg1, 0x0C))
12427|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12444
Line | AML source
--------------------------------------------------------------------------------
12441|             Return (Zero)
12442|         }
12443| 
12444|         Method (GLDI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12445|         {
12446|             If (LLess (Arg1, 0x10))
12447|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12466
Line | AML source
--------------------------------------------------------------------------------
12463|             Return (Zero)
12464|         }
12465| 
12466|         Method (LDCR, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12467|         {
12468|             If (LLess (Arg1, 0x0A))
12469|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12536
Line | AML source
--------------------------------------------------------------------------------
12533|             Return (Local0)
12534|         }
12535| 
12536|         Method (G13V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12537|         {
12538|             If (LLess (Arg1, 0x0C))
12539|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12556
Line | AML source
--------------------------------------------------------------------------------
12553|             Return (Zero)
12554|         }
12555| 
12556|         Method (GTSI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12557|         {
12558|             If (LLess (Arg1, 0x0C))
12559|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12596
Line | AML source
--------------------------------------------------------------------------------
12593|             Return (Zero)
12594|         }
12595| 
12596|         Method (GTSV, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12597|         {
12598|             If (LLess (Arg1, 0x0A))
12599|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12646
Line | AML source
--------------------------------------------------------------------------------
12643|             Return (0x10)
12644|         }
12645| 
12646|         Method (GVSN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12647|         {
12648|             If (LLess (Arg1, 0x09))
12649|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12664
Line | AML source
--------------------------------------------------------------------------------
12661|             Return (Zero)
12662|         }
12663| 
12664|         Method (GVSV, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12665|         {
12666|             If (LLess (Arg1, 0x0B))
12667|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12687
Line | AML source
--------------------------------------------------------------------------------
12684|             Return (Zero)
12685|         }
12686| 
12687|         Method (GFNN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12688|         {
12689|             If (LLess (Arg1, 0x09))
12690|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12705
Line | AML source
--------------------------------------------------------------------------------
12702|             Return (Zero)
12703|         }
12704| 
12705|         Method (GFNS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12706|         {
12707|             If (LLess (Arg1, 0x0D))
12708|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12730
Line | AML source
--------------------------------------------------------------------------------
12727|             Return (Zero)
12728|         }
12729| 
12730|         Method (SFNS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12731|         {
12732|             If (LLess (Arg1, 0x0A))
12733|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12775
Line | AML source
--------------------------------------------------------------------------------
12772|             Return (Local0)
12773|         }
12774| 
12775|         Method (G14V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12776|         {
12777|             If (LLess (Arg1, 0x0C))
12778|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12795
Line | AML source
--------------------------------------------------------------------------------
12792|             Return (Zero)
12793|         }
12794| 
12795|         Method (GNBT, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12796|         {
12797|             If (LLess (Arg1, 0x09))
12798|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12813
Line | AML source
--------------------------------------------------------------------------------
12810|             Return (Zero)
12811|         }
12812| 
12813|         Method (GBTS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12814|         {
12815|             If (LLess (Arg1, 0x0A))
12816|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12927
Line | AML source
--------------------------------------------------------------------------------
12924|             Return (Local0)
12925|         }
12926| 
12927|         Method (G15V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12928|         {
12929|             If (LLess (Arg1, 0x0C))
12930|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12947
Line | AML source
--------------------------------------------------------------------------------
12944|             Return (Zero)
12945|         }
12946| 
12947|         Method (GLDB, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12948|         {
12949|             If (LLess (Arg1, 0x0A))
12950|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
12967
Line | AML source
--------------------------------------------------------------------------------
12964|             Return (Zero)
12965|         }
12966| 
12967|         Method (SLDB, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
12968|         {
12969|             If (LLess (Arg1, 0x0A))
12970|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13002
Line | AML source
--------------------------------------------------------------------------------
12999|             Return (0x11)
13000|         }
13001| 
13002|         Method (GDPI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13003|         {
13004|             If (LLess (Arg1, 0x10))
13005|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13025
Line | AML source
--------------------------------------------------------------------------------
13022|             Return (Zero)
13023|         }
13024| 
13025|         Method (SODP, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13026|         {
13027|             If (LLess (Arg1, 0x0C))
13028|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13073
Line | AML source
--------------------------------------------------------------------------------
13070|             Return (Local0)
13071|         }
13072| 
13073|         Method (G16V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13074|         {
13075|             If (LLess (Arg1, 0x0C))
13076|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13093
Line | AML source
--------------------------------------------------------------------------------
13090|             Return (Zero)
13091|         }
13092| 
13093|         Method (SFBD, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13094|         {
13095|             If (LLess (Arg1, 0x0A))
13096|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13160
Line | AML source
--------------------------------------------------------------------------------
13157|             Return (Local0)
13158|         }
13159| 
13160|         Method (G17V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13161|         {
13162|             If (LLess (Arg1, 0x0C))
13163|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13180
Line | AML source
--------------------------------------------------------------------------------
13177|             Return (Zero)
13178|         }
13179| 
13180|         Method (GMDL, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13181|         {
13182|             If (LLess (Arg1, 0x19))
13183|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13217
Line | AML source
--------------------------------------------------------------------------------
13214|             Return (Zero)
13215|         }
13216| 
13217|         Method (GBSI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13218|         {
13219|             If (LLess (Arg1, 0x19))
13220|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13254
Line | AML source
--------------------------------------------------------------------------------
13251|             Return (Zero)
13252|         }
13253| 
13254|         Method (GECI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13255|         {
13256|             If (LLess (Arg1, 0x19))
13257|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13280
Line | AML source
--------------------------------------------------------------------------------
13277|             Return (Zero)
13278|         }
13279| 
13280|         Method (GFII, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13281|         {
13282|             If (LLess (Arg1, 0x10))
13283|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13324
Line | AML source
--------------------------------------------------------------------------------
13321|             Return (Local0)
13322|         }
13323| 
13324|         Method (G18V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13325|         {
13326|             If (LLess (Arg1, 0x0C))
13327|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13344
Line | AML source
--------------------------------------------------------------------------------
13341|             Return (Zero)
13342|         }
13343| 
13344|         Method (GDVI, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13345|         {
13346|             If (LLess (Arg1, 0x18))
13347|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13363
Line | AML source
--------------------------------------------------------------------------------
13360|             Return (Zero)
13361|         }
13362| 
13363|         Method (GDVS, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13364|         {
13365|             If (LLess (Arg1, 0x0A))
13366|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13387
Line | AML source
--------------------------------------------------------------------------------
13384|             Return (Zero)
13385|         }
13386| 
13387|         Method (SDPW, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13388|         {
13389|             If (LLess (Arg1, 0x0A))
13390|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13437
Line | AML source
--------------------------------------------------------------------------------
13434|             Return (Local0)
13435|         }
13436| 
13437|         Method (G19V, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13438|         {
13439|             If (LLess (Arg1, 0x0C))
13440|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13457
Line | AML source
--------------------------------------------------------------------------------
13454|             Return (Zero)
13455|         }
13456| 
13457|         Method (ACMS, 2, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
13458|         {
13459|             BSMI (Arg0)
13460|             Return (Zero)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13463
Line | AML source
--------------------------------------------------------------------------------
13460|             Return (Zero)
13461|         }
13462| 
13463|         Method (CSIN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13464|         {
13465|             If (LLess (Arg1, 0x0A))
13466|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13481
Line | AML source
--------------------------------------------------------------------------------
13478|             Return (Zero)
13479|         }
13480| 
13481|         Method (NVIN, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13482|         {
13483|             OperationRegion (FM1F, SystemMemory, Arg0, Arg1)
13484|             Field (FM1F, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13507
Line | AML source
--------------------------------------------------------------------------------
13504| 
13505|     Scope (_SB.ATKD)
13506|     {
13507|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
13508|         {
13509|         }
13510|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13507
Line | AML source
--------------------------------------------------------------------------------
13504| 
13505|     Scope (_SB.ATKD)
13506|     {
13507|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
13508|         {
13509|         }
13510|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13507
Line | AML source
--------------------------------------------------------------------------------
13504| 
13505|     Scope (_SB.ATKD)
13506|     {
13507|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
13508|         {
13509|         }
13510|     }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 13507
Line | AML source
--------------------------------------------------------------------------------
13504| 
13505|     Scope (_SB.ATKD)
13506|     {
13507|         Method (AGLN, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg3)
13508|         {
13509|         }
13510|     }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13514
Line | AML source
--------------------------------------------------------------------------------
13511| 
13512|     Scope (_SB.ATKD)
13513|     {
13514|         Method (OFBD, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13515|         {
13516|             Name (FBDT, Package (0x52)
13517|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 13620
Line | AML source
--------------------------------------------------------------------------------
13617| 
13618|         Method (OGDP, 1, NotSerialized)
13619|         {
13620|             Store (Arg0, Local0)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local0)
13621|             Store (0x02, Local1)
13622|             Return (Local1)
13623|         }
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 13632
Line | AML source
--------------------------------------------------------------------------------
13629| 
13630|         Method (OSDP, 2, NotSerialized)
13631|         {
13632|             Store (Arg0, Local0)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local0)
13633|             Store (Arg1, Local1)
13634|         }
13635| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 13633
Line | AML source
--------------------------------------------------------------------------------
13630|         Method (OSDP, 2, NotSerialized)
13631|         {
13632|             Store (Arg0, Local0)
13633|             Store (Arg1, Local1)
     |                              ^
     | Warning 3144: Method Local is set but never used    (Local1)
13634|         }
13635| 
13636|         Method (MF42, 3, NotSerialized)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13636
Line | AML source
--------------------------------------------------------------------------------
13633|             Store (Arg1, Local1)
13634|         }
13635| 
13636|         Method (MF42, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13637|         {
13638|             OperationRegion (FM42, SystemMemory, Arg0, 0x08)
13639|             Field (FM42, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13672
Line | AML source
--------------------------------------------------------------------------------
13669|             Return (Zero)
13670|         }
13671| 
13672|         Method (SFBO, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13673|         {
13674|             OperationRegion (\F421, SystemMemory, Arg0, Arg1)
13675|             Field (F421, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13684
Line | AML source
--------------------------------------------------------------------------------
13681|             Return (Zero)
13682|         }
13683| 
13684|         Method (SAOC, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13685|         {
13686|             OperationRegion (\F422, SystemMemory, Arg0, Arg1)
13687|             Field (F422, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
13696
Line | AML source
--------------------------------------------------------------------------------
13693|             Return (Zero)
13694|         }
13695| 
13696|         Method (GBST, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
13697|         {
13698|             OperationRegion (\F423, SystemMemory, Arg0, Arg1)
13699|             Field (F423, DWordAcc, NoLock, Preserve)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 13777
Line | AML source
--------------------------------------------------------------------------------
13774| 
13775|                 Decrement (Local0)
13776|                 Sleep (0x05)
13777|                 Store (EC4D, Local1)
     |                                  ^
     | Warning 3144: Method Local is set but never used    (Local1)
13778|             }
13779| 
13780|             Return (Zero)
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
14746
Line | AML source
--------------------------------------------------------------------------------
14743|             Return (Ones)
14744|         }
14745| 
14746|         Method (STBR, 0, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (STBR)
14747|         {
14748|             Store (Zero, Local0)
14749|             Store (Zero, Local1)
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_UNREACHABLE_CODE: Test 1, Assembler warning in
line 15012
Line | AML source
--------------------------------------------------------------------------------
15009| 
15010|             Release (MUEC)
15011|             Return (Local1)
15012|             Return (Ones)
     |                       ^
     | Warning 3134: Statement is unreachable  
15013|         }
15014| 
15015|         Method (WBAT, 3, Serialized)
================================================================================

ADVICE: (for Warning #3134, ASL_MSG_UNREACHABLE_CODE): This occurs when there is
some code following a Return() - this code is unreachable code, it cannot be
executed, so it is most probably a bug.

FAILED [MEDIUM] AMLAsmASL_MSG_UNREACHABLE_CODE: Test 1, Assembler warning in
line 15043
Line | AML source
--------------------------------------------------------------------------------
15040| 
15041|             Release (MUEC)
15042|             Return (Local1)
15043|             Return (Ones)
     |                       ^
     | Warning 3134: Statement is unreachable  
15044|         }
15045| 
15046|         Method (FNCT, 2, Serialized)
================================================================================

ADVICE: (for Warning #3134, ASL_MSG_UNREACHABLE_CODE): This occurs when there is
some code following a Return() - this code is unreachable code, it cannot be
executed, so it is most probably a bug.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 15617
Line | AML source
--------------------------------------------------------------------------------
15614|         Method (CELC, 1, NotSerialized)
15615|         {
15616|             Subtract (Arg0, 0x0AAC, Local0)
15617|             Divide (Local0, 0x0A, Local1, Local0)
     |                                       ^
     | Warning 3144: Method Local is set but never used    (Local1)
15618|             Return (Local0)
15619|         }
15620| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 15747
Line | AML source
--------------------------------------------------------------------------------
15744|                 }
15745| 
15746|                 Store (\_SB.PCI0.LPCB.EC0.TACH (Arg0), Local0)
15747|                 Divide (Local0, 0x64, Local1, Local0)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local1)
15748|                 Add (Local0, One, Local0)
15749|                 If (LLessEqual (Local0, 0x3C))
15750|                 {
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 15807
Line | AML source
--------------------------------------------------------------------------------
15804|         {
15805|         }
15806| 
15807|         Method (TMSS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
15808|         {
15809|         }
15810| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 15811
Line | AML source
--------------------------------------------------------------------------------
15808|         {
15809|         }
15810| 
15811|         Method (TMSW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
15812|         {
15813|         }
15814|     }
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
15866
Line | AML source
--------------------------------------------------------------------------------
15863|             Return (Local0)
15864|         }
15865| 
15866|         Method (BCHG, 1, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (BCHG)
15867|         {
15868|             If (Arg0)
15869|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
15909
Line | AML source
--------------------------------------------------------------------------------
15906|             }
15907|         }
15908| 
15909|         Method (BCLE, 1, Serialized)
     |                   ^
     | Warning 3115: Not all control paths return a value    (BCLE)
15910|         {
15911|             If (Arg0)
15912|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

Assembler remark in line 15998
Line | AML source
--------------------------------------------------------------------------------
15995| 
15996|         Method (TACH, 1, Serialized)
15997|         {
15998|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
15999|             If (ECAV ())
16000|             {
16001|                 While (One)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 16025
Line | AML source
--------------------------------------------------------------------------------
16022|                 Multiply (Local0, 0x02, Local0)
16023|                 If (LNotEqual (Local0, Zero))
16024|                 {
16025|                     Divide (0x0041CDB4, Local0, Local1, Local0)
     |                                                     ^
     | Warning 3144: Method Local is set but never used    (Local1)
16026|                     Return (Local0)
16027|                 }
16028|                 Else
================================================================================
FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16417
Line | AML source
--------------------------------------------------------------------------------
16414|                     {
16415|                         If (LNotEqual (^^^PEG0.GFX0.EDPD._DCS (), 0x1F))
16416|                         {
16417|                             Return (One)
     |                                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0E)
16418|                         }
16419|                     }
16420| 
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16465
Line | AML source
--------------------------------------------------------------------------------
16462|                 }
16463|             }
16464| 
16465|             Return (One)
     |                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0E)
16466|         }
16467| 
16468|         Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16484
Line | AML source
--------------------------------------------------------------------------------
16481|                     {
16482|                         If (LNotEqual (^^^PEG0.GFX0.EDPD._DCS (), 0x1F))
16483|                         {
16484|                             Return (One)
     |                                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0F)
16485|                         }
16486|                     }
16487| 
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16515
Line | AML source
--------------------------------------------------------------------------------
16512|                 Store (0x0A, LBTN) /* \_SB_.LBTN */
16513|             }
16514| 
16515|             Return (One)
     |                      ^
     | Warning 3104: Reserved method should not return a value    (_Q0F)
16516|         }
16517| 
16518|         Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16541
Line | AML source
--------------------------------------------------------------------------------
16538|             }
16539|         }
16540| 
16541|         Method (_Q11, 0, Serialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q11)
16542|         {
16543|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
16544|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

Assembler remark in line 16543
Line | AML source
--------------------------------------------------------------------------------
16540| 
16541|         Method (_Q11, 0, Serialized)  // _Qxx: EC Query
16542|         {
16543|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_2)
16544|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
16545|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
16546|             If (LGreaterEqual (MSOS (), OSW8))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 16544
Line | AML source
--------------------------------------------------------------------------------
16541|         Method (_Q11, 0, Serialized)  // _Qxx: EC Query
16542|         {
16543|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
16544|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
16545|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
16546|             If (LGreaterEqual (MSOS (), OSW8))
16547|             {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 16545
Line | AML source
--------------------------------------------------------------------------------
16542|         {
16543|             Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler
16544|             Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
16545|             Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                     ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
16546|             If (LGreaterEqual (MSOS (), OSW8))
16547|             {
16548|                 If (LEqual (F8FG, Zero))
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16557
Line | AML source
--------------------------------------------------------------------------------
16554| 
16555|                 STB2 (0x19)
16556|                 STB2 (0x99)
16557|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q11)
16558|             }
16559| 
16560|             FHKW ()
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16710
Line | AML source
--------------------------------------------------------------------------------
16707|             }
16708|         }
16709| 
16710|         Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q13)
16711|         {
16712|             If (LGreaterEqual (MSOS (), OSW8))
16713|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16718
Line | AML source
--------------------------------------------------------------------------------
16715|                 STB2 (0x20)
16716|                 STB2 (0xE0)
16717|                 STB2 (0xA0)
16718|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q13)
16719|             }
16720| 
16721|             If (ATKP)
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16727
Line | AML source
--------------------------------------------------------------------------------
16724|             }
16725|         }
16726| 
16727|         Method (_Q14, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q14)
16728|         {
16729|             If (LGreaterEqual (MSOS (), OSW8))
16730|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16735
Line | AML source
--------------------------------------------------------------------------------
16732|                 STB2 (0x2E)
16733|                 STB2 (0xE0)
16734|                 STB2 (0xAE)
16735|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q14)
16736|             }
16737| 
16738|             If (LLess (AVOL, 0x0F))
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RETURN_TYPES: Test 1, Assembler warning in line
16749
Line | AML source
--------------------------------------------------------------------------------
16746|             }
16747|         }
16748| 
16749|         Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query
     |                   ^
     | Warning 3115: Not all control paths return a value    (_Q15)
16750|         {
16751|             If (LGreaterEqual (MSOS (), OSW8))
16752|             {
================================================================================

ADVICE: (for Warning #3115, ASL_MSG_RETURN_TYPES): Some of the execution paths
do not return a value. All control paths that return must return a value
otherwise unexpected behaviour may occur. This error occurs because a branch on
an conditional op-code returns a value and another does not, which is
inconsistent behaviour.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 16757
Line | AML source
--------------------------------------------------------------------------------
16754|                 STB2 (0x30)
16755|                 STB2 (0xE0)
16756|                 STB2 (0xB0)
16757|                 Return (One)
     |                          ^
     | Warning 3104: Reserved method should not return a value    (_Q15)
16758|             }
16759| 
16760|             If (LGreater (AVOL, Zero))
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 17209
Line | AML source
--------------------------------------------------------------------------------
17206|         Method (FSMI, 1, NotSerialized)
17207|         {
17208|             Store (Arg0, FSFN) /* \_SB_.FSFN */
17209|             Or (Arg0, 0xA0, Local0)
     |                                 ^
     | Warning 3144: Method Local is set but never used    (Local0)
17210|             ISMI (0x90)
17211|             Return (FSTA) /* \_SB_.FSTA */
17212|         }
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17357
Line | AML source
--------------------------------------------------------------------------------
17354|             Return (Local0)
17355|         }
17356| 
17357|         Method (RBPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17358|         {
17359|             Acquire (MUTE, 0xFFFF)
17360|             Add (Arg0, PEBS, Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17371
Line | AML source
--------------------------------------------------------------------------------
17368|             Return (XCFG) /* \_SB_.RBPE.XCFG */
17369|         }
17370| 
17371|         Method (RWPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17372|         {
17373|             Acquire (MUTE, 0xFFFF)
17374|             And (Arg0, 0xFFFFFFFE, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17386
Line | AML source
--------------------------------------------------------------------------------
17383|             Return (XCFG) /* \_SB_.RWPE.XCFG */
17384|         }
17385| 
17386|         Method (RDPE, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17387|         {
17388|             Acquire (MUTE, 0xFFFF)
17389|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17401
Line | AML source
--------------------------------------------------------------------------------
17398|             Return (XCFG) /* \_SB_.RDPE.XCFG */
17399|         }
17400| 
17401|         Method (WBPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17402|         {
17403|             Acquire (MUTE, 0xFFFF)
17404|             Add (Arg0, PEBS, Local0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17415
Line | AML source
--------------------------------------------------------------------------------
17412|             Release (MUTE)
17413|         }
17414| 
17415|         Method (WWPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17416|         {
17417|             Acquire (MUTE, 0xFFFF)
17418|             And (Arg0, 0xFFFFFFFE, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17430
Line | AML source
--------------------------------------------------------------------------------
17427|             Release (MUTE)
17428|         }
17429| 
17430|         Method (WDPE, 2, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17431|         {
17432|             Acquire (MUTE, 0xFFFF)
17433|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
17445
Line | AML source
--------------------------------------------------------------------------------
17442|             Release (MUTE)
17443|         }
17444| 
17445|         Method (RWDP, 3, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
17446|         {
17447|             Acquire (MUTE, 0xFFFF)
17448|             And (Arg0, 0xFFFFFFFC, Arg0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 17714
Line | AML source
--------------------------------------------------------------------------------
17711|             Else
17712|             {
17713|                 Store (GL40, Local0)
17714|                 Subtract (Arg0, 0x40, Local2)
     |                                           ^
     | Warning 3144: Method Local is set but never used    (Local2)
17715|             }
17716| 
17717|             Return (Local0)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 17817
Line | AML source
--------------------------------------------------------------------------------
17814|         }
17815| 
17816|         Name (PMEW, Zero)
17817|         Method (SBRS, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
17818|         {
17819|             CPXS ()
17820|         }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 17822
Line | AML source
--------------------------------------------------------------------------------
17819|             CPXS ()
17820|         }
17821| 
17822|         Method (SBRW, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
17823|         {
17824|             Store (SBPS, PMEW) /* \PMEW */
17825|         }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18271
Line | AML source
--------------------------------------------------------------------------------
18268|             Return (Ones)
18269|         }
18270| 
18271|         Method (RBLK, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
18272|         {
18273|             Acquire (P4SM, 0xFFFF)
18274|             Store (0x05, Local0)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18714
Line | AML source
--------------------------------------------------------------------------------
18711| 
18712|     Scope (\)
18713|     {
18714|         Method (TBTR, 1, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18715|         {
18716|             Store (0x32, Local0)
18717|             While (LGreater (Local0, Zero))
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18757
Line | AML source
--------------------------------------------------------------------------------
18754|         }
18755| 
18756|         Name (LCDB, Zero)
18757|         Method (PPRJ, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18758|         {
18759|         }
18760| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18761
Line | AML source
--------------------------------------------------------------------------------
18758|         {
18759|         }
18760| 
18761|         Method (PRJS, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18762|         {
18763|             SGPL (0x0F, One, Zero)
18764|             \_SB.PCI0.LPCB.EC0.SPIN (0x95, Zero)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18768
Line | AML source
--------------------------------------------------------------------------------
18765|             \_SB.PCI0.LPCB.EC0.SPIN (0x35, Zero)
18766|         }
18767| 
18768|         Method (PRJW, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18769|         {
18770|             \_SB.PCI0.LPCB.EC0.SPIN (0x35, One)
18771|         }
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18786
Line | AML source
--------------------------------------------------------------------------------
18783|         {
18784|         }
18785| 
18786|         Method (TGDC, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18787|         {
18788|         }
18789| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18790
Line | AML source
--------------------------------------------------------------------------------
18787|         {
18788|         }
18789| 
18790|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
18791|         {
18792|         }
18793| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18790
Line | AML source
--------------------------------------------------------------------------------
18787|         {
18788|         }
18789| 
18790|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg1)
18791|         {
18792|         }
18793| 
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 18790
Line | AML source
--------------------------------------------------------------------------------
18787|         {
18788|         }
18789| 
18790|         Method (FCTR, 3, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
18791|         {
18792|         }
18793| 
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 18836
Line | AML source
--------------------------------------------------------------------------------
18833|             }
18834|             Else
18835|             {
18836|                 Store (\_SB.PCI0.LPCB.EC0.ST87 (0x20, 0xFF), Local0)
     |                                                                  ^
     | Warning 3144: Method Local is set but never used    (Local0)
18837|             }
18838| 
18839|             Return (One)
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 18851
Line | AML source
--------------------------------------------------------------------------------
18848|             }
18849|             Else
18850|             {
18851|                 Store (\_SB.PCI0.LPCB.EC0.ST87 (0x20, 0xFF), Local0)
     |                                                                  ^
     | Warning 3144: Method Local is set but never used    (Local0)
18852|             }
18853| 
18854|             Return (One)
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 18866
Line | AML source
--------------------------------------------------------------------------------
18863|             }
18864|             Else
18865|             {
18866|                 Store (\_SB.PCI0.LPCB.EC0.ST87 (0x20, 0xFF), Local0)
     |                                                                  ^
     | Warning 3144: Method Local is set but never used    (Local0)
18867|             }
18868| 
18869|             Return (One)
================================================================================
FAILED [MEDIUM] AMLAsmUnknown: Test 1, Assembler warning in line 18881
Line | AML source
--------------------------------------------------------------------------------
18878|             }
18879|             Else
18880|             {
18881|                 Store (\_SB.PCI0.LPCB.EC0.ST87 (0x20, 0xFF), Local0)
     |                                                                  ^
     | Warning 3144: Method Local is set but never used    (Local0)
18882|             }
18883| 
18884|             Return (One)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 19012
Line | AML source
--------------------------------------------------------------------------------
19009|             Return (Local0)
19010|         }
19011| 
19012|         Method (DCPS, 1, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
19013|         {
19014|             Store (\_SB.PCI0.LPCB.EC0.RPIN (0x26), Local0)
19015|             XOr (Local0, One, Local0)
================================================================================
Table DSDT (0) reassembly: Found 2 errors, 42 warnings, 118 remarks.


Checking ACPI table SSDT (#1)

FAILED [MEDIUM] AMLAsmASL_MSG_NO_REGION: Test 1, Assembler warning in line 35
Line | AML source
--------------------------------------------------------------------------------
00032|     Scope (\_SB.PCI0.IDE0)
00033|     {
00034|         Name (REGF, One)
00035|         Method (_REG, 2, NotSerialized)  // _REG: Region Availability
     |                   ^
     | Warning 3079: _REG has no corresponding Operation Region  
00036|         {
00037|             If (LEqual (Arg0, 0x02))
00038|             {
================================================================================

ADVICE: (for Warning #3079, ASL_MSG_NO_REGION): _REG requires a corresponding
Operation Region, however one was not found.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 117
Line | AML source
--------------------------------------------------------------------------------
00114|             Name (W128, Zero)
00115|             Name (W119, Zero)
00116|             Name (W120, Zero)
00117|             Name (IRDY, One)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [IRDY] is within a method [GTF_])
00118|             Name (PIOT, Zero)
00119|             Name (DMAT, Zero)
00120|             If (LEqual (SizeOf (Arg1), 0x0200))
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 118
Line | AML source
--------------------------------------------------------------------------------
00115|             Name (W119, Zero)
00116|             Name (W120, Zero)
00117|             Name (IRDY, One)
00118|             Name (PIOT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [PIOT] is within a method [GTF_])
00119|             Name (DMAT, Zero)
00120|             If (LEqual (SizeOf (Arg1), 0x0200))
00121|             {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 119
Line | AML source
--------------------------------------------------------------------------------
00116|             Name (W120, Zero)
00117|             Name (IRDY, One)
00118|             Name (PIOT, Zero)
00119|             Name (DMAT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [DMAT] is within a method [GTF_])
00120|             If (LEqual (SizeOf (Arg1), 0x0200))
00121|             {
00122|                 CreateWordField (Arg1, Zero, IW00)
================================================================================
Assembler remark in line 245
Line | AML source
--------------------------------------------------------------------------------
00242| 
00243|             Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
00244|             {
00245|                 Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_1)
00246|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
00247|                 If (LEqual (Arg0, ToUUID ("")))
00248|                 {
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

Assembler remark in line 246
Line | AML source
--------------------------------------------------------------------------------
00243|             Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
00244|             {
00245|                 Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
00246|                 Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
     |                         ^
     | Remark 2011: Use of compiler reserved name    (_T_0)
00247|                 If (LEqual (Arg0, ToUUID ("")))
00248|                 {
00249|                     While (One)
================================================================================

ADVICE: (for Remark #2011, ASL_MSG_COMPILER_RESERVED): This normally occurs when
disassembled code is being compiled and it contains compiler-emitted names of
the form '_T_x'. This is just a remark generated by the compiler and can
normally be ignored.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 335
Line | AML source
--------------------------------------------------------------------------------
00332|             }
00333|         }
00334| 
00335|         Method (AGTF, 2, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
00336|         {
00337|             Store (0xA0, Local0)
00338|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE0.CMDC */
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 341
Line | AML source
--------------------------------------------------------------------------------
00338|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE0.CMDC */
00339|             If (LEqual (SizeOf (Arg1), 0x0200))
00340|             {
00341|                 CreateWordField (Arg1, Zero, IW00)
     |                                                ^
     | Remark 2089: Object is not referenced    (Name [IW00] is within a method [AGTF])
00342|                 CreateWordField (Arg1, 0x0100, I128)
00343|                 If (And (I128, One))
00344|                 {
================================================================================
Table SSDT (1) reassembly: Found 0 errors, 1 warnings, 7 remarks.


Checking ACPI table SSDT (#2)

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 141
Line | AML source
--------------------------------------------------------------------------------
00138|             Name (W128, Zero)
00139|             Name (W119, Zero)
00140|             Name (W120, Zero)
00141|             Name (IRDY, One)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [IRDY] is within a method [GTF_])
00142|             Name (PIOT, Zero)
00143|             Name (DMAT, Zero)
00144|             If (LEqual (SizeOf (Arg1), 0x0200))
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 142
Line | AML source
--------------------------------------------------------------------------------
00139|             Name (W119, Zero)
00140|             Name (W120, Zero)
00141|             Name (IRDY, One)
00142|             Name (PIOT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [PIOT] is within a method [GTF_])
00143|             Name (DMAT, Zero)
00144|             If (LEqual (SizeOf (Arg1), 0x0200))
00145|             {
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 143
Line | AML source
--------------------------------------------------------------------------------
00140|             Name (W120, Zero)
00141|             Name (IRDY, One)
00142|             Name (PIOT, Zero)
00143|             Name (DMAT, Zero)
     |                     ^
     | Remark 2089: Object is not referenced    (Name [DMAT] is within a method [GTF_])
00144|             If (LEqual (SizeOf (Arg1), 0x0200))
00145|             {
00146|                 CreateWordField (Arg1, Zero, IW00)
================================================================================
FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 222
Line | AML source
--------------------------------------------------------------------------------
00219|             Return (RETB) /* \_SB_.PCI0.IDE1.RATA.RETB */
00220|         }
00221| 
00222|         Method (AGTF, 2, Serialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg0)
00223|         {
00224|             Store (0xA0, Local0)
00225|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE1.CMDC */
================================================================================
FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 228
Line | AML source
--------------------------------------------------------------------------------
00225|             Store (Zero, CMDC) /* \_SB_.PCI0.IDE1.CMDC */
00226|             If (LEqual (SizeOf (Arg1), 0x0200))
00227|             {
00228|                 CreateWordField (Arg1, Zero, IW00)
     |                                                ^
     | Remark 2089: Object is not referenced    (Name [IW00] is within a method [AGTF])
00229|                 CreateWordField (Arg1, 0x0100, I128)
00230|                 If (And (I128, One))
00231|                 {
================================================================================
Table SSDT (2) reassembly: Found 0 errors, 0 warnings, 5 remarks.


Checking ACPI table SSDT (#3)

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 245
Line | AML source
--------------------------------------------------------------------------------
00242|             0x80000000
00243|         }
00244| 
00245|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00246|         {
00247|             0x80000000, 
00248|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 246
Line | AML source
--------------------------------------------------------------------------------
00243|         }
00244| 
00245|         Package (0x06)
00246|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00247|             0x80000000, 
00248|             0x80000000, 
00249|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 265
Line | AML source
--------------------------------------------------------------------------------
00262|             0x80000000
00263|         }
00264| 
00265|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00266|         {
00267|             0x80000000, 
00268|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 266
Line | AML source
--------------------------------------------------------------------------------
00263|         }
00264| 
00265|         Package (0x06)
00266|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00267|             0x80000000, 
00268|             0x80000000, 
00269|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 285
Line | AML source
--------------------------------------------------------------------------------
00282|             0x80000000
00283|         }
00284| 
00285|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00286|         {
00287|             0x80000000, 
00288|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 286
Line | AML source
--------------------------------------------------------------------------------
00283|         }
00284| 
00285|         Package (0x06)
00286|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00287|             0x80000000, 
00288|             0x80000000, 
00289|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 305
Line | AML source
--------------------------------------------------------------------------------
00302|             0x80000000
00303|         }
00304| 
00305|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00306|         {
00307|             0x80000000, 
00308|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 306
Line | AML source
--------------------------------------------------------------------------------
00303|         }
00304| 
00305|         Package (0x06)
00306|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00307|             0x80000000, 
00308|             0x80000000, 
00309|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 325
Line | AML source
--------------------------------------------------------------------------------
00322|             0x80000000
00323|         }
00324| 
00325|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00326|         {
00327|             0x80000000, 
00328|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 326
Line | AML source
--------------------------------------------------------------------------------
00323|         }
00324| 
00325|         Package (0x06)
00326|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00327|             0x80000000, 
00328|             0x80000000, 
00329|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 345
Line | AML source
--------------------------------------------------------------------------------
00342|             0x80000000
00343|         }
00344| 
00345|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00346|         {
00347|             0x80000000, 
00348|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 346
Line | AML source
--------------------------------------------------------------------------------
00343|         }
00344| 
00345|         Package (0x06)
00346|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00347|             0x80000000, 
00348|             0x80000000, 
00349|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 365
Line | AML source
--------------------------------------------------------------------------------
00362|             0x80000000
00363|         }
00364| 
00365|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00366|         {
00367|             0x80000000, 
00368|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 366
Line | AML source
--------------------------------------------------------------------------------
00363|         }
00364| 
00365|         Package (0x06)
00366|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00367|             0x80000000, 
00368|             0x80000000, 
00369|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 385
Line | AML source
--------------------------------------------------------------------------------
00382|             0x80000000
00383|         }
00384| 
00385|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00386|         {
00387|             0x80000000, 
00388|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 386
Line | AML source
--------------------------------------------------------------------------------
00383|         }
00384| 
00385|         Package (0x06)
00386|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00387|             0x80000000, 
00388|             0x80000000, 
00389|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 537
Line | AML source
--------------------------------------------------------------------------------
00534|             0x80000000
00535|         }
00536| 
00537|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00538|         {
00539|             0x80000000, 
00540|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 538
Line | AML source
--------------------------------------------------------------------------------
00535|         }
00536| 
00537|         Package (0x06)
00538|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00539|             0x80000000, 
00540|             0x80000000, 
00541|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 557
Line | AML source
--------------------------------------------------------------------------------
00554|             0x80000000
00555|         }
00556| 
00557|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00558|         {
00559|             0x80000000, 
00560|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 558
Line | AML source
--------------------------------------------------------------------------------
00555|         }
00556| 
00557|         Package (0x06)
00558|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00559|             0x80000000, 
00560|             0x80000000, 
00561|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 577
Line | AML source
--------------------------------------------------------------------------------
00574|             0x80000000
00575|         }
00576| 
00577|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00578|         {
00579|             0x80000000, 
00580|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 578
Line | AML source
--------------------------------------------------------------------------------
00575|         }
00576| 
00577|         Package (0x06)
00578|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00579|             0x80000000, 
00580|             0x80000000, 
00581|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 597
Line | AML source
--------------------------------------------------------------------------------
00594|             0x80000000
00595|         }
00596| 
00597|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00598|         {
00599|             0x80000000, 
00600|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 598
Line | AML source
--------------------------------------------------------------------------------
00595|         }
00596| 
00597|         Package (0x06)
00598|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00599|             0x80000000, 
00600|             0x80000000, 
00601|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 617
Line | AML source
--------------------------------------------------------------------------------
00614|             0x80000000
00615|         }
00616| 
00617|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00618|         {
00619|             0x80000000, 
00620|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 618
Line | AML source
--------------------------------------------------------------------------------
00615|         }
00616| 
00617|         Package (0x06)
00618|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00619|             0x80000000, 
00620|             0x80000000, 
00621|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 637
Line | AML source
--------------------------------------------------------------------------------
00634|             0x80000000
00635|         }
00636| 
00637|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00638|         {
00639|             0x80000000, 
00640|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 638
Line | AML source
--------------------------------------------------------------------------------
00635|         }
00636| 
00637|         Package (0x06)
00638|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00639|             0x80000000, 
00640|             0x80000000, 
00641|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 657
Line | AML source
--------------------------------------------------------------------------------
00654|             0x80000000
00655|         }
00656| 
00657|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00658|         {
00659|             0x80000000, 
00660|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 658
Line | AML source
--------------------------------------------------------------------------------
00655|         }
00656| 
00657|         Package (0x06)
00658|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00659|             0x80000000, 
00660|             0x80000000, 
00661|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 677
Line | AML source
--------------------------------------------------------------------------------
00674|             0x80000000
00675|         }
00676| 
00677|         Package (0x06)
     |              ^
     | Error 6126: syntax error, unexpected PARSEOP_PACKAGE
00678|         {
00679|             0x80000000, 
00680|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 678
Line | AML source
--------------------------------------------------------------------------------
00675|         }
00676| 
00677|         Package (0x06)
00678|         {
     |        ^
     | Error 6126: syntax error, unexpected '{'  
00679|             0x80000000, 
00680|             0x80000000, 
00681|             0x80000000, 
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [HIGH] SyntaxCheckIASLCompilerAborted: Test 1, Compilation aborted early
due to a parser detected syntax error.

ADVICE: Some subsequent errors may not be detected because the compiler had to
terminate prematurely. If the compiler did not abort early then potentially
correct code may parse incorrectly producing some or many false positive errors.

Table SSDT (3) reassembly: Found 32 errors, 0 warnings, 0 remarks.


Checking ACPI table SSDT (#4)

FAILED [HIGH] AMLAsmASL_MSG_SYNTAX: Test 1, Assembler error in line 104
Line | AML source
--------------------------------------------------------------------------------
00101|         Name (HC0, Zero)
00102|         Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
00103|         {
00104|             Store (CPPC, \_PR.CPU0._PPC) /* External reference */
     |                                      ^
     | Error 6126: Illegal method invocation as a target operand  
00105|             Store (CPDC (Arg0), Local0)
00106|             GCAP (Local0)
00107|             Return (Local0)
================================================================================

ADVICE: (for Error #6126, ASL_MSG_SYNTAX): The disassembled code cannot be
reassembled using the strict IASL compiler as it contains syntax errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 107
Line | AML source
--------------------------------------------------------------------------------
00104|             Store (CPPC, \_PR.CPU0._PPC) /* External reference */
00105|             Store (CPDC (Arg0), Local0)
00106|             GCAP (Local0)
00107|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00108|         }
00109| 
00110|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
117
Line | AML source
--------------------------------------------------------------------------------
00114|             Return (Local0)
00115|         }
00116| 
00117|         Method (CPDC, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00118|         {
00119|             CreateDWordField (Arg0, Zero, REVS)
00120|             CreateDWordField (Arg0, 0x04, SIZE)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmUnknown: Test 1, Assembler remark in line 132
Line | AML source
--------------------------------------------------------------------------------
00129|             Return (COSC (ToUUID (""), REVS, SIZE, Local2))
00130|         }
00131| 
00132|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2146: Method Argument is never used    (Arg2)
00133|         {
00134|             CreateDWordField (Arg3, Zero, STS0)
00135|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
132
Line | AML source
--------------------------------------------------------------------------------
00129|             Return (COSC (ToUUID (""), REVS, SIZE, Local2))
00130|         }
00131| 
00132|         Method (COSC, 4, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00133|         {
00134|             CreateDWordField (Arg3, Zero, STS0)
00135|             CreateDWordField (Arg3, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_NOT_REFERENCED: Test 1, Assembler remark in line 135
Line | AML source
--------------------------------------------------------------------------------
00132|         Method (COSC, 4, NotSerialized)
00133|         {
00134|             CreateDWordField (Arg3, Zero, STS0)
00135|             CreateDWordField (Arg3, 0x04, CAP0)
     |                                             ^
     | Remark 2089: Object is not referenced    (Name [CAP0] is within a method [COSC])
00136|             CreateDWordField (Arg0, Zero, IID0)
00137|             CreateDWordField (Arg0, 0x04, IID1)
00138|             CreateDWordField (Arg0, 0x08, IID2)
================================================================================
FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
161
Line | AML source
--------------------------------------------------------------------------------
00158|             Return (Arg3)
00159|         }
00160| 
00161|         Method (GCAP, 1, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00162|         {
00163|             CreateDWordField (Arg0, Zero, STS0)
00164|             CreateDWordField (Arg0, 0x04, CAP0)
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 200
Line | AML source
--------------------------------------------------------------------------------
00197|         {
00198|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00199|             GCAP (Local0)
00200|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00201|         }
00202| 
00203|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
240
Line | AML source
--------------------------------------------------------------------------------
00237|             Return (Zero)
00238|         }
00239| 
00240|         Method (APCT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00241|         {
00242|             If (LAnd (And (CFGD, 0x2E), LNot (And (SDTL, 0x20))))
00243|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [LOW] AMLAsmASL_MSG_SERIALIZED_REQUIRED: Test 1, Assembler remark in line
250
Line | AML source
--------------------------------------------------------------------------------
00247|             }
00248|         }
00249| 
00250|         Method (APPT, 0, NotSerialized)
     |                   ^
     | Remark 2120: Control Method should be made Serialized    (due to creation of named objects within)
00251|         {
00252|             If (LAnd (And (CFGD, One), LNot (And (SDTL, 0x10))))
00253|             {
================================================================================

ADVICE: (for Remark #2120, ASL_MSG_SERIALIZED_REQUIRED): A named object is
created inside a non-serialized method - this method should be serialized. It is
possible that one thread enters the method and blocks and then a second thread
also executes the method, ending up in two attempts to create the object and
causing a failure.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 267
Line | AML source
--------------------------------------------------------------------------------
00264|         {
00265|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00266|             GCAP (Local0)
00267|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00268|         }
00269| 
00270|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 314
Line | AML source
--------------------------------------------------------------------------------
00311|         {
00312|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00313|             GCAP (Local0)
00314|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00315|         }
00316| 
00317|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 361
Line | AML source
--------------------------------------------------------------------------------
00358|         {
00359|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00360|             GCAP (Local0)
00361|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00362|         }
00363| 
00364|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 408
Line | AML source
--------------------------------------------------------------------------------
00405|         {
00406|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00407|             GCAP (Local0)
00408|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00409|         }
00410| 
00411|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 455
Line | AML source
--------------------------------------------------------------------------------
00452|         {
00453|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00454|             GCAP (Local0)
00455|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00456|         }
00457| 
00458|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

FAILED [MEDIUM] AMLAsmASL_MSG_RESERVED_NO_RETURN_VAL: Test 1, Assembler warning
in line 502
Line | AML source
--------------------------------------------------------------------------------
00499|         {
00500|             Store (\_PR.CPU0.CPDC (Arg0), Local0)
00501|             GCAP (Local0)
00502|             Return (Local0)
     |                         ^
     | Warning 3104: Reserved method should not return a value    (_PDC)
00503|         }
00504| 
00505|         Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
================================================================================

ADVICE: (for Warning #3104, ASL_MSG_RESERVED_NO_RETURN_VAL): A reserved method
returned a value however it is not expected to return anything, so this does not
conform to the expected behaviour. The kernel will most probably ignore the
return value, so this is not going to produce any run time errors.

Table SSDT (4) reassembly: Found 1 errors, 8 warnings, 7 remarks.


================================================================================
0 passed, 211 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

stao: STAO Status Override Table test.
--------------------------------------------------------------------------------
ACPI STAO table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

srat: SRAT System Resource Affinity Table test.
--------------------------------------------------------------------------------
ACPI SRAT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spmi: SPMI Service Processor Management Interface Description Table test.
--------------------------------------------------------------------------------
ACPI SPMI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

spcr: SPCR Serial Port Console Redirection Table test.
--------------------------------------------------------------------------------
ACPI SPCR table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slit: SLIT System Locality Distance Information test.
--------------------------------------------------------------------------------
ACPI SLIT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

slic: SLIC Software Licensing Description Table test.
--------------------------------------------------------------------------------
ACPI SLIC table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

sbst: SBST Smart Battery Specification Table test.
--------------------------------------------------------------------------------
ACPI SBST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

rsdt: RSDT Root System Description Table test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDT Root System Description Table test.
PASSED: Test 1, No issues found in RSDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

rsdp: RSDP Root System Description Pointer test.
--------------------------------------------------------------------------------
Test 1 of 1: RSDP Root System Description Pointer test.
PASSED: Test 1, RSDP first checksum is correct
PASSED: Test 1, RSDP: oem_id contains only printable characters.
PASSED: Test 1, RSDP: revision is 2.
PASSED: Test 1, RSDP: at least one of RsdtAddress or XsdtAddress is non-zero.
FAILED [MEDIUM] RSDPBothAddressesFound: Test 1, RSDP: only one of RsdtAddress or
XsdtAddress should be non-zero. Both fields are non-zero.
PASSED: Test 1, RSDP: the correct RSDT/XSDT address is being used.
PASSED: Test 1, RSDP: the table is the correct length.
PASSED: Test 1, RSDP second checksum is correct
PASSED: Test 1, RSDP: the reserved field is zero.

================================================================================
8 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

pcc: Processor Clocking Control (PCC) test.
--------------------------------------------------------------------------------
Test 1 of 1: Processor Clocking Control (PCC) test.
This test checks the sanity of the Processor Clocking Control as found on some
HP ProLiant machines. Most computers do not use this interface to control the
CPU clock frequency, so this test will be skipped.

This machine does not use Processor Clocking Control (PCC).

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 1 info only.
================================================================================

osilinux: Disassemble DSDT to check for _OSI("Linux").
--------------------------------------------------------------------------------
Test 1 of 1: Disassemble DSDT to check for _OSI("Linux").
This is not strictly a failure mode, it just alerts one that this has been
defined in the DSDT and probably should be avoided since the Linux ACPI driver
matches onto the Windows _OSI strings
                {
                    Store (OSVT, OSFG) /* \OSFG */
                }
                If (_OSI ("Linux"))
                {
                    Store (OSEG, OSFG) /* \OSFG */
                }
                If (_OSI ("Windows 2009"))
                {
                    Store (OSW7, OSFG) /* \OSFG */
                }
                If (_OSI ("Windows 2012"))
                {
                    Store (OSW8, OSFG) /* \OSFG */
                }
                Return (OSFG) /* \OSFG */
            }
WARNING: Test 1, DSDT implements a deprecated _OSI("Linux") test.

================================================================================
0 passed, 0 failed, 1 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

method: ACPI DSDT Method Semantic tests.
--------------------------------------------------------------------------------
Test 1 of 189: Test Method Names.
Found 2591 Objects 
PASSED: Test 1, Method names contain legal characters.

Test 2 of 189: Test _AEI.
SKIPPED: Test 2, Skipping test for non-existant object _AEI.

Test 3 of 189: Test _EVT (Event Method).
SKIPPED: Test 3, Skipping test for non-existant object _EVT.

Test 4 of 189: Test _DLM (Device Lock Mutex).
SKIPPED: Test 4, Skipping test for non-existant object _DLM.

Test 5 of 189: Test _PIC (Inform AML of Interrupt Model).
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.
PASSED: Test 5, \_PIC returned no values as expected.

Test 6 of 189: Test _CID (Compatible ID).
PASSED: Test 6, \_SB_.PCI0._CID returned an integer 0x030ad041 (EISA ID
PNP0A03).
PASSED: Test 6, \_SB_.PCI0.LPCB.CWDT._CID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x000a2e4f (EISA
ID SYN0A00).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x02002e4f (EISA
ID SYN0002).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x030fd041 (EISA
ID PNP0F03).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x130fd041 (EISA
ID PNP0F13).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2M._CID returned an integer 0x120fd041 (EISA
ID PNP0F12).
PASSED: Test 6, \_SB_.PCI0.LPCB.PS2K._CID returned an integer 0x0b03d041 (EISA
ID PNP030B).
PASSED: Test 6, \_SB_.PTID._CID returned an integer 0x020cd041 (EISA ID
PNP0C02).

Test 7 of 189: Test _DDN (DOS Device Name).
SKIPPED: Test 7, Skipping test for non-existant object _DDN.

Test 8 of 189: Test _HID (Hardware ID).
PASSED: Test 8, \_SB_.PCI0._HID returned an integer 0x080ad041 (EISA ID
PNP0A08).
PASSED: Test 8, \_SB_.PCI0.TPMX._HID returned an integer 0x010cd041 (EISA ID
PNP0C01).
PASSED: Test 8, \_SB_.PCI0.LPCB.DMAC._HID returned an integer 0x0002d041 (EISA
ID PNP0200).
PASSED: Test 8, \_SB_.PCI0.LPCB.FWHD._HID returned an integer 0x0008d425 (EISA
ID INT0800).
PASSED: Test 8, \_SB_.PCI0.LPCB.HPET._HID returned an integer 0x0301d041 (EISA
ID PNP0103).
PASSED: Test 8, \_SB_.PCI0.LPCB.IPIC._HID returned an integer 0x0000d041 (EISA
ID PNP0000).
PASSED: Test 8, \_SB_.PCI0.LPCB.LDRC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.RTC_._HID returned an integer 0x000bd041 (EISA
ID PNP0B00).
PASSED: Test 8, \_SB_.PCI0.LPCB.TIMR._HID returned an integer 0x0001d041 (EISA
ID PNP0100).
PASSED: Test 8, \_SB_.PCI0.LPCB.CWDT._HID returned an integer 0x0d3fd425 (EISA
ID INT3F0D).
PASSED: Test 8, \_SB_.PCI0.LPCB.RMSC._HID returned an integer 0x020cd041 (EISA
ID PNP0C02).
PASSED: Test 8, \_SB_.PCI0.LPCB.COPR._HID returned an integer 0x040cd041 (EISA
ID PNP0C04).
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2M._HID returned an integer 0x060a2e4f (EISA
ID SYN0A06).
PASSED: Test 8, \_SB_.PCI0.LPCB.PS2K._HID returned an integer 0x01308b06 (EISA
ID ATK3001).
PASSED: Test 8, \_SB_.PCI0.LPCB.EC0_._HID returned an integer 0x090cd041 (EISA
ID PNP0C09).
PASSED: Test 8, \_SB_.PCI0.PDRC._HID returned an integer 0x020cd041 (EISA ID
PNP0C02).
PASSED: Test 8, \_SB_.PCI0.AC0_._HID returned a string 'ACPI0003' as expected.
PASSED: Test 8, \_SB_.PCI0.BAT0._HID returned an integer 0x0a0cd041 (EISA ID
PNP0C0A).
PASSED: Test 8, \_SB_.LNKA._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKB._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKC._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKD._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKE._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKF._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKG._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.LNKH._HID returned an integer 0x0f0cd041 (EISA ID
PNP0C0F).
PASSED: Test 8, \_SB_.ATKD._HID returned a string 'PNP0C14' as expected.
PASSED: Test 8, \_SB_.ASHS._HID returned a string 'ATK4001' as expected.
PASSED: Test 8, \_SB_.PTID._HID returned an integer 0x0e34d425 (EISA ID
INT340E).
PASSED: Test 8, \_SB_.LID_._HID returned an integer 0x0d0cd041 (EISA ID
PNP0C0D).
PASSED: Test 8, \_SB_.SLPB._HID returned an integer 0x0e0cd041 (EISA ID
PNP0C0E).

Test 9 of 189: Test _HRV (Hardware Revision Number).
SKIPPED: Test 9, Skipping test for non-existant object _HRV.

Test 10 of 189: Test _MLS (Multiple Language String).
SKIPPED: Test 10, Skipping test for non-existant object _MLS.

Test 11 of 189: Test _PLD (Physical Device Location).
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3.DCAM._PLD correctly returned a
sane looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.HSP4._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP1._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP2._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP3._PLD correctly returned a sane
looking package.
PASSED: Test 11, \_SB_.PCI0.XHC_.RHUB.SSP4._PLD correctly returned a sane
looking package.

Test 12 of 189: Test _SUB (Subsystem ID).
SKIPPED: Test 12, Skipping test for non-existant object _SUB.

Test 13 of 189: Test _SUN (Slot User Number).
SKIPPED: Test 13, Skipping test for non-existant object _SUN.

Test 14 of 189: Test _STR (String).
SKIPPED: Test 14, Skipping test for non-existant object _STR.

Test 15 of 189: Test _UID (Unique ID).
PASSED: Test 15, \_SB_.PCI0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.TPMX._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.LPCB.HPET._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.PCI0.LPCB.LDRC._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.PCI0.LPCB.RMSC._UID correctly returned sane looking value
0x00000010.
PASSED: Test 15, \_SB_.PCI0.PDRC._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.PCI0.BAT0._UID correctly returned sane looking value
0x00000000.
PASSED: Test 15, \_SB_.LNKA._UID correctly returned sane looking value
0x00000001.
PASSED: Test 15, \_SB_.LNKB._UID correctly returned sane looking value
0x00000002.
PASSED: Test 15, \_SB_.LNKC._UID correctly returned sane looking value
0x00000003.
PASSED: Test 15, \_SB_.LNKD._UID correctly returned sane looking value
0x00000004.
PASSED: Test 15, \_SB_.LNKE._UID correctly returned sane looking value
0x00000005.
PASSED: Test 15, \_SB_.LNKF._UID correctly returned sane looking value
0x00000006.
PASSED: Test 15, \_SB_.LNKG._UID correctly returned sane looking value
0x00000007.
PASSED: Test 15, \_SB_.LNKH._UID correctly returned sane looking value
0x00000008.
PASSED: Test 15, \_SB_.ATKD._UID returned a string 'ATK' as expected.

Test 16 of 189: Test _CDM (Clock Domain).
SKIPPED: Test 16, Skipping test for non-existant object _CDM.

Test 17 of 189: Test _CRS (Current Resource Settings).
PASSED: Test 17, \_SB_.PCI0._CRS (WORD Address Space Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.TPMX._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.DMAC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.FWHD._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.HPET._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.IPIC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.LDRC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RTC_._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.TIMR._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.CWDT._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.RMSC._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.COPR._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2M._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.PS2K._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.LPCB.EC0_._CRS (I/O Port Descriptor) looks sane.
PASSED: Test 17, \_SB_.PCI0.PDRC._CRS (32-bit Fixed Location Memory Range
Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKA._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKB._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKC._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKD._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKE._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKF._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKG._CRS (IRQ Descriptor) looks sane.
PASSED: Test 17, \_SB_.LNKH._CRS (IRQ Descriptor) looks sane.

Test 18 of 189: Test _DSD (Device Specific Data).
SKIPPED: Test 18, Skipping test for non-existant object _DSD.

Test 19 of 189: Test _DIS (Disable).
PASSED: Test 19, \_SB_.LNKA._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKB._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKC._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKD._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKE._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKF._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKG._DIS returned no values as expected.
PASSED: Test 19, \_SB_.LNKH._DIS returned no values as expected.

Test 20 of 189: Test _DMA (Direct Memory Access).
SKIPPED: Test 20, Skipping test for non-existant object _DMA.

Test 21 of 189: Test _FIX (Fixed Register Resource Provider).
SKIPPED: Test 21, Skipping test for non-existant object _FIX.

Test 22 of 189: Test _GSB (Global System Interrupt Base).
SKIPPED: Test 22, Skipping test for non-existant object _GSB.

Test 23 of 189: Test _HPP (Hot Plug Parameters).
SKIPPED: Test 23, Skipping test for non-existant object _HPP.

Test 24 of 189: Test _PRS (Possible Resource Settings).
PASSED: Test 24, \_SB_.PCI0.LPCB.PS2K._PRS (Start Dependent Functions
Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKA._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKB._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKC._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKD._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKE._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKF._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKG._PRS (IRQ Descriptor) looks sane.
PASSED: Test 24, \_SB_.LNKH._PRS (IRQ Descriptor) looks sane.

Test 25 of 189: Test _PRT (PCI Routing Table).
PASSED: Test 25, \_SB_.PCI0._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.P0P1._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.PEG0._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.PEG1._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.PEG2._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.PEG3._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP01._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP03._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP05._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP06._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP07._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP08._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP02._PRT correctly returned a sane looking package.
PASSED: Test 25, \_SB_.PCI0.RP04._PRT correctly returned a sane looking package.

Test 26 of 189: Test _PXM (Proximity).
SKIPPED: Test 26, Skipping test for non-existant object _PXM.

Test 27 of 189: Test _CCA (Cache Coherency Attribute).
SKIPPED: Test 27, Skipping test for non-existant object _CCA.

Test 28 of 189: Test _EDL (Eject Device List).
SKIPPED: Test 28, Skipping test for non-existant object _EDL.

Test 29 of 189: Test _EJD (Ejection Dependent Device).
SKIPPED: Test 29, Skipping test for non-existant object _EJD.

Test 30 of 189: Test _EJ0 (Eject).
SKIPPED: Test 30, Skipping test for non-existant object _EJ0.

Test 31 of 189: Test _EJ1 (Eject).
SKIPPED: Test 31, Skipping test for non-existant object _EJ1.

Test 32 of 189: Test _EJ2 (Eject).
SKIPPED: Test 32, Skipping test for non-existant object _EJ2.

Test 33 of 189: Test _EJ3 (Eject).
SKIPPED: Test 33, Skipping test for non-existant object _EJ3.

Test 34 of 189: Test _EJ4 (Eject).
SKIPPED: Test 34, Skipping test for non-existant object _EJ4.

Test 35 of 189: Test _LCK (Lock).
SKIPPED: Test 35, Skipping test for non-existant object _LCK.

Test 36 of 189: Test _RMV (Remove).
PASSED: Test 36, \_SB_.PCI0.RP02.WLAN._RMV correctly returned sane looking value
0x00000000.

Test 37 of 189: Test _STA (Status).
PASSED: Test 37, \_SB_.PCI0.TPMX._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 37, \_SB_.PCI0.LPCB.HPET._STA correctly returned sane looking value
0x00000000.
PASSED: Test 37, \_SB_.PCI0.LPCB.CWDT._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 37, \_SB_.PCI0.LPCB.PS2M._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 37, \_SB_.PCI0.LPCB.PS2K._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 37, \_SB_.PCI0.BAT0._STA correctly returned sane looking value
0x0000000f.
PASSED: Test 37, \_SB_.LNKA._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKB._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKC._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKD._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKE._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKF._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKG._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.LNKH._STA correctly returned sane looking value
0x0000000b.
PASSED: Test 37, \_SB_.ASHS._STA correctly returned sane looking value
0x0000000f.

Test 38 of 189: Test _DEP (Operational Region Dependencies).
SKIPPED: Test 38, Skipping test for non-existant object _DEP.

Test 39 of 189: Test _BDN (BIOS Dock Name).
SKIPPED: Test 39, Skipping test for non-existant object _BDN.

Test 40 of 189: Test _BBN (Base Bus Number).
PASSED: Test 40, \_SB_.PCI0._BBN correctly returned an integer.

Test 41 of 189: Test _DCK (Dock).
SKIPPED: Test 41, Skipping test for non-existant object _DCK.

Test 42 of 189: Test _INI (Initialize).
PASSED: Test 42, \_SB_.PCI0.PEG0.GFX0._INI returned no values as expected.
PASSED: Test 42, \_SB_.PCI0.LPCB.EC0_._INI returned no values as expected.
PASSED: Test 42, \_SB_.PCI0._INI returned no values as expected.

Test 43 of 189: Test _GLK (Global Lock).
SKIPPED: Test 43, Skipping test for non-existant object _GLK.

Test 44 of 189: Test _SEG (Segment).
SKIPPED: Test 44, Skipping test for non-existant object _SEG.

Test 45 of 189: Test _OFF (Set resource off).
SKIPPED: Test 45, Skipping test for non-existant object _OFF.

Test 46 of 189: Test _ON_ (Set resource on).
SKIPPED: Test 46, Skipping test for non-existant object _ON_.

Test 47 of 189: Test _DSW (Device Sleep Wake).
SKIPPED: Test 47, Skipping test for non-existant object _DSW.

Test 48 of 189: Test _IRC (In Rush Current).
SKIPPED: Test 48, Skipping test for non-existant object _IRC.

Test 49 of 189: Test _PRE (Power Resources for Enumeration).
SKIPPED: Test 49, Skipping test for non-existant object _PRE.

Test 50 of 189: Test _PR0 (Power Resources for D0).
SKIPPED: Test 50, Skipping test for non-existant object _PR0.

Test 51 of 189: Test _PR1 (Power Resources for D1).
SKIPPED: Test 51, Skipping test for non-existant object _PR1.

Test 52 of 189: Test _PR2 (Power Resources for D2).
SKIPPED: Test 52, Skipping test for non-existant object _PR2.

Test 53 of 189: Test _PR3 (Power Resources for D3).
SKIPPED: Test 53, Skipping test for non-existant object _PR3.

Test 54 of 189: Test _PRW (Power Resources for Wake).
PASSED: Test 54, \_SB_.PCI0.P0P1._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.PEG0._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.PEG1._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.PEG2._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.PEG3._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.XHC1._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.EHC1._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB1._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB2._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB3._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB4._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.EHC2._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB5._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB6._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.USB7._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.HDEF._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP01._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP03._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP05._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP06._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP07._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP08._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP02.WLAN._PRW correctly returned a sane looking
package.
PASSED: Test 54, \_SB_.PCI0.RP04._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.PCI0.RP04.GLAN._PRW correctly returned a sane looking
package.
PASSED: Test 54, \_SB_.PCI0.XHC_._PRW correctly returned a sane looking package.
PASSED: Test 54, \_SB_.SLPB._PRW correctly returned a sane looking package.

Test 55 of 189: Test _PS0 (Power State 0).
SKIPPED: Test 55, Skipping test for non-existant object _PS0.

Test 56 of 189: Test _PS1 (Power State 1).
SKIPPED: Test 56, Skipping test for non-existant object _PS1.

Test 57 of 189: Test _PS2 (Power State 2).
SKIPPED: Test 57, Skipping test for non-existant object _PS2.

Test 58 of 189: Test _PS3 (Power State 3).
SKIPPED: Test 58, Skipping test for non-existant object _PS3.

Test 59 of 189: Test _PSC (Power State Current).
SKIPPED: Test 59, Skipping test for non-existant object _PSC.

Test 60 of 189: Test _PSE (Power State for Enumeration).
SKIPPED: Test 60, Skipping test for non-existant object _PSE.

Test 61 of 189: Test _PSW (Power State Wake).
SKIPPED: Test 61, Skipping test for non-existant object _PSW.

Test 62 of 189: Test _S1D (S1 Device State).
SKIPPED: Test 62, Skipping test for non-existant object _S1D.

Test 63 of 189: Test _S2D (S2 Device State).
SKIPPED: Test 63, Skipping test for non-existant object _S2D.

Test 64 of 189: Test _S3D (S3 Device State).
PASSED: Test 64, \_SB_.PCI0.XHC_._S3D correctly returned an integer.

Test 65 of 189: Test _S4D (S4 Device State).
PASSED: Test 65, \_SB_.PCI0.XHC_._S4D correctly returned an integer.

Test 66 of 189: Test _S0W (S0 Device Wake State).
SKIPPED: Test 66, Skipping test for non-existant object _S0W.

Test 67 of 189: Test _S1W (S1 Device Wake State).
SKIPPED: Test 67, Skipping test for non-existant object _S1W.

Test 68 of 189: Test _S2W (S2 Device Wake State).
SKIPPED: Test 68, Skipping test for non-existant object _S2W.

Test 69 of 189: Test _S3W (S3 Device Wake State).
SKIPPED: Test 69, Skipping test for non-existant object _S3W.

Test 70 of 189: Test _S4W (S4 Device Wake State).
SKIPPED: Test 70, Skipping test for non-existant object _S4W.

Test 71 of 189: Test _RST (Device Reset).
SKIPPED: Test 71, Skipping test for non-existant object _RST.

Test 72 of 189: Test _PRR (Power Resource for Reset).
SKIPPED: Test 72, Skipping test for non-existant object _PRR.

Test 73 of 189: Test _S0_ (S0 System State).
\_S0_ PM1a_CNT.SLP_TYP value: 0x00000000
\_S0_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 73, \_S0_ correctly returned a sane looking package.

Test 74 of 189: Test _S1_ (S1 System State).
SKIPPED: Test 74, Skipping test for non-existant object _S1_.

Test 75 of 189: Test _S2_ (S2 System State).
SKIPPED: Test 75, Skipping test for non-existant object _S2_.

Test 76 of 189: Test _S3_ (S3 System State).
\_S3_ PM1a_CNT.SLP_TYP value: 0x00000005
\_S3_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 76, \_S3_ correctly returned a sane looking package.

Test 77 of 189: Test _S4_ (S4 System State).
\_S4_ PM1a_CNT.SLP_TYP value: 0x00000006
\_S4_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 77, \_S4_ correctly returned a sane looking package.

Test 78 of 189: Test _S5_ (S5 System State).
\_S5_ PM1a_CNT.SLP_TYP value: 0x00000007
\_S5_ PM1b_CNT.SLP_TYP value: 0x00000000
PASSED: Test 78, \_S5_ correctly returned a sane looking package.

Test 79 of 189: Test _SWS (System Wake Source).
SKIPPED: Test 79, Skipping test for non-existant object _SWS.

Test 80 of 189: Test _PSS (Performance Supported States).
\_PR_.CPU0._PSS values:
P-State  Freq     Power  Latency   Bus Master
         (MHz)    (mW)    (us)    Latency (us)
   0      2301    45000    10        10
   1      2300    45000    10        10
   2      2200    42264    10        10
   3      2100    40021    10        10
   4      2000    37387    10        10
   5      1900    35236    10        10
   6      1800    33127    10        10
   7      1700    30647    10        10
   8      1600    28627    10        10
   9      1500    26648    10        10
  10      1400    24305    10        10
  11      1300    22413    10        10
  12      1200    20566    10        10
PASSED: Test 80, \_PR_.CPU0._PSS correctly returned a sane looking package.

Test 81 of 189: Test _CPC (Continuous Performance Control).
SKIPPED: Test 81, Skipping test for non-existant object _CPC.

Test 82 of 189: Test _CSD (C State Dependencies).
SKIPPED: Test 82, Skipping test for non-existant object _CSD.

Test 83 of 189: Test _CST (C States).
SKIPPED: Test 83, Skipping test for non-existant object _CST.

Test 84 of 189: Test _PCT (Performance Control).
PASSED: Test 84, \_PR_.CPU0._PCT correctly returned a sane looking package.

Test 85 of 189: Test _PDL (P-State Depth Limit).
SKIPPED: Test 85, Skipping test for non-existant object _PDL.

Test 86 of 189: Test _PPC (Performance Present Capabilities).
PASSED: Test 86, \_PR_.CPU0._PPC correctly returned an integer.

Test 87 of 189: Test _PPE (Polling for Platform Error).
SKIPPED: Test 87, Skipping test for non-existant object _PPE.

Test 88 of 189: Test _PSD (Power State Dependencies).
PASSED: Test 88, \_PR_.CPU0._PSD correctly returned a sane looking package.

Test 89 of 189: Test _PTC (Processor Throttling Control).
SKIPPED: Test 89, Skipping test for non-existant object _PTC.

Test 90 of 189: Test _TDL (T-State Depth Limit).
SKIPPED: Test 90, Skipping test for non-existant object _TDL.

Test 91 of 189: Test _TPC (Throttling Present Capabilities).
SKIPPED: Test 91, Skipping test for non-existant object _TPC.

Test 92 of 189: Test _TSD (Throttling State Dependencies).
SKIPPED: Test 92, Skipping test for non-existant object _TSD.

Test 93 of 189: Test _TSS (Throttling Supported States).
SKIPPED: Test 93, Skipping test for non-existant object _TSS.

Test 94 of 189: Test _LPI (Low Power Idle States).
SKIPPED: Test 94, Skipping test for non-existant object _LPI.

Test 95 of 189: Test _RDI (Resource Dependencies for Idle).
SKIPPED: Test 95, Skipping test for non-existant object _RDI.

Test 96 of 189: Test _PUR (Processor Utilization Request).
SKIPPED: Test 96, Skipping test for non-existant object _PUR.

Test 97 of 189: Test _MSG (Message).
SKIPPED: Test 97, Skipping test for non-existant object _MSG.

Test 98 of 189: Test _SST (System Status).
SKIPPED: Test 98, Skipping test for non-existant object _SST.

Test 99 of 189: Test _ALC (Ambient Light Colour Chromaticity).
SKIPPED: Test 99, Skipping test for non-existant object _ALC.

Test 100 of 189: Test _ALI (Ambient Light Illuminance).
SKIPPED: Test 100, Skipping test for non-existant object _ALI.

Test 101 of 189: Test _ALT (Ambient Light Temperature).
SKIPPED: Test 101, Skipping test for non-existant object _ALT.

Test 102 of 189: Test _ALP (Ambient Light Polling).
SKIPPED: Test 102, Skipping test for non-existant object _ALP.

Test 103 of 189: Test _ALR (Ambient Light Response).
SKIPPED: Test 103, Skipping test for non-existant object _ALR.

Test 104 of 189: Test _LID (Lid Status).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 104, Detected an infinite loop when evaluating method
'\_SB_.LID_._LID'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test 105 of 189: Test _GTF (Get Task File).
ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 105, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT0._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.

ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 105, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT1._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.

ACPICA Exception AE_AML_OPERAND_VALUE during execution of method RATA
FAILED [HIGH] AEAMLOperandValue: Test 105, Detected error 'Incorrect operand
value' when evaluating '\_SB_.PCI0.IDE0.PRT2._GTF'.

ADVICE: An AML opcode has an operand of an inappropriate or invalid value.


Test 106 of 189: Test _GTM (Get Timing Mode).
SKIPPED: Test 106, Skipping test for non-existant object _GTM.

Test 107 of 189: Test _MBM (Memory Bandwidth Monitoring Data).
SKIPPED: Test 107, Skipping test for non-existant object _MBM.

Test 108 of 189: Test _UPC (USB Port Capabilities).
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.HSP1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.HSP2._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.HSP3._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.HSP4._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.SSP1._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.SSP2._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.SSP3._UPC correctly returned a sane
looking package.
PASSED: Test 108, \_SB_.PCI0.XHC_.RHUB.SSP4._UPC correctly returned a sane
looking package.

Test 109 of 189: Test _UPD (User Presence Detect).
SKIPPED: Test 109, Skipping test for non-existant object _UPD.

Test 110 of 189: Test _UPP (User Presence Polling).
SKIPPED: Test 110, Skipping test for non-existant object _UPP.

Test 111 of 189: Test _GCP (Get Capabilities).
SKIPPED: Test 111, Skipping test for non-existant object _GCP.

Test 112 of 189: Test _GRT (Get Real Time).
SKIPPED: Test 112, Skipping test for non-existant object _GRT.

Test 113 of 189: Test _GWS (Get Wake Status).
SKIPPED: Test 113, Skipping test for non-existant object _GWS.

Test 114 of 189: Test _CWS (Clear Wake Status).
SKIPPED: Test 114, Skipping test for non-existant object _CWS.

Test 115 of 189: Test _STP (Set Expired Timer Wake Policy).
SKIPPED: Test 115, Skipping test for non-existant object _STP.

Test 116 of 189: Test _STV (Set Timer Value).
SKIPPED: Test 116, Skipping test for non-existant object _STV.

Test 117 of 189: Test _TIP (Expired Timer Wake Policy).
SKIPPED: Test 117, Skipping test for non-existant object _TIP.

Test 118 of 189: Test _TIV (Timer Values).
SKIPPED: Test 118, Skipping test for non-existant object _TIV.

Test 119 of 189: Test _SBS (Smart Battery Subsystem).
SKIPPED: Test 119, Skipping test for non-existant object _SBS.

Test 120 of 189: Test _BCT (Battery Charge Time).
SKIPPED: Test 120, Skipping test for non-existant object _BCT.

Test 121 of 189: Test _BIF (Battery Information).
PASSED: Test 121, \_SB_.PCI0.BAT0._BIF correctly returned a sane looking
package.

Test 122 of 189: Test _BIX (Battery Information Extended).
SKIPPED: Test 122, Skipping test for non-existant object _BIX.

Test 123 of 189: Test _BMA (Battery Measurement Averaging).
SKIPPED: Test 123, Skipping test for non-existant object _BMA.

Test 124 of 189: Test _BMC (Battery Maintenance Control).
SKIPPED: Test 124, Skipping test for non-existant object _BMC.

Test 125 of 189: Test _BMD (Battery Maintenance Data).
SKIPPED: Test 125, Skipping test for non-existant object _BMD.

Test 126 of 189: Test _BMS (Battery Measurement Sampling Time).
SKIPPED: Test 126, Skipping test for non-existant object _BMS.

Test 127 of 189: Test _BST (Battery Status).
PASSED: Test 127, \_SB_.PCI0.BAT0._BST correctly returned a sane looking
package.

Test 128 of 189: Test _BTP (Battery Trip Point).
SKIPPED: Test 128, Skipping test for non-existant object _BTP.

Test 129 of 189: Test _BTH (Battery Throttle Limit).
SKIPPED: Test 129, Skipping test for non-existant object _BTH.

Test 130 of 189: Test _BTM (Battery Time).
SKIPPED: Test 130, Skipping test for non-existant object _BTM.

Test 131 of 189: Test _PCL (Power Consumer List).
PASSED: Test 131, \_SB_.PCI0.AC0_._PCL returned a sane package of 1 references.
PASSED: Test 131, \_SB_.PCI0.BAT0._PCL returned a sane package of 1 references.

Test 132 of 189: Test _PIF (Power Source Information).
SKIPPED: Test 132, Skipping test for non-existant object _PIF.

Test 133 of 189: Test _PRL (Power Source Redundancy List).
SKIPPED: Test 133, Skipping test for non-existant object _PRL.

Test 134 of 189: Test _PSR (Power Source).
PASSED: Test 134, \_SB_.PCI0.AC0_._PSR correctly returned sane looking value
0x00000000.

Test 135 of 189: Test _GAI (Get Averaging Level).
SKIPPED: Test 135, Skipping test for non-existant object _GAI.

Test 136 of 189: Test _GHL (Get Harware Limit).
SKIPPED: Test 136, Skipping test for non-existant object _GHL.

Test 137 of 189: Test _PMC (Power Meter Capabilities).
SKIPPED: Test 137, Skipping test for non-existant object _PMC.

Test 138 of 189: Test _PMD (Power Meter Devices).
SKIPPED: Test 138, Skipping test for non-existant object _PMD.

Test 139 of 189: Test _PMM (Power Meter Measurement).
SKIPPED: Test 139, Skipping test for non-existant object _PMM.

Test 140 of 189: Test _FIF (Fan Information).
SKIPPED: Test 140, Skipping test for non-existant object _FIF.

Test 141 of 189: Test _FPS (Fan Performance States).
SKIPPED: Test 141, Skipping test for non-existant object _FPS.

Test 142 of 189: Test _FSL (Fan Set Level).
SKIPPED: Test 142, Skipping test for non-existant object _FSL.

Test 143 of 189: Test _FST (Fan Status).
SKIPPED: Test 143, Skipping test for non-existant object _FST.

Test 144 of 189: Test _ACx (Active Cooling).
SKIPPED: Test 144, Skipping test for non-existant object _AC0.

SKIPPED: Test 144, Skipping test for non-existant object _AC1.

SKIPPED: Test 144, Skipping test for non-existant object _AC2.

SKIPPED: Test 144, Skipping test for non-existant object _AC3.

SKIPPED: Test 144, Skipping test for non-existant object _AC4.

SKIPPED: Test 144, Skipping test for non-existant object _AC5.

SKIPPED: Test 144, Skipping test for non-existant object _AC6.

SKIPPED: Test 144, Skipping test for non-existant object _AC7.

SKIPPED: Test 144, Skipping test for non-existant object _AC8.

SKIPPED: Test 144, Skipping test for non-existant object _AC9.


Test 145 of 189: Test _ART (Active Cooling Relationship Table).
SKIPPED: Test 145, Skipping test for non-existant object _ART.

Test 146 of 189: Test _CRT (Critical Trip Point).
PASSED: Test 146, \_TZ_.THRM._CRT correctly returned a sane looking return type.

Test 147 of 189: Test _CR3 (Warm/Standby Temperature).
SKIPPED: Test 147, Skipping test for non-existant object _CR3.

Test 148 of 189: Test _DTI (Device Temperature Indication).
SKIPPED: Test 148, Skipping test for non-existant object _DTI.

Test 149 of 189: Test _HOT (Hot Temperature).
SKIPPED: Test 149, Skipping test for non-existant object _HOT.

Test 150 of 189: Test _MTL (Minimum Throttle Limit).
SKIPPED: Test 150, Skipping test for non-existant object _MTL.

Test 151 of 189: Test _NTT (Notification Temp Threshold).
SKIPPED: Test 151, Skipping test for non-existant object _NTT.

Test 152 of 189: Test _PSL (Passive List).
PASSED: Test 152, \_TZ_.THRM._PSL correctly returned a sane looking package.

Test 153 of 189: Test _PSV (Passive Temp).
PASSED: Test 153, \_TZ_.THRM._PSV correctly returned a sane looking return type.

Test 154 of 189: Test _RTV (Relative Temp Values).
SKIPPED: Test 154, Skipping test for non-existant object _RTV.

Test 155 of 189: Test _SCP (Set Cooling Policy).
SKIPPED: Test 155, Skipping test for non-existant object _DTI.

Test 156 of 189: Test _TC1 (Thermal Constant 1).
PASSED: Test 156, _TC1 correctly returned sane looking value 0x00000002.

Test 157 of 189: Test _TC2 (Thermal Constant 2).
PASSED: Test 157, _TC1 correctly returned sane looking value 0x0000000a.

Test 158 of 189: Test _TFP (Thermal fast Sampling Period).
SKIPPED: Test 158, Skipping test for non-existant object _TFP.

Test 159 of 189: Test _TMP (Thermal Zone Current Temp).
PASSED: Test 159, \_TZ_.THRM._TMP correctly returned a sane looking return type.

Test 160 of 189: Test _TPT (Trip Point Temperature).
SKIPPED: Test 160, Skipping test for non-existant object _TPT.

Test 161 of 189: Test _TRT (Thermal Relationship Table).
SKIPPED: Test 161, Skipping test for non-existant object _TRT.

Test 162 of 189: Test _TSN (Thermal Sensor Device).
SKIPPED: Test 162, Skipping test for non-existant object _TSN.

Test 163 of 189: Test _TSP (Thermal Sampling Period).
PASSED: Test 163, _TSP correctly returned sane looking value 10.000000 seconds

Test 164 of 189: Test _TST (Temperature Sensor Threshold).
SKIPPED: Test 164, Skipping test for non-existant object _TST.

Test 165 of 189: Test _TZD (Thermal Zone Devices).
SKIPPED: Test 165, Skipping test for non-existant object _TZD.

Test 166 of 189: Test _TZM (Thermal Zone member).
SKIPPED: Test 166, Skipping test for non-existant object _TZM.

Test 167 of 189: Test _TZP (Thermal Zone Polling).
SKIPPED: Test 167, Skipping test for non-existant object _TZP.

Test 168 of 189: Test _GPE (General Purpose Events).
PASSED: Test 168, \_SB_.PCI0.LPCB.EC0_._GPE returned an integer 0x00000019

Test 169 of 189: Test _EC_ (EC Offset Query).
SKIPPED: Test 169, Skipping test for non-existant object _EC_.

Test 170 of 189: Test _PTS (Prepare to Sleep).
Test _PTS(1).
PASSED: Test 170, \_PTS returned no values as expected.

Test _PTS(2).
PASSED: Test 170, \_PTS returned no values as expected.

Test _PTS(3).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 170, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(4).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 170, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _PTS(5).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 170, Detected an infinite loop when evaluating method '\_PTS'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.



Test 171 of 189: Test _TTS (Transition to State).
SKIPPED: Test 171, Optional control method _TTS does not exist.

Test 172 of 189: Test _WAK (System Wake).
Test _WAK(1) System Wake, State S1.
PASSED: Test 172, \_WAK correctly returned a sane looking package.

Test _WAK(2) System Wake, State S2.
PASSED: Test 172, \_WAK correctly returned a sane looking package.

Test _WAK(3) System Wake, State S3.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 172, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(4) System Wake, State S4.
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method WEOF
WARNING: Test 172, Detected an infinite loop when evaluating method '\_WAK'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test _WAK(5) System Wake, State S5.
PASSED: Test 172, \_WAK correctly returned a sane looking package.


Test 173 of 189: Test _ADR (Return Unique ID for Device).
PASSED: Test 173, \_SB_.PCI0._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.P0P1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.B0D4._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.CRTD._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.DPOD._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.EDPD._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.HDMI._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.HDI2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG0.GFX0.LCDD._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.PEG3._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT1._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT2._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT3._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT4._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT5._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT6._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT7._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC1.RHUB.PRT1.PRT8._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.USB1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.USB2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.USB3._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.USB4._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT1._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT2._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT3.DCAM._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT4._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT5._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.EHC2.RHUB.PRT1.PRT6._ADR correctly returned an
integer.
PASSED: Test 173, \_SB_.PCI0.USB5._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.USB6._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.USB7._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.HDEF._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP01._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP03._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP05._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP06._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP07._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP08._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.LPCB._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.IDE0._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.IDE0.PRT0._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.IDE0.PRT1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.IDE0.PRT2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.IDE1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.SBUS._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP02._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP02.WLAN._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP04._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.RP04.GLAN._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.HSP1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.HSP2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.HSP3._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.HSP4._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.SSP1._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.SSP2._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.SSP3._ADR correctly returned an integer.
PASSED: Test 173, \_SB_.PCI0.XHC_.RHUB.SSP4._ADR correctly returned an integer.

Test 174 of 189: Test _BCL (Query List of Brightness Control Levels Supported).
ACPICA Exception AE_AML_INFINITE_LOOP during execution of method _BCL
WARNING: Test 174, Detected an infinite loop when evaluating method
'\_SB_.PCI0.PEG0.GFX0.EDPD._BCL'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.

ACPICA Exception AE_AML_INFINITE_LOOP during execution of method _BCL
WARNING: Test 174, Detected an infinite loop when evaluating method
'\_SB_.PCI0.PEG0.GFX0.LCDD._BCL'. 

ADVICE: This may occur because we are emulating the execution in this test
environment and cannot handshake with the embedded controller or jump to the
BIOS via SMIs. However, the fact that AML code spins forever means that lockup
conditions are not being checked for in the AML bytecode.


Test 175 of 189: Test _BCM (Set Brightness Level).
PASSED: Test 175, \_SB_.PCI0.PEG0.GFX0.EDPD._BCM returned no values as expected.
PASSED: Test 175, \_SB_.PCI0.PEG0.GFX0.LCDD._BCM returned no values as expected.

Test 176 of 189: Test _BQC (Brightness Query Current Level).
PASSED: Test 176, \_SB_.PCI0.PEG0.GFX0.EDPD._BQC correctly returned an integer.
PASSED: Test 176, \_SB_.PCI0.PEG0.GFX0.LCDD._BQC correctly returned an integer.

Test 177 of 189: Test _DCS (Return the Status of Output Device).
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.CRTD._DCS correctly returned an integer.
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.DPOD._DCS correctly returned an integer.
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.EDPD._DCS correctly returned an integer.
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.HDMI._DCS correctly returned an integer.
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.HDI2._DCS correctly returned an integer.
PASSED: Test 177, \_SB_.PCI0.PEG0.GFX0.LCDD._DCS correctly returned an integer.

Test 178 of 189: Test _DDC (Return the EDID for this Device).
SKIPPED: Test 178, Skipping test for non-existant object _DDC.

Test 179 of 189: Test _DSS (Device Set State).
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.CRTD._DSS returned no values as expected.
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.DPOD._DSS returned no values as expected.
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.EDPD._DSS returned no values as expected.
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.HDMI._DSS returned no values as expected.
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.HDI2._DSS returned no values as expected.
PASSED: Test 179, \_SB_.PCI0.PEG0.GFX0.LCDD._DSS returned no values as expected.

Test 180 of 189: Test _DGS (Query Graphics State).
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.CRTD._DGS correctly returned an integer.
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.DPOD._DGS correctly returned an integer.
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.EDPD._DGS correctly returned an integer.
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.HDMI._DGS correctly returned an integer.
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.HDI2._DGS correctly returned an integer.
PASSED: Test 180, \_SB_.PCI0.PEG0.GFX0.LCDD._DGS correctly returned an integer.

Test 181 of 189: Test _DOD (Enumerate All Devices Attached to Display Adapter).
Device 0:
  Instance:                0
  Display port attachment: 0
  Type of display:         1 (VGA, CRT or VESA Compatible Analog Monitor)
  BIOS can detect device:  1
  Non-VGA device:          0
  Head or pipe ID:         0
Device 1:
  Video Chip Vendor Scheme 2147509056
Device 2:
  Video Chip Vendor Scheme 2147525680
Device 3:
  Video Chip Vendor Scheme 2147517232
Device 4:
  Video Chip Vendor Scheme 2147517233
Device 5:
  Instance:                0
  Display port attachment: 1
  Type of display:         1 (VGA, CRT or VESA Compatible Analog Monitor)
  BIOS can detect device:  1
  Non-VGA device:          0
  Head or pipe ID:         0
PASSED: Test 181, \_SB_.PCI0.PEG0.GFX0._DOD correctly returned a sane looking
package.

Test 182 of 189: Test _DOS (Enable/Disable Output Switching).
PASSED: Test 182, \_SB_.PCI0.PEG0.GFX0._DOS returned no values as expected.

Test 183 of 189: Test _GPD (Get POST Device).
SKIPPED: Test 183, Skipping test for non-existant object _GPD.

Test 184 of 189: Test _ROM (Get ROM Data).
PASSED: Test 184, \_SB_.PCI0.PEG0.GFX0._ROM correctly returned a sane looking
package.

Test 185 of 189: Test _SPD (Set POST Device).
SKIPPED: Test 185, Skipping test for non-existant object _SPD.

Test 186 of 189: Test _VPO (Video POST Options).
SKIPPED: Test 186, Skipping test for non-existant object _VPO.

Test 187 of 189: Test _CBA (Configuration Base Address).
SKIPPED: Test 187, Skipping test for non-existant object _CBA.

Test 188 of 189: Test _IFT (IPMI Interface Type).
SKIPPED: Test 188, Skipping test for non-existant object _IFT.

Test 189 of 189: Test _SRV (IPMI Interface Revision).
SKIPPED: Test 189, Skipping test for non-existant object _SRV.

================================================================================
333 passed, 3 failed, 8 warnings, 0 aborted, 146 skipped, 0 info only.
================================================================================

msdm: MSDM Microsoft Data Management Table test.
--------------------------------------------------------------------------------
Test 1 of 1: MSDM Microsoft Data Management Table test.
  Reserved:                 0x00000000
  Data Type:                0x00000001
  Data Reserved:            0x00000000
  Data Length:              0x0000001d
  Data:                     'K32FB-84N9Q-FVCY6-WCKG8-XWXVT'
MSDM has had minimal check due to proprietary nature of the table
PASSED: Test 1, No issues found in MSDM table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

msct: MSCT Maximum System Characteristics Table test.
--------------------------------------------------------------------------------
ACPI MSCT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

mchi: MCHI Management Controller Host Interface Table test.
--------------------------------------------------------------------------------
ACPI MCHI table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

mcfg: MCFG PCI Express* memory mapped config space test.
--------------------------------------------------------------------------------
Test 1 of 2: Validate MCFG table.
This test tries to validate the MCFG table by comparing the first 16 bytes in
the MMIO mapped config space with the 'traditional' config space of the first
PCI device (root bridge). The MCFG data is only trusted if it is marked reserved
in the UEFI run-time service memory map

Memory Map Layout
-----------------
0x0000000000000000 - 0x000000000009efff (System RAM)
0x000000000009f000 - 0x000000000009ffff (reserved)
0x0000000000100000 - 0x00000000dd6acfff (System RAM)
0x00000000dd6ad000 - 0x00000000ddcadfff (ACPI Non-volatile Storage)
0x00000000ddcae000 - 0x00000000ddcb0fff (reserved)
0x00000000ddcb1000 - 0x00000000ddcc7fff (System RAM)
0x00000000ddcc8000 - 0x00000000ddccdfff (reserved)
0x00000000ddcce000 - 0x00000000ddccffff (System RAM)
0x00000000ddcd0000 - 0x00000000ddcd9fff (reserved)
0x00000000ddcda000 - 0x00000000dde6cfff (System RAM)
0x00000000dde6d000 - 0x00000000dde70fff (reserved)
0x00000000dde71000 - 0x00000000ddebafff (System RAM)
0x00000000ddebb000 - 0x00000000ddec1fff (reserved)
0x00000000ddec2000 - 0x00000000ddecefff (reserved)
0x00000000ddecf000 - 0x00000000ddedffff (reserved)
0x00000000ddee0000 - 0x00000000ddee2fff (System RAM)
0x00000000ddee3000 - 0x00000000ddee4fff (reserved)
0x00000000ddee5000 - 0x00000000ddefbfff (System RAM)
0x00000000ddefc000 - 0x00000000ddf01fff (reserved)
0x00000000ddf02000 - 0x00000000ddf09fff (System RAM)
0x00000000ddf0a000 - 0x00000000ddf0afff (reserved)
0x00000000ddf0b000 - 0x00000000ddf19fff (System RAM)
0x00000000ddf1a000 - 0x00000000ddf1afff (reserved)
0x00000000ddf1b000 - 0x00000000ddf25fff (System RAM)
0x00000000ddf26000 - 0x00000000ddf2afff (reserved)
0x00000000ddf2b000 - 0x00000000ddf56fff (System RAM)
0x00000000ddf57000 - 0x00000000ddf57fff (reserved)
0x00000000ddf58000 - 0x00000000ddf67fff (System RAM)
0x00000000ddf68000 - 0x00000000ddf8efff (reserved)
0x00000000ddf8f000 - 0x00000000ddfa1fff (System RAM)
0x00000000ddfa2000 - 0x00000000ddfa2fff (reserved)
0x00000000ddfa3000 - 0x00000000ddfa3fff (System RAM)
0x00000000ddfa4000 - 0x00000000ddfa5fff (reserved)
0x00000000ddfa6000 - 0x00000000ddfa7fff (System RAM)
0x00000000ddfa8000 - 0x00000000ddfacfff (reserved)
0x00000000ddfad000 - 0x00000000ddfc0fff (System RAM)
0x00000000ddfc1000 - 0x00000000de041fff (reserved)
0x00000000de042000 - 0x00000000de05bfff (reserved)
0x00000000de05c000 - 0x00000000de585fff (reserved)
0x00000000de586000 - 0x00000000de805fff (ACPI Non-volatile Storage)
0x00000000de806000 - 0x00000000de80afff (ACPI Non-volatile Storage)
0x00000000de80b000 - 0x00000000de80bfff (System RAM)
0x00000000de80c000 - 0x00000000de84efff (ACPI Non-volatile Storage)
0x00000000de84f000 - 0x00000000dec5bfff (System RAM)
0x00000000dec5c000 - 0x00000000deff3fff (reserved)
0x00000000deff4000 - 0x00000000deffffff (System RAM)
0x00000000f8000000 - 0x00000000fbffffff (reserved)
0x00000000fec00000 - 0x00000000fec00fff (reserved)
0x00000000fed00000 - 0x00000000fed03fff (reserved)
0x00000000fed1c000 - 0x00000000fed1ffff (reserved)
0x00000000fee00000 - 0x00000000fee00fff (reserved)
0x00000000ff000000 - 0x00000000ffffffff (reserved)
0x0000000100000000 - 0x000000041f3fffff (System RAM)

MCFG table found, size is 16 bytes (excluding header) (1 entries).
Configuration Entry #0:
  Base Address  : 0xf8000000
  Segment       : 0
  Start bus     : 0
  End bus       : 63
PASSED: Test 1, MCFG MMIO config space is reserved in memory map table.

Test 2 of 2: Validate MCFG PCI config space.
PASSED: Test 2, PCI config space verified.

================================================================================
2 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

madt: MADT Multiple APIC Description Table (spec compliant).
--------------------------------------------------------------------------------
Test 1 of 5: MADT checksum test.
PASSED: Test 1, MADT checksum is correct

Test 2 of 5: MADT revision test.
Most recent FADT revision is 6.0.
Most recent MADT revision is 4.
PASSED: Test 2, MADT revision 3 is defined.
PASSED: Test 2, MADT revision 3 is in sync with FADT revision 5.0.

Test 3 of 5: MADT architecture minimum revision test.
PASSED: Test 3, MADT revision 3 meets the minimum needed (1) for the intel
architecture.

Test 4 of 5: MADT flags field reserved bits test.
PASSED: Test 4, MADT flags reserved bits are not set.

Test 5 of 5: MADT subtable tests.
PASSED: Test 5, MADT revision 3 is defined.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 1 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 2 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 3 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 4 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 5 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 6 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 7 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 0 (Processor Local APIC) is defined.
PASSED: Test 5, Subtable 8 of type 0 (Processor Local APIC) is the correct
length: 8
PASSED: Test 5, MADT Processor Local APIC flags field, bits 1..31 are reserved
and properly set to zero.
PASSED: Test 5, MADT subtable type 1 (I/O APIC) is defined.
PASSED: Test 5, Subtable 9 of type 1 (I/O APIC) is the correct length: 12
PASSED: Test 5, MADT I/O APIC flags are reserved, and set to zero.
PASSED: Test 5, MADT I/O APIC address in non-zero.
PASSED: Test 5, MADT subtable type 2 (Interrupt Source Override) is defined.
PASSED: Test 5, Subtable 10 of type 2 (Interrupt Source Override) is the correct
length: 10
PASSED: Test 5, MADT Interrupt Source Override Bus is 0 for ISA bus.
PASSED: Test 5, MADT Interrupt Source Override flags, bits 4..31 are reserved
and set to zero.
PASSED: Test 5, MADT subtable type 2 (Interrupt Source Override) is defined.
PASSED: Test 5, Subtable 11 of type 2 (Interrupt Source Override) is the correct
length: 10
PASSED: Test 5, MADT Interrupt Source Override Bus is 0 for ISA bus.
PASSED: Test 5, MADT Interrupt Source Override flags, bits 4..31 are reserved
and set to zero.
PASSED: Test 5, MADT subtable type 4 (Local APIC NMI) is defined.
PASSED: Test 5, Subtable 12 of type 4 (Local APIC NMI) is the correct length: 6
PASSED: Test 5, MADT Local APIC NMI flags, bits 4..31 are reserved and set to
zero.

================================================================================
45 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

lpit: LPIT Low Power Idle Table test.
--------------------------------------------------------------------------------
ACPI LPIT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

iort: IORT IO Remapping Table test.
--------------------------------------------------------------------------------
ACPI IORT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

hpet: HPET IA-PC High Precision Event Timer Table tests.
--------------------------------------------------------------------------------
Test 1 of 4: Test HPET base in kernel log.
This test checks the HPET PCI BAR for each timer block in the timer. The base
address is passed by the firmware via an ACPI table. IRQ routing and
initialization is also verified by the test.
PASSED: Test 1, Found HPET base 0xfed00000 in kernel log.

Test 2 of 4: Test HPET base in HPET table.
Hardware ID of Event Block:
  PCI Vendor ID              : 0x8086
  Legacy IRQ Routing Capable : 1
  COUNT_SIZE_CAP counter size: 1
  Number of comparitors      : 7
  Hardwre Revision ID        : 0x1
Lower 32 bit base Address    : 0xfed00000
  Address Space ID           : 0x0
  Register Bit Width         : 0x40
  Register Bit Offset        : 0x0
  Address Width              : 0x0
HPET sequence number         : 0x0
Minimum clock tick           : 0x37ee
Page Protection              : 0x0 (No guaranteed protection)
OEM attributes               : 0x0
PASSED: Test 2, HPET looks sane.

Test 3 of 4: Test HPET base in DSDT and/or SSDT.
PASSED: Test 3, HPET base matches that between DSDT and the kernel (0xfed00000).

Test 4 of 4: Test HPET configuration.
PASSED: Test 4, Vendor ID looks sane: 0x8086.
PASSED: Test 4, Valid clock period 69841279.

================================================================================
5 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

hest: HEST Hardware Error Source Table test.
--------------------------------------------------------------------------------
ACPI HEST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

gtdt: GTDT Generic Timer Description Table test.
--------------------------------------------------------------------------------
ACPI GTDT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

fpdt: FPDT Firmware Performance Data Table test.
--------------------------------------------------------------------------------
Test 1 of 1: FPDT Firmware Performance Data Table test.
  S3 Performance Table Pointer Record:
    Perf Rec Type:	0x0001
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    S3PT Pointer:	0x00000000de06e018
Note: currently fwts does not check S3PT validity and the associated data
    Firmware Basic Boot Performance Pointer Record:
    Perf Rec Type:	0x0000
    Rec Length:	0x10
    Revision:	0x01
    Reserved:	0x00000000
    FBPT Pointer:	0x00000000de06e038
Note: currently fwts does not check FBPT validity and the associated data
PASSED: Test 1, No issues found in FPDT table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fan: Simple fan tests.
--------------------------------------------------------------------------------
Test 1 of 2: Test fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
PASSED: Test 1, Fan cooling_device0 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device1 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device2 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device3 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device4 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device5 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device6 of type Processor has max cooling state 3
and current cooling state 0.
PASSED: Test 1, Fan cooling_device7 of type Processor has max cooling state 3
and current cooling state 0.
FAILED [MEDIUM] NoFanCurState: Test 1, Fan present but has no cur_state present.

Test 2 of 2: Load system, check CPU fan status.
Test how many fans there are in the system. Check for the current status of the
fan(s).
Loading CPUs for 20 seconds to try and get fan speeds to change.
Fan cooling_device0 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device1 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device2 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device3 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device4 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device5 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device6 current state did not change from value 0 while CPUs were
busy.
Fan cooling_device7 current state did not change from value 0 while CPUs were
busy.

ADVICE: Did not detect any change in the CPU related thermal cooling device
states. It could be that the devices are returning static information back to
the driver and/or the fan speed is automatically being controlled by firmware
using System Management Mode in which case the kernel interfaces being examined
may not work anyway.


================================================================================
8 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

fadt: FADT Fixed ACPI Description Table tests.
--------------------------------------------------------------------------------
Test 1 of 6: ACPI FADT Description Table flag info.
FADT: flag states
 WBINVD is set
 WBINVD_FLUSH is not set
 PROC_C1 is set
 P_LVL2_UP is not set
 PWR_BUTTON is not set
 SLP_BUTTON is set
 FIX_RTC is not set
 RTC_S4 is set
 TMR_VAL_EXT is not set
 DCK_CAP is set
 RESET_REG_SUP is set
 SEALED_CASE is not set
 HEADLESS is not set
 CPU_SW_SLP is not set
 PCI_EXP_WAK is not set
 USE_PLATFORM_CLOCK is set
 S4_RTC_STS_VALID is set
 REMOTE_POWER_ON_CAPABLE is set
 FORCE_APIC_CLUSTER_MODEL is not set
 FORCE_APIC_PHYSICAL_DESTINATION_MODE is not set
 HW_REDUCED_ACPI is not set
 LOW_POWER_S0_IDLE_CAPABLE is not set
FADT: IA-PC Boot Architecture flag states
 LEGACY_DEVICES is not set
 8042 is set
 VGA_NOT_PRESENT is not set
 MSI_NOT_SUPPORTED is not set
 PCIE_ASPM_CONTROLS is set
 CMOS_RTC_NOT_PRESENT is not set
FADT: ARM Boot Architecture flag states
 PSCI_COMPLIANT is not set
 PSCI_USE_HVC is not set

Test 2 of 6: FADT checksum test.
PASSED: Test 2, FADT checksum is correct

Test 3 of 6: FADT revision test.
FADT revision: 5.0
FADT table length: 268
WARNING: Test 3, FADT revision is outdated: 5.0

ADVICE: The most recent revision of the FADT defined in the ACPI specification
is 6.1. While older revisions of the FADT can be used, newer ones may enable
additional functionality that cannot be used until the FADT is updated.


Test 4 of 6: ACPI FADT Description Table tests.
PASSED: Test 4, Only one of FIRMWARE_CTRL and X_FIRMWARE_CTRL is non-zero.
PASSED: Test 4, FADT 32 bit DSDT and 64 bit X_DSDT both point to the same
physical address (0xde7de188).

ADVICE: While it is not correct to use both of the 32- and 64-bit DSDT address
fields in recent versions of ACPI, they are at least the same address, which
keeps the kernel from getting confused. At some point, the 32-bit DSDT address
may get ignored so it is recommended that the FADT be upgraded to only use the
64-bit X_DSDT field. In the meantime, however, ACPI will still behave correctly.

FAILED [MEDIUM] FADTReservedZero: Test 4, FADT first reserved field is not zero:
0x01
PASSED: Test 4, FADT second reserved field is zero.
FADT Preferred PM Profile: 2 (Mobile) 
PASSED: Test 4, FADT has a valid preferred PM profile.
FADT indicates ACPI IS NOT in reduced hardware mode.
FADT SCI_INT is 9
PASSED: Test 4, FADT SMI_CMD indicates System Management Mode is supported, and
the SCI Interrupt is non-zero.
PASSED: Test 4, FADT SMI ACPI enable command is non-zero, and SMM is supported.
PASSED: Test 4, FADT SMI ACPI disable command is non-zero, and SMM is supported.
PASSED: Test 4, FADT indicates we are not in reduced hardware mode, and required
FACS is present.
PASSED: Test 4, FADT S4BIOS_REQ command is not set and FACS indicates it is not
supported.
PASSED: Test 4, FADT required PM1A_EVT_BLK field is non-zero
FAILED [MEDIUM] FADTPm1aEvtBlkBothtSet: Test 4, FADT PM1A_EVT_BLK has both a
32-bit and a 64-bit address set; only one should be used.
PASSED: Test 4, FADT 32- and 64-bit PM1A_EVT_BLK fields are at least equal.

ADVICE: Both FADT 32- and 64-bit PM1A_EVT_BLK fields are being used, but only
one should be non-zero. However, they are at least equal so the kernel will at
least have a usable value.

SKIPPED: Test 4, FADT PM1B_EVT_BLK not being used.
PASSED: Test 4, FADT required PM1A_CNT_BLK field is non-zero
FAILED [MEDIUM] FADTPm1aCntBlkOnlyOneField: Test 4, FADT PM1A_CNT_BLK field has
both the 32-bit and the 64-bit field set.
PASSED: Test 4, FADT 32- and 64-bit PM1A_CNT_BLK fields are at least equal.

ADVICE: Both FADT 32- and 64-bit PM1A_CNT_BLK fields are being used, but only
one should be non-zero. However, they are at least equal so the kernel will at
least have a usable value.

SKIPPED: Test 4, FADT PM1B_CNT_BLK not being used.
FAILED [MEDIUM] FADTPm2CntBlkOnlyOneField: Test 4, FADT PM2_CNT_BLK field has
both the 32-bit and the 64-bit field set.
PASSED: Test 4, FADT 32- and 64-bit PM2_CNT_BLK fields are at least equal.

ADVICE: Both FADT 32- and 64-bit PM2_CNT_BLK fields are being used, but only one
should be non-zero. However, they are at least equal so the kernel will at least
have a usable value.

FAILED [MEDIUM] FADTPm2CntBlkOnlyOneField: Test 4, FADT PM_TMR_BLK field has
both the 32-bit and the 64-bit field set.
PASSED: Test 4, FADT 32- and 64-bit PM_TMR_BLK fields are at least equal.

ADVICE: Both FADT 32- and 64-bit PM_TMR_BLK fields are being used, but only one
should be non-zero. However, they are at least equal so the kernel will at least
have a usable value.

PASSED: Test 4, FADT PM1_EVT_LEN >= 4.
PASSED: Test 4, FADT PM1_CNT_LEN >= 2.
PASSED: Test 4, FADT PM2_CNT_LEN >= 1.
PASSED: Test 4, FADT PM_TMR_LEN is 4.
PASSED: Test 4, FADT GPE0_BLK_LEN non-zero and a non-negative multiple of 2: 16.
PASSED: Test 4, FADT GPE1_BLK_LEN is zero and GPE1_BLK is not supported.
FADT GPE1_BASE is 0
Using P_BLK address of 0x410
WARNING: Test 4, FADT P_LVL2_LAT is > 100 (101) but a P_BLK is defined. This
implies a C2 state is not supported, but there is a P_BLK register block defined
which implies there might be a C2 state that works. There is not enough
information to determine if this is expected or not.
WARNING: Test 4, FADT P_LVL3_LAT is > 1000 (1001) but a P_BLK is defined. This
implies a C3 state is not supported, but there is a P_BLK register block defined
which implies there might be a C3 state that works. There is not enough
information to determine if this is expected or not.
FADT FLUSH_SIZE is 1024
FADT FLUSH_STRIDE is 16
FADT DUTY_OFFSET is 0
FADT DUTY_WIDTH is 0
FADT DAY_ALRM is 13
FADT MON_ALRM is 0
FADT CENTURY is 50
PASSED: Test 4, FADT SLEEP_CONTROL_REG is null and not available when not in
reduced hardware mode.
PASSED: Test 4, FADT SLEEP_STATUS_REG is null and not available when not in
reduced hardware mode.
FADT Hypervisor Vendor Identity is 0

Test 5 of 6: Test FADT SCI_EN bit is enabled.
FADT is greater than ACPI version 1.0
PASSED: Test 5, SCI_EN bit in PM1a Control Register Block is enabled.

Test 6 of 6: Test FADT reset register.
PASSED: Test 6, FADT reset register width is 8 bits wide as expected.
PASSED: Test 6, FADT register bit offset is 0 as expected.

================================================================================
27 passed, 5 failed, 3 warnings, 0 aborted, 2 skipped, 1 info only.
================================================================================

facs: FACS Firmware ACPI Control Structure test.
--------------------------------------------------------------------------------
Test 1 of 1: FACS Firmware ACPI Control Structure test.
FACS Firmware ACPI Control Structure:
  Signature:                'FACS'
  Length:                   0x00000040
  Hardware Signature:       0x00000000
  Firmware Waking Vector:   0x00000000
  Global Lock:              0x00000000
  Flags:                    0x00000000
  X-Firmware Waking Vector: 0x0000000000000000
  Version:                  0x02
  Reserved:                 0x00 0x00 0x00
  OSPM Flags:               0x00000000
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
  Reserved:                 0x00 0x00 0x00 0x00
PASSED: Test 1, No issues found in FACS table.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

erst: ERST Error Record Serialization Table test.
--------------------------------------------------------------------------------
ACPI ERST table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

einj: EINJ Error Injection Table test.
--------------------------------------------------------------------------------
ACPI EINJ table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

ecdt: ECDT Embedded Controller Boot Resources Table test.
--------------------------------------------------------------------------------
Test 1 of 1: ECDT Embedded Controller Boot Resources Table test.
ECDT Embedded Controller Boot Resources Table:
  EC_CONTROL:
    Address Space ID:       0x01
    Register Bit Width      0x08
    Register Bit Offset     0x00
    Access Size             0x00
    Address                 0x0000000000000066
  EC_DATA:
    Address Space ID:       0x01
    Register Bit Width      0x08
    Register Bit Offset     0x00
    Access Size             0x00
    Address                 0x0000000000000062
  UID:                      0x00000000
  GPE_BIT:                  0x19
  EC_ID:                    '\_SB.PCI0.LPCB.EC0'

FAILED [MEDIUM] ECDTEvalUidFailed: Test 1, Failed to evaluate ECDT UID
\_SB.PCI0.LPCB.EC0._UID, cannot check UID
PASSED: Test 1, No issues found in ECDT table.

================================================================================
1 passed, 1 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

dmar: DMA Remapping (VT-d) test.
--------------------------------------------------------------------------------
Test 1 of 1: DMA Remapping test.
SKIPPED: Test 1, No DMAR table. This is not necessarily a failure as most
systems do not have this table.

================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dbg2: DBG2 (Debug Port Table 2) test.
--------------------------------------------------------------------------------
ACPI DBG2 table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

dbgp: DBGP (Debug Port) Table test.
--------------------------------------------------------------------------------
ACPI DBGP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cstates: Processor C state support test.
--------------------------------------------------------------------------------
Test 1 of 1: Test all CPUs C-states.
This test checks if all processors have the same number of C-states, if the
C-state counter works and if C-state transitions happen.
Processor 0 has not reached C3 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
Processor 1 has not reached C1 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
PASSED: Test 1, Processor 1 has the same number of C-states as processor 0
Processor 2 has not reached C3 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
PASSED: Test 1, Processor 2 has the same number of C-states as processor 0
Processor 3 has not reached C6 during tests. This is not a failure, however it
is not a complete and thorough test.
PASSED: Test 1, Processor 3 has the same number of C-states as processor 0
Processor 4 has not reached C1 C3 C6 during tests. This is not a failure,
however it is not a complete and thorough test.
PASSED: Test 1, Processor 4 has the same number of C-states as processor 0
Processor 5 has not reached C3 C6 during tests. This is not a failure, however
it is not a complete and thorough test.
PASSED: Test 1, Processor 5 has the same number of C-states as processor 0
Processor 6 has not reached C6 during tests. This is not a failure, however it
is not a complete and thorough test.
PASSED: Test 1, Processor 6 has the same number of C-states as processor 0
Processor 7 has not reached C6 during tests. This is not a failure, however it
is not a complete and thorough test.
PASSED: Test 1, Processor 7 has the same number of C-states as processor 0

================================================================================
7 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

csrt: CSRT Core System Resource Table test.
--------------------------------------------------------------------------------
ACPI CSRT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

cpep: CPEP Corrected Platform Error Polling Table test.
--------------------------------------------------------------------------------
ACPI CPEP table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

checksum: ACPI table checksum test.
--------------------------------------------------------------------------------
Test 1 of 1: ACPI table checksum test.
PASSED: Test 1, Table RSDP has correct checksum 0x82.
PASSED: Test 1, Table RSDP has correct extended checksum 0x29.
PASSED: Test 1, Table XSDT has correct checksum 0x94
PASSED: Test 1, Table DSDT has correct checksum 0x4f
PASSED: Test 1, Table FACP has correct checksum 0x87
PASSED: Test 1, Table APIC has correct checksum 0x5b
PASSED: Test 1, Table FPDT has correct checksum 0x1b
PASSED: Test 1, Table ECDT has correct checksum 0xf6
PASSED: Test 1, Table MCFG has correct checksum 0x32
PASSED: Test 1, Table HPET has correct checksum 0x3f
PASSED: Test 1, Table SSDT has correct checksum 0xee
PASSED: Test 1, Table SSDT has correct checksum 0xe7
PASSED: Test 1, Table SSDT has correct checksum 0x66
PASSED: Test 1, Table SSDT has correct checksum 0x78
PASSED: Test 1, Table MSDM has correct checksum 0x2d
PASSED: Test 1, Table RSDT has correct checksum 0x3c
PASSED: Test 1, Table FACP has correct checksum 0x48

================================================================================
17 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

autobrightness: Automated LCD brightness test.
--------------------------------------------------------------------------------
Test 1 of 2: Test for maximum and actual brightness.
PASSED: Test 1, Maximum brightness for nv_backlight is 100 which is sane.
PASSED: Test 1, Actual brightness for nv_backlight is 100 which is in range
0..100.

Test 2 of 2: Change actual brightness.
PASSED: Test 2, Actual brightness matches the brightnesss level for all 100
levels for backlight nv_backlight.

================================================================================
3 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

boot: BOOT Table test.
--------------------------------------------------------------------------------
ACPI BOOT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bgrt: BGRT Boot Graphics Resource Table test.
--------------------------------------------------------------------------------
ACPI BGRT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

bert: BERT Boot Error Record Table test.
--------------------------------------------------------------------------------
ACPI BERT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

aspt: ASPT Table test.
--------------------------------------------------------------------------------
ACPI ASPT table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

asf: ASF! Alert Standard Format Table test.
--------------------------------------------------------------------------------
ACPI ASF! table does not exist, skipping test
================================================================================
0 passed, 0 failed, 0 warning, 0 aborted, 1 skipped, 0 info only.
================================================================================

apicinstance: Test for single instance of APIC/MADT table.
--------------------------------------------------------------------------------
Test 1 of 1: Test for single instance of APIC/MADT table.
Found APIC/MADT table APIC @ de7eeac0, length 0x146 
PASSED: Test 1, Found 1 APIC/MADT table(s), as expected.

================================================================================
1 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================

acpitables: ACPI table headers sanity tests.
--------------------------------------------------------------------------------
Test 1 of 1: Test ACPI headers.
PASSED: Test 1, Table XSDT has valid signature and ID strings.
PASSED: Test 1, Table DSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.
PASSED: Test 1, Table APIC has valid signature and ID strings.
PASSED: Test 1, Table FPDT has valid signature and ID strings.
PASSED: Test 1, Table ECDT has valid signature and ID strings.
PASSED: Test 1, Table MCFG has valid signature and ID strings.
PASSED: Test 1, Table HPET has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table SSDT has valid signature and ID strings.
PASSED: Test 1, Table MSDM has valid signature and ID strings.
PASSED: Test 1, Table RSDT has valid signature and ID strings.
PASSED: Test 1, Table FACP has valid signature and ID strings.

================================================================================
15 passed, 0 failed, 0 warning, 0 aborted, 0 skipped, 0 info only.
================================================================================


714 passed, 260 failed, 20 warnings, 5 aborted, 207 skipped, 11 info only.

Test Failure Summary
================================================================================

Critical failures: NONE

High failures: 53
 klog: HIGH Kernel message: [    4.391939] ACPI Warning: \_SB_.PCI0.PEG0.GFX0._DSM: Argument #4 type mismatch - Found [Buffer], ACPI requires [Package] (20150930/nsarguments-95)
 klog: HIGH Kernel message: [   20.560876] ACPI Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with OpRegion 0x0000000000000400-0x000000000000044F (\GPIS) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560882] ACPI Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with OpRegion 0x0000000000000400-0x000000000000047F (\PMIO) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560888] ACPI Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560890] ACPI Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560893] ACPI Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560895] ACPI Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560898] ACPI Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with OpRegion 0x0000000000000500-0x000000000000057F (\GPIO) (20150930/utaddress-254)
 klog: HIGH Kernel message: [   20.560900] ACPI Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\GP01) (20150930/utaddress-254)
 uefirtauthvar: Failed to create authenticated variable with UEFI runtime service.
 uefirtauthvar: Failed to set authenticated variable with UEFI runtime service.
 uefirttime: Time returned an invalid year 64496, should be between 1900 and 9999.
 uefirttime: Failed to verify wakeup time after change.
 uefirttime: Failed to set wakeup time with UEFI runtime service.
 syntaxcheck: Assembler error in line 4067
 syntaxcheck: Assembler error in line 9255
 syntaxcheck: Assembler error in line 245
 syntaxcheck: Assembler error in line 246
 syntaxcheck: Assembler error in line 265
 syntaxcheck: Assembler error in line 266
 syntaxcheck: Assembler error in line 285
 syntaxcheck: Assembler error in line 286
 syntaxcheck: Assembler error in line 305
 syntaxcheck: Assembler error in line 306
 syntaxcheck: Assembler error in line 325
 syntaxcheck: Assembler error in line 326
 syntaxcheck: Assembler error in line 345
 syntaxcheck: Assembler error in line 346
 syntaxcheck: Assembler error in line 365
 syntaxcheck: Assembler error in line 366
 syntaxcheck: Assembler error in line 385
 syntaxcheck: Assembler error in line 386
 syntaxcheck: Assembler error in line 537
 syntaxcheck: Assembler error in line 538
 syntaxcheck: Assembler error in line 557
 syntaxcheck: Assembler error in line 558
 syntaxcheck: Assembler error in line 577
 syntaxcheck: Assembler error in line 578
 syntaxcheck: Assembler error in line 597
 syntaxcheck: Assembler error in line 598
 syntaxcheck: Assembler error in line 617
 syntaxcheck: Assembler error in line 618
 syntaxcheck: Assembler error in line 637
 syntaxcheck: Assembler error in line 638
 syntaxcheck: Assembler error in line 657
 syntaxcheck: Assembler error in line 658
 syntaxcheck: Assembler error in line 677
 syntaxcheck: Assembler error in line 678
 syntaxcheck: Compilation aborted early due to a parser detected syntax error.
 syntaxcheck: Assembler error in line 104
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT0._GTF'.
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT1._GTF'.
 method: Detected error 'Incorrect operand value' when evaluating '\_SB_.PCI0.IDE0.PRT2._GTF'.

Medium failures: 61
 mtrr: Memory range 0x100000 to 0xdd6acfff (System RAM) has incorrect attribute Default (Most probably Uncached).
 mtrr: Memory range 0x100000000 to 0x41f3fffff (System RAM) has incorrect attribute Default (Most probably Uncached).
 dmicheck: String index 0x05 in table entry 'Base Board Information (Type 2)' @ 0x000ebb22, field 'Asset Tag', offset 0x08 has a default value 'ATN12345678901234567' and probably has not been updated by the BIOS vendor.
 syntaxcheck: Assembler warning in line 2400
 syntaxcheck: Assembler warning in line 3639
 syntaxcheck: Assembler warning in line 4054
 syntaxcheck: Assembler warning in line 4215
 syntaxcheck: Assembler warning in line 8169
 syntaxcheck: Assembler warning in line 9143
 syntaxcheck: Assembler warning in line 10742
 syntaxcheck: Assembler warning in line 10892
 syntaxcheck: Assembler warning in line 10903
 syntaxcheck: Assembler warning in line 11401
 syntaxcheck: Assembler warning in line 11463
 syntaxcheck: Assembler warning in line 13620
 syntaxcheck: Assembler warning in line 13632
 syntaxcheck: Assembler warning in line 13633
 syntaxcheck: Assembler warning in line 13777
 syntaxcheck: Assembler warning in line 14746
 syntaxcheck: Assembler warning in line 15012
 syntaxcheck: Assembler warning in line 15043
 syntaxcheck: Assembler warning in line 15617
 syntaxcheck: Assembler warning in line 15747
 syntaxcheck: Assembler warning in line 15866
 syntaxcheck: Assembler warning in line 15909
 syntaxcheck: Assembler warning in line 16025
 syntaxcheck: Assembler warning in line 16417
 syntaxcheck: Assembler warning in line 16465
 syntaxcheck: Assembler warning in line 16484
 syntaxcheck: Assembler warning in line 16515
 syntaxcheck: Assembler warning in line 16541
 syntaxcheck: Assembler warning in line 16557
 syntaxcheck: Assembler warning in line 16710
 syntaxcheck: Assembler warning in line 16718
 syntaxcheck: Assembler warning in line 16727
 syntaxcheck: Assembler warning in line 16735
 syntaxcheck: Assembler warning in line 16749
 syntaxcheck: Assembler warning in line 16757
 syntaxcheck: Assembler warning in line 17209
 syntaxcheck: Assembler warning in line 17714
 syntaxcheck: Assembler warning in line 18836
 syntaxcheck: Assembler warning in line 18851
 syntaxcheck: Assembler warning in line 18866
 syntaxcheck: Assembler warning in line 18881
 syntaxcheck: Assembler warning in line 35
 syntaxcheck: Assembler warning in line 107
 syntaxcheck: Assembler warning in line 200
 syntaxcheck: Assembler warning in line 267
 syntaxcheck: Assembler warning in line 314
 syntaxcheck: Assembler warning in line 361
 syntaxcheck: Assembler warning in line 408
 syntaxcheck: Assembler warning in line 455
 syntaxcheck: Assembler warning in line 502
 rsdp: RSDP: only one of RsdtAddress or XsdtAddress should be non-zero.  Both fields are non-zero.
 fan: Fan present but has no cur_state present.
 fadt: FADT first reserved field is not zero: 0x01
 fadt: FADT PM1A_EVT_BLK has both a 32-bit and a 64-bit address set; only one should be used.
 fadt: FADT PM1A_CNT_BLK field has both the 32-bit and the 64-bit field set.
 fadt: FADT PM2_CNT_BLK field has both the 32-bit and the 64-bit field set.
 fadt: FADT PM_TMR_BLK field has both the 32-bit and the 64-bit field set.
 ecdt: Failed to evaluate ECDT UID \_SB.PCI0.LPCB.EC0._UID, cannot check UID

Low failures: 124
 klog: LOW Kernel message: [   20.560902] lpc_ich: Resource conflict(s) found affecting gpio_ich
 dmicheck: String index 0x05 in table entry 'Chassis Information (Type 3)' @ 0x000ebb98, field 'SKU Number', offset 0x15 has a default value 'To be filled by O.E.M.' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x04 in table entry 'Processor Information (Type 4)' @ 0x000ebe16, field 'Asset Tag', offset 0x21 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Processor Information (Type 4)' @ 0x000ebe16, field 'Part Number', offset 0x22 has a default value 'Fill By OEM' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0x000ebea1, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0x000ebf34, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0x000ebfc7, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 dmicheck: String index 0x05 in table entry 'Memory Device (Type 17)' @ 0x000ec05a, field 'Asset Tag', offset 0x19 has a default value '9876543210' and probably has not been updated by the BIOS vendor.
 mpcheck: System Address Space Mapping Entry 3 (@0x000fd790) has a zero sized Address Length.
 mpcheck: System Address Space Mapping Entry 4 (@0x000fd7a4) has a zero sized Address Length.
 syntaxcheck: Assembler remark in line 3018
 syntaxcheck: Assembler remark in line 3223
 syntaxcheck: Assembler remark in line 3709
 syntaxcheck: Assembler remark in line 4049
 syntaxcheck: Assembler remark in line 4085
 syntaxcheck: Assembler remark in line 4163
 syntaxcheck: Assembler remark in line 4165
 syntaxcheck: Assembler remark in line 4166
 syntaxcheck: Assembler remark in line 4167
 syntaxcheck: Assembler remark in line 4168
 syntaxcheck: Assembler remark in line 4169
 syntaxcheck: Assembler remark in line 7179
 syntaxcheck: Assembler remark in line 7715
 syntaxcheck: Assembler remark in line 7927
 syntaxcheck: Assembler remark in line 7940
 syntaxcheck: Assembler remark in line 7951
 syntaxcheck: Assembler remark in line 9111
 syntaxcheck: Assembler remark in line 9325
 syntaxcheck: Assembler remark in line 10140
 syntaxcheck: Assembler remark in line 10963
 syntaxcheck: Assembler remark in line 11296
 syntaxcheck: Assembler remark in line 11627
 syntaxcheck: Assembler remark in line 11642
 syntaxcheck: Assembler remark in line 11657
 syntaxcheck: Assembler remark in line 11725
 syntaxcheck: Assembler remark in line 11795
 syntaxcheck: Assembler remark in line 11811
 syntaxcheck: Assembler remark in line 11884
 syntaxcheck: Assembler remark in line 11897
 syntaxcheck: Assembler remark in line 11933
 syntaxcheck: Assembler remark in line 11953
 syntaxcheck: Assembler remark in line 11981
 syntaxcheck: Assembler remark in line 12024
 syntaxcheck: Assembler remark in line 12038
 syntaxcheck: Assembler remark in line 12130
 syntaxcheck: Assembler remark in line 12150
 syntaxcheck: Assembler remark in line 12199
 syntaxcheck: Assembler remark in line 12219
 syntaxcheck: Assembler remark in line 12239
 syntaxcheck: Assembler remark in line 12385
 syntaxcheck: Assembler remark in line 12424
 syntaxcheck: Assembler remark in line 12444
 syntaxcheck: Assembler remark in line 12466
 syntaxcheck: Assembler remark in line 12536
 syntaxcheck: Assembler remark in line 12556
 syntaxcheck: Assembler remark in line 12596
 syntaxcheck: Assembler remark in line 12646
 syntaxcheck: Assembler remark in line 12664
 syntaxcheck: Assembler remark in line 12687
 syntaxcheck: Assembler remark in line 12705
 syntaxcheck: Assembler remark in line 12730
 syntaxcheck: Assembler remark in line 12775
 syntaxcheck: Assembler remark in line 12795
 syntaxcheck: Assembler remark in line 12813
 syntaxcheck: Assembler remark in line 12927
 syntaxcheck: Assembler remark in line 12947
 syntaxcheck: Assembler remark in line 12967
 syntaxcheck: Assembler remark in line 13002
 syntaxcheck: Assembler remark in line 13025
 syntaxcheck: Assembler remark in line 13073
 syntaxcheck: Assembler remark in line 13093
 syntaxcheck: Assembler remark in line 13160
 syntaxcheck: Assembler remark in line 13180
 syntaxcheck: Assembler remark in line 13217
 syntaxcheck: Assembler remark in line 13254
 syntaxcheck: Assembler remark in line 13280
 syntaxcheck: Assembler remark in line 13324
 syntaxcheck: Assembler remark in line 13344
 syntaxcheck: Assembler remark in line 13363
 syntaxcheck: Assembler remark in line 13387
 syntaxcheck: Assembler remark in line 13437
 syntaxcheck: Assembler remark in line 13457
 syntaxcheck: Assembler remark in line 13463
 syntaxcheck: Assembler remark in line 13481
 syntaxcheck: Assembler remark in line 13507
 syntaxcheck: Assembler remark in line 13514
 syntaxcheck: Assembler remark in line 13636
 syntaxcheck: Assembler remark in line 13672
 syntaxcheck: Assembler remark in line 13684
 syntaxcheck: Assembler remark in line 13696
 syntaxcheck: Assembler remark in line 15807
 syntaxcheck: Assembler remark in line 15811
 syntaxcheck: Assembler remark in line 17357
 syntaxcheck: Assembler remark in line 17371
 syntaxcheck: Assembler remark in line 17386
 syntaxcheck: Assembler remark in line 17401
 syntaxcheck: Assembler remark in line 17415
 syntaxcheck: Assembler remark in line 17430
 syntaxcheck: Assembler remark in line 17445
 syntaxcheck: Assembler remark in line 17817
 syntaxcheck: Assembler remark in line 17822
 syntaxcheck: Assembler remark in line 18271
 syntaxcheck: Assembler remark in line 18714
 syntaxcheck: Assembler remark in line 18757
 syntaxcheck: Assembler remark in line 18761
 syntaxcheck: Assembler remark in line 18768
 syntaxcheck: Assembler remark in line 18786
 syntaxcheck: Assembler remark in line 18790
 syntaxcheck: Assembler remark in line 19012
 syntaxcheck: Assembler remark in line 117
 syntaxcheck: Assembler remark in line 118
 syntaxcheck: Assembler remark in line 119
 syntaxcheck: Assembler remark in line 335
 syntaxcheck: Assembler remark in line 341
 syntaxcheck: Assembler remark in line 141
 syntaxcheck: Assembler remark in line 142
 syntaxcheck: Assembler remark in line 143
 syntaxcheck: Assembler remark in line 222
 syntaxcheck: Assembler remark in line 228
 syntaxcheck: Assembler remark in line 132
 syntaxcheck: Assembler remark in line 135
 syntaxcheck: Assembler remark in line 161
 syntaxcheck: Assembler remark in line 240
 syntaxcheck: Assembler remark in line 250

Other failures: NONE

Test           |Pass |Fail |Abort|Warn |Skip |Info |
---------------+-----+-----+-----+-----+-----+-----+
acpiinfo       |     |     |     |     |     |    3|
acpitables     |   15|     |     |     |     |     |
apicedge       |    1|     |     |     |     |     |
apicinstance   |    1|     |     |     |     |     |
asf            |     |     |     |     |    1|     |
aspm           |    3|     |     |    8|     |     |
aspt           |     |     |     |     |    1|     |
autobrightness |    3|     |     |     |     |     |
bert           |     |     |     |     |    1|     |
bgrt           |     |     |     |     |    1|     |
bios32         |     |     |     |     |    1|     |
bios_info      |     |     |     |     |     |    1|
bmc_info       |     |     |     |     |    1|     |
boot           |     |     |     |     |    1|     |
checksum       |   17|     |     |     |     |     |
cpep           |     |     |     |     |    1|     |
cpufreq        |    4|     |     |     |    3|     |
crs            |    1|     |     |     |     |     |
csm            |     |     |     |     |     |    1|
csrt           |     |     |     |     |    1|     |
cstates        |    7|     |     |     |     |     |
dbg2           |     |     |     |     |    1|     |
dbgp           |     |     |     |     |    1|     |
dmar           |     |     |     |     |    1|     |
dmicheck       |   24|    8|     |     |    1|     |
dt_base        |     |     |     |     |    3|     |
dt_sysinfo     |     |     |     |     |    2|     |
ebda           |     |     |     |     |    1|     |
ecdt           |    1|    1|     |     |     |     |
einj           |     |     |     |     |    1|     |
erst           |     |     |     |     |    1|     |
esrt           |     |     |    1|     |     |     |
facs           |    1|     |     |     |     |     |
fadt           |   27|    5|     |    3|    2|    1|
fan            |    8|    1|     |     |     |     |
fpdt           |    1|     |     |     |     |     |
gtdt           |     |     |     |     |    1|     |
hda_audio      |    1|     |     |     |     |     |
hest           |     |     |     |     |    1|     |
hpet           |    5|     |     |     |     |     |
iort           |     |     |     |     |    1|     |
klog           |     |   10|     |     |     |     |
lpit           |     |     |     |     |    1|     |
madt           |   45|     |     |     |     |     |
maxfreq        |    1|     |     |     |     |     |
maxreadreq     |    1|     |     |     |     |     |
mcfg           |    2|     |     |     |     |     |
mchi           |     |     |     |     |    1|     |
method         |  333|    3|     |    8|  146|     |
microcode      |     |     |     |     |    1|     |
mpcheck        |    8|    2|     |     |     |     |
msct           |     |     |     |     |    1|     |
msdm           |    1|     |     |     |     |     |
msr            |   98|     |     |     |     |     |
mtrr           |    1|    2|     |     |    1|     |
nx             |    3|     |     |     |     |     |
olog           |     |     |    1|     |     |     |
oops           |    2|     |     |     |     |     |
osilinux       |     |     |     |    1|     |     |
pcc            |     |     |     |     |     |    1|
pciirq         |    4|     |     |     |     |     |
pnp            |    2|     |     |     |     |     |
rsdp           |    8|    1|     |     |     |     |
rsdt           |    1|     |     |     |     |     |
sbst           |     |     |     |     |    1|     |
securebootcert |    3|     |     |     |    1|     |
slic           |     |     |     |     |    1|     |
slit           |     |     |     |     |    1|     |
spcr           |     |     |     |     |    1|     |
spmi           |     |     |     |     |    1|     |
srat           |     |     |     |     |    1|     |
stao           |     |     |     |     |    1|     |
syntaxcheck    |     |  211|     |     |     |     |
tcpa           |     |     |    1|     |     |     |
tpm2           |     |     |    1|     |     |     |
uefi           |     |     |     |     |    1|     |
uefibootpath   |    6|     |     |     |     |     |
uefirtauthvar  |    4|    2|     |     |    6|     |
uefirtmisc     |    3|     |     |     |   10|     |
uefirttime     |   33|   14|     |     |     |     |
uefirtvariable |   25|     |     |     |     |     |
version        |     |     |     |     |     |    4|
virt           |    1|     |     |     |     |     |
waet           |     |     |     |     |    1|     |
wakealarm      |    6|     |     |     |     |     |
wdat           |     |     |     |     |    1|     |
wmi            |    2|     |     |     |     |     |
xenv           |     |     |    1|     |     |     |
xsdt           |    1|     |     |     |     |     |
---------------+-----+-----+-----+-----+-----+-----+
Total:         |  714|  260|    5|   20|  207|   11|
---------------+-----+-----+-----+-----+-----+-----+
